/*****************************************************************************
 *
 * Copyright 2008 - 2021 ADVANCED MICRO DEVICES, INC.  All Rights Reserved.
 *
 * AMD is granting You permission to use this software and documentation (if
 * any) (collectively, the "Software") pursuant to the terms and conditions of
 * the Software License Agreement included with the Software. If You do not have
 * a copy of the Software License Agreement, contact Your AMD representative for
 * a copy.
 *
 * You agree that You will not reverse engineer or decompile the Software, in
 * whole or in part, except as allowed by applicable law.
 *
 * WARRANTY DISCLAIMER: THE SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
 * KIND. AMD DISCLAIMS ALL WARRANTIES, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
 * BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, QUALITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE, NON-INFRINGEMENT AND WARRANTIES
 * ARISING FROM CUSTOM OF TRADE OR COURSE OF USAGE WITH RESPECT TO THE SOFTWARE,
 * INCLUDING WITHOUT LIMITATION, THAT THE SOFTWARE WILL RUN UNINTERRUPTED OR
 * ERROR-FREE. THE ENTIRE RISK ASSOCIATED WITH THE USE OF THE SOFTWARE IS
 * ASSUMED BY YOU. Some jurisdictions do not allow the exclusion of implied
 * warranties, so the above exclusion may not apply to You, but only to the
 * extent required by law.
 *
 * LIMITATION OF LIABILITY AND INDEMNIFICATION: TO THE EXTENT NOT PROHIBITED BY
 * APPLICABLE LAW, AMD AND ITS LICENSORS WILL NOT, UNDER ANY CIRCUMSTANCES BE
 * LIABLE TO YOU FOR ANY PUNITIVE, DIRECT, INCIDENTAL, INDIRECT, SPECIAL OR
 * CONSEQUENTIAL DAMAGES ARISING FROM POSSESSION OR USE OF THE SOFTWARE OR
 * OTHERWISE IN CONNECTION WITH ANY PROVISION OF THIS AGREEMENT EVEN IF AMD AND
 * ITS LICENSORS HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. THIS
 * INCLUDES, WITHOUT LIMITATION, DAMAGES DUE TO LOST OR MISAPPROPRIATED DATA,
 * LOST PROFITS OR CONFIDENTIAL OR OTHER INFORMATION, FOR BUSINESS INTERRUPTION,
 * FOR PERSONAL INJURY, FOR LOSS OF PRIVACY, FOR FAILURE TO MEET ANY DUTY
 * INCLUDING OF GOOD FAITH OR REASONABLE CARE, FOR NEGLIGENCE AND FOR ANY OTHER
 * PECUNIARY OR OTHER LOSS WHTSOEVER. In no event shall AMD's total liability to
 * You for all damages, losses, and causes of action (whether in contract, tort
 * (including negligence) or otherwise) exceed the amount of $50 USD. You agree
 * to defend, indemnify and hold harmless AMD, its subsidiaries and affiliates
 * and their respective licensors, directors, officers, employees, affiliates or
 * agents from and against any and all loss, damage, liability and other
 * expenses (including reasonable attorneys' fees), resulting from Your
 * possession or use of the Software or violation of the terms and conditions of
 * this Agreement.
 *
 * U.S. GOVERNMENT RESTRICTED RIGHTS: Notice to U.S. Government End Users. The
 * Software and related documentation are "commercial items", as that term is
 * defined at 48 C.F.R. Section 2.101, consisting of "commercial computer
 * software" and "commercial computer software documentation", as such terms are
 * used in 48 C.F.R. Section 12.212 and 48 C.F.R. Section 227.7202,
 * respectively. Consistent with 48 C.F.R. Section 12.212 or 48 C.F.R. Sections
 * 227.7202-1 through 227.7202-4, as applicable, the commercial computer
 * software and commercial computer software documentation are being licensed to
 * U.S. Government end users: (a) only as commercial items, and (b) with only
 * those rights as are granted to all other end users pursuant to the terms and
 * conditions set forth in this Agreement. Unpublished rights are reserved under
 * the copyright laws of the United States.
 *
 * EXPORT RESTRICTIONS:  You shall adhere to all applicable U.S. import/export
 * laws and regulations, as well as the import/export control laws and
 * regulations of other countries as applicable. You further agree You will not
 * export, re-export, or transfer, directly or indirectly, any product,
 * technical data, software or source code received from AMD under this license,
 * or the direct product of such technical data or software to any country for
 * which the United States or any other applicable government requires an export
 * license or other governmental approval without first obtaining such licenses
 * or approvals, or in violation of any applicable laws or regulations of the
 * United States or the country where the technical data or software was
 * obtained. You acknowledges the technical data and software received will not,
 * in the absence of authorization from U.S. or local law and regulations as
 * applicable, be used by or exported, re-exported or transferred to: (i) any
 * sanctioned or embargoed country, or to nationals or residents of such
 * countries; (ii) any restricted end-user as identified on any applicable
 * government end-user list; or (iii) any party where the end-use involves
 * nuclear, chemical/biological weapons, rocket systems, or unmanned air
 * vehicles.  For the most current Country Group listings, or for additional
 * information about the EAR or Your obligations under those regulations, please
 * refer to the website of the U.S. Bureau of Industry and Security at
 * http://www.bis.doc.gov/.
 ***************************************************************************/


#include <Guid/HiiPlatformSetupFormset.h>
#include "AmdCbsFormID.h"
#include <Guid/AmdCbsConfig.h>
#include "AmdCbsVariable.h"

formset
  guid      = FORMSET_ID_GUID_AMD_CBS,
  title     = STRING_TOKEN(AMD_CBS_STR_CBS_ROOT_SECTION),
  help      = STRING_TOKEN(AMD_CBS_STR_CBS_ROOT_SECTION_HELP),
  classguid = EFI_HII_PLATFORM_SETUP_FORMSET_GUID,

  varstore CBS_CONFIG,                        // This is the data structure type
    varid = CBS_CONFIGURATION_VARSTORE_ID,    // Optional VarStore ID
    name  = AmdSetup,                         // Define referenced name in vfr
    guid  = CBS_SYSTEM_CONFIGURATION_GUID;    // GUID of this buffer storage
  //
  // form - CBS_ROOT
  //
  form

    formid        = SETUP_CBS_ROOT_LABLE,

    title         = STRING_TOKEN (AMD_CBS_STR_CBS_ROOT_SECTION);

    subtitle text = STRING_TOKEN (AMD_CBS_STR_CBS_ROOT_SECTION);
    subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

    goto SETUP_ZEN_COMMON_OPTIONS_LABLE,
      prompt      = STRING_TOKEN (AMD_CBS_STR_ZEN_COMMON_OPTIONS_SECTION),
      help        = STRING_TOKEN (AMD_CBS_STR_ZEN_COMMON_OPTIONS_SECTION);

    goto SETUP_DF_COMMON_OPTIONS_LABLE,
      prompt      = STRING_TOKEN (AMD_CBS_STR_DF_COMMON_OPTIONS_SECTION),
      help        = STRING_TOKEN (AMD_CBS_STR_DF_COMMON_OPTIONS_SECTION);

    goto SETUP_UMC_COMMON_OPTIONS_LABLE,
      prompt      = STRING_TOKEN (AMD_CBS_STR_UMC_COMMON_OPTIONS_SECTION),
      help        = STRING_TOKEN (AMD_CBS_STR_UMC_COMMON_OPTIONS_SECTION);

    goto SETUP_NBIO_COMMON_OPTIONS_LABLE,
      prompt      = STRING_TOKEN (AMD_CBS_STR_NBIO_COMMON_OPTIONS_SECTION),
      help        = STRING_TOKEN (AMD_CBS_STR_NBIO_COMMON_OPTIONS_SECTION);

    goto SETUP_FCH_COMMON_OPTIONS_LABLE,
      prompt      = STRING_TOKEN (AMD_CBS_STR_FCH_COMMON_OPTIONS_SECTION),
      help        = STRING_TOKEN (AMD_CBS_STR_FCH_COMMON_OPTIONS_SECTION);

    #ifdef PROMONTORY_SUPPORT
    goto SETUP_PROMONTORY_COMMON_OPTIONS_LABLE,
      prompt      = STRING_TOKEN (AMD_CBS_STR_PROMONTORY_COMMON_OPTIONS_SECTION),
      help        = STRING_TOKEN (AMD_CBS_STR_PROMONTORY_COMMON_OPTIONS_SECTION);
    #endif

    // Display Condition: CbsComboFlag = 255
    suppressif NOT ideqval CBS_CONFIG.CbsComboFlag == 255;
      // Combo CBS
      // No help string
      numeric
        varid       = CBS_CONFIG.CbsComboFlag,
        prompt      = STRING_TOKEN (AMD_CBS_STR_COMBO_CBS),
        help        = STRING_TOKEN (AMD_CBS_STR_COMBO_CBS_HELP),
        flags       = DISPLAY_UINT_HEX | RESET_REQUIRED,
        minimum     = 0x00,
        maximum     = 0xff,
        step        = 0,
        default     = 254,
      endnumeric;
    endif;

  endform;


    //
    // form - Zen Common Options
    //
    form

      formid        = SETUP_ZEN_COMMON_OPTIONS_LABLE,

      title         = STRING_TOKEN (AMD_CBS_STR_ZEN_COMMON_OPTIONS_SECTION);

      subtitle text = STRING_TOKEN (AMD_CBS_STR_ZEN_COMMON_OPTIONS_SECTION);
      subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

      // RedirectForReturnDis
      // From a workaround for GCC/C000005 issue for XV Core on CZ A0, setting MSRC001_1029 Decode Configuration (DE_CFG) bit 14 [DecfgNoRdrctForReturns] to 1
      oneof
        varid       = CBS_CONFIG.CbsCmnCpuGenWA05,
        prompt      = STRING_TOKEN (AMD_CBS_STR_REDIRECTFORRETURNDIS),
        help        = STRING_TOKEN (AMD_CBS_STR_REDIRECTFORRETURNDIS_HELP),
        option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_1),               value = 1,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_0),               value = 0,    flags = 0 | RESET_REQUIRED;
      endoneof;

      // L2 TLB Associativity
      // 0 - L2 TLB ways [11:8] are fully associative.  1 - =L2 TLB ways [11:8] are 4K-only.
      oneof
        varid       = CBS_CONFIG.CbsCmnCpuL2TlbWayAlloc,
        prompt      = STRING_TOKEN (AMD_CBS_STR_L2_TLB_ASSOCIATIVITY),
        help        = STRING_TOKEN (AMD_CBS_STR_L2_TLB_ASSOCIATIVITY_HELP),
        option text = STRING_TOKEN (AMD_CBS_STR_0),               value = 0,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_1),               value = 1,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 3,    flags = DEFAULT | RESET_REQUIRED;
      endoneof;

      // Platform First Error Handling
      // Enable/disable PFEH, cloak individual banks, and mask deferred error interrupts from each bank.
      oneof
        varid       = CBS_CONFIG.CbsCmnCpuPfeh,
        prompt      = STRING_TOKEN (AMD_CBS_STR_PLATFORM_FIRST_ERROR_HANDLING),
        help        = STRING_TOKEN (AMD_CBS_STR_PLATFORM_FIRST_ERROR_HANDLING_HELP),
        option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 0,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 1,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 3,    flags = DEFAULT | RESET_REQUIRED;
      endoneof;

      // Core Performance Boost
      // Disable CPB
      oneof
        varid       = CBS_CONFIG.CbsCmnCpuCpb,
        prompt      = STRING_TOKEN (AMD_CBS_STR_CORE_PERFORMANCE_BOOST),
        help        = STRING_TOKEN (AMD_CBS_STR_CORE_PERFORMANCE_BOOST_HELP),
        option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 1,    flags = DEFAULT | RESET_REQUIRED;
      endoneof;

      // Global C-state Control
      // Controls IO based C-state generation and DF C-states.
      oneof
        varid       = CBS_CONFIG.CbsCmnCpuGlobalCstateCtrl,
        prompt      = STRING_TOKEN (AMD_CBS_STR_GLOBAL_C_STATE_CONTROL),
        help        = STRING_TOKEN (AMD_CBS_STR_GLOBAL_C_STATE_CONTROL_HELP),
        option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 3,    flags = DEFAULT | RESET_REQUIRED;
      endoneof;

      // Display Condition: CbsComboFlag=15
      suppressif NOT ideqval CBS_CONFIG.CbsComboFlag == 15;
        // OC Mode
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsCmnCpuOcMode,
          questionid  = KEY_OC_MODE,
          prompt      = STRING_TOKEN (AMD_CBS_STR_OC_MODE),
          help        = STRING_TOKEN (AMD_CBS_STR_OC_MODE_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_NORMAL_OPERATION), value = 0,    flags = DEFAULT | RESET_REQUIRED | INTERACTIVE;
          option text = STRING_TOKEN (AMD_CBS_STR_OC1),             value = 1,    flags = 0 | RESET_REQUIRED | INTERACTIVE;
          option text = STRING_TOKEN (AMD_CBS_STR_CUSTOMIZED),      value = 5,    flags = 0 | RESET_REQUIRED | INTERACTIVE;
        endoneof;
      endif;

      // Display Condition: CbsComboFlag=15
      suppressif NOT ideqval CBS_CONFIG.CbsComboFlag == 15;
        goto SETUP_CUSTOM_PSTATES_THROTTLING_LABLE,
          prompt      = STRING_TOKEN (AMD_CBS_STR_CUSTOM_PSTATES_THROTTLING_SECTION),
          help        = STRING_TOKEN (AMD_CBS_STR_CUSTOM_PSTATES_THROTTLING_SECTION);
      endif;

      goto SETUP_CORE_THREAD_ENABLEMENT_LABLE,
        prompt      = STRING_TOKEN (AMD_CBS_STR_CORE_THREAD_ENABLEMENT_SECTION),
        help        = STRING_TOKEN (AMD_CBS_STR_CORE_THREAD_ENABLEMENT_SECTION);

      // Streaming Stores Control
      // Enables or disables the streaming stores functionality
      oneof
        varid       = CBS_CONFIG.CbsCmnCpuStreamingStoresCtrl,
        prompt      = STRING_TOKEN (AMD_CBS_STR_STREAMING_STORES_CONTROL),
        help        = STRING_TOKEN (AMD_CBS_STR_STREAMING_STORES_CONTROL_HELP),
        option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 1,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 0,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED;
      endoneof;

      // Enable IBS
      // When IBS is enabled, SpecLockMap and Stack Engine are disabled.
      oneof
        varid       = CBS_CONFIG.CbsCmnCpuEnIbs,
        prompt      = STRING_TOKEN (AMD_CBS_STR_ENABLE_IBS),
        help        = STRING_TOKEN (AMD_CBS_STR_ENABLE_IBS_HELP),
        option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 3,    flags = DEFAULT | RESET_REQUIRED;
      endoneof;

    endform;
      //
      // form - Custom Pstates / Throttling
      //
      form

        formid        = SETUP_CUSTOM_PSTATES_THROTTLING_LABLE,

        title         = STRING_TOKEN (AMD_CBS_STR_CUSTOM_PSTATES_THROTTLING_SECTION);

        subtitle text = STRING_TOKEN (AMD_CBS_STR_CUSTOM_PSTATES_THROTTLING_SECTION);
        subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

        // Custom Core Pstates Legal Disclaimer
        // Legal Disclaimer
        text
          help        = STRING_TOKEN (AMD_CBS_STR_CUSTOM_CORE_PSTATES_LEGAL_DISCLAIMER_HELP),
          text        = STRING_TOKEN (AMD_CBS_STR_CUSTOM_CORE_PSTATES_LEGAL_DISCLAIMER);

        // Custom Core Pstates Legal Disclaimer 1
        // Legal Disclaimer
        text
          help        = STRING_TOKEN (AMD_CBS_STR_CUSTOM_CORE_PSTATES_LEGAL_DISCLAIMER_1_HELP),
          text        = STRING_TOKEN (AMD_CBS_STR_CUSTOM_CORE_PSTATES_LEGAL_DISCLAIMER_1);

        goto SETUP_ZEN_COMMON_OPTIONS_LABLE,
          prompt      = STRING_TOKEN (AMD_CBS_STR_DECLINE_SECTION),
          help        = STRING_TOKEN (AMD_CBS_STR_DECLINE_SECTION);

        goto SETUP_ACCEPT_LABLE,
          prompt      = STRING_TOKEN (AMD_CBS_STR_ACCEPT_SECTION),
          help        = STRING_TOKEN (AMD_CBS_STR_ACCEPT_SECTION);

      endform;
        //
        // form - Decline
        //
        form

          formid        = SETUP_DECLINE_LABLE,

          title         = STRING_TOKEN (AMD_CBS_STR_DECLINE_SECTION);

          subtitle text = STRING_TOKEN (AMD_CBS_STR_DECLINE_SECTION);
          subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

        endform;
        //
        // form - Accept
        //
        form

          formid        = SETUP_ACCEPT_LABLE,

          title         = STRING_TOKEN (AMD_CBS_STR_ACCEPT_SECTION);

          subtitle text = STRING_TOKEN (AMD_CBS_STR_ACCEPT_SECTION);
          subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

          // Active Condition: CbsCmnCpuOcMode=Customized
          grayoutif NOT ideqval CBS_CONFIG.CbsCmnCpuOcMode == 5;
            // Custom Pstate0
            // Disable - disable this Pstate\nCustom - customize this Pstate, applicable only if PcdOcDisable=FALSE\n\nWARNING - DAMAGE CAUSED BY USE OF YOUR AMD PROCESSOR OUTSIDE OF SPECIFICATION OR IN EXCESS OF FACTORY SETTINGS ARE NOT COVERED UNDER YOUR AMD PRODUCT WARRANTY AND MAY NOT BE COVERED BY YOUR SYSTEM MANUFACTURER'S WARRANTY.\nOperating your AMD processor outside of specification or in excess of factory settings, including but not limited to overclocking, may damage or shorten the life of your processor or other system components, create system instabilities (e.g., data loss and corrupted images) and in extreme cases may result in total system failure. AMD does not provide support or service for issues or damages related to use of an AMD processor outside of processor specifications or in excess of factory settings.\n
            oneof
              varid       = CBS_CONFIG.CbsCpuPstCustomP0,
              questionid  = KEY_CUSTOM_PSTATE0,
              prompt      = STRING_TOKEN (AMD_CBS_STR_CUSTOM_PSTATE0),
              help        = STRING_TOKEN (AMD_CBS_STR_CUSTOM_PSTATE0_HELP),
              option text = STRING_TOKEN (AMD_CBS_STR_CUSTOM),          value = 1,    flags = 0 | RESET_REQUIRED | INTERACTIVE;
              option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 2,    flags = DEFAULT | RESET_REQUIRED | INTERACTIVE;
            endoneof;
          endif;

          // Display Condition: CbsCpuPstCustomP0=Custom
          // Active Condition: CbsCpuPstCustomP0=Auto
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP0 == 1;
          grayoutif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP0 == 2;
            // Frequency (MHz)
            // Current core frequency in MHz
            numeric
              varid       = CBS_CONFIG.CbsCpuCofP0,
              prompt      = STRING_TOKEN (AMD_CBS_STR_FREQUENCY_MHZ),
              help        = STRING_TOKEN (AMD_CBS_STR_FREQUENCY_MHZ_HELP),
              flags       = RESET_REQUIRED,
              minimum     = 0,
              maximum     = 0xffffffff,
              step        = 0,
              default     = 0,
            endnumeric;
          endif;
          endif;

          // Display Condition: CbsCpuPstCustomP0=Custom
          // Active Condition: CbsCpuPstCustomP0=Auto
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP0 == 1;
          grayoutif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP0 == 2;
            // Voltage (uV)
            // Voltage in uV (1V = 1000 * 1000 uV)
            numeric
              varid       = CBS_CONFIG.CbsCpuVoltageP0,
              prompt      = STRING_TOKEN (AMD_CBS_STR_VOLTAGE_UV),
              help        = STRING_TOKEN (AMD_CBS_STR_VOLTAGE_UV_HELP),
              flags       = RESET_REQUIRED,
              minimum     = 0,
              maximum     = 0xffffffff,
              step        = 0,
              default     = 0,
            endnumeric;
          endif;
          endif;

          // Display Condition: CbsCpuPstCustomP0=Custom
          // Active Condition: CbsCmnCpuOcMode=Customized
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP0 == 1;
          grayoutif NOT ideqval CBS_CONFIG.CbsCmnCpuOcMode == 5;
            // Pstate0 FID
            // Specifies the core frequency multiplier. COF = 200MHz * FID / DID
            numeric
              varid       = CBS_CONFIG.CbsCpuPst0Fid,
              questionid  = KEY_PSTATE0_FID,
              prompt      = STRING_TOKEN (AMD_CBS_STR_PSTATE0_FID),
              help        = STRING_TOKEN (AMD_CBS_STR_PSTATE0_FID_HELP),
              flags       = DISPLAY_UINT_HEX | RESET_REQUIRED | INTERACTIVE,
              minimum     = 0x10,
              maximum     = 0xff,
              step        = 0,
              default     = 16,
            endnumeric;
          endif;
          endif;

          // Display Condition: CbsCpuPstCustomP0=Custom
          // Active Condition: CbsCmnCpuOcMode=Customized
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP0 == 1;
          grayoutif NOT ideqval CBS_CONFIG.CbsCmnCpuOcMode == 5;
            // Pstate0 DID
            // Specifies the core frequency divisor (DID[0] should zero if DID[5:0]>1Ah).
            numeric
              varid       = CBS_CONFIG.CbsCpuPst0Did,
              questionid  = KEY_PSTATE0_DID,
              prompt      = STRING_TOKEN (AMD_CBS_STR_PSTATE0_DID),
              help        = STRING_TOKEN (AMD_CBS_STR_PSTATE0_DID_HELP),
              flags       = DISPLAY_UINT_HEX | RESET_REQUIRED | INTERACTIVE,
              minimum     = 0x8,
              maximum     = 0x30,
              step        = 0,
              default     = 8,
            endnumeric;
          endif;
          endif;

          // Display Condition: CbsCpuPstCustomP0=Custom
          // Active Condition: CbsCmnCpuOcMode=Customized
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP0 == 1;
          grayoutif NOT ideqval CBS_CONFIG.CbsCmnCpuOcMode == 5;
            // Pstate0 VID
            // Specifies the core voltage.
            numeric
              varid       = CBS_CONFIG.CbsCpuPst0Vid,
              questionid  = KEY_PSTATE0_VID,
              prompt      = STRING_TOKEN (AMD_CBS_STR_PSTATE0_VID),
              help        = STRING_TOKEN (AMD_CBS_STR_PSTATE0_VID_HELP),
              flags       = DISPLAY_UINT_HEX | RESET_REQUIRED | INTERACTIVE,
              minimum     = 0,
              maximum     = 0xff,
              step        = 0,
              default     = 255,
            endnumeric;
          endif;
          endif;

          // Active Condition: CbsCmnCpuOcMode=Customized
          grayoutif NOT ideqval CBS_CONFIG.CbsCmnCpuOcMode == 5;
            // Custom Pstate1
            // Disabled - disable this Pstate\nCustom - customize this Pstate, applicable only if PcdOcDisable=FALSE\n\nWARNING - DAMAGE CAUSED BY USE OF YOUR AMD PROCESSOR OUTSIDE OF SPECIFICATION OR IN EXCESS OF FACTORY SETTINGS ARE NOT COVERED UNDER YOUR AMD PRODUCT WARRANTY AND MAY NOT BE COVERED BY YOUR SYSTEM MANUFACTURER'S WARRANTY.\nOperating your AMD processor outside of specification or in excess of factory settings, including but not limited to overclocking, may damage or shorten the life of your processor or other system components, create system instabilities (e.g., data loss and corrupted images) and in extreme cases may result in total system failure. AMD does not provide support or service for issues or damages related to use of an AMD processor outside of processor specifications or in excess of factory settings.\n
            oneof
              varid       = CBS_CONFIG.CbsCpuPstCustomP1,
              questionid  = KEY_CUSTOM_PSTATE1,
              prompt      = STRING_TOKEN (AMD_CBS_STR_CUSTOM_PSTATE1),
              help        = STRING_TOKEN (AMD_CBS_STR_CUSTOM_PSTATE1_HELP),
              option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED | INTERACTIVE;
              option text = STRING_TOKEN (AMD_CBS_STR_CUSTOM),          value = 1,    flags = 0 | RESET_REQUIRED | INTERACTIVE;
              option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 2,    flags = DEFAULT | RESET_REQUIRED | INTERACTIVE;
            endoneof;
          endif;

          // Display Condition: CbsCpuPstCustomP1=Custom
          // Active Condition: CbsCpuPstCustomP1=Auto
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP1 == 1;
          grayoutif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP1 == 2;
            // Frequency (MHz)
            // No help string
            numeric
              varid       = CBS_CONFIG.CbsCpuCofP1,
              prompt      = STRING_TOKEN (AMD_CBS_STR_FREQUENCY_MHZ),
              help        = STRING_TOKEN (AMD_CBS_STR_FREQUENCY_MHZ_HELP),
              flags       = RESET_REQUIRED,
              minimum     = 0,
              maximum     = 0xffffffff,
              step        = 0,
              default     = 0,
            endnumeric;
          endif;
          endif;

          // Display Condition: CbsCpuPstCustomP1=Custom
          // Active Condition: CbsCpuPstCustomP1=Auto
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP1 == 1;
          grayoutif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP1 == 2;
            // Voltage (uV)
            // No help string
            numeric
              varid       = CBS_CONFIG.CbsCpuVoltageP1,
              prompt      = STRING_TOKEN (AMD_CBS_STR_VOLTAGE_UV),
              help        = STRING_TOKEN (AMD_CBS_STR_VOLTAGE_UV_HELP),
              flags       = RESET_REQUIRED,
              minimum     = 0,
              maximum     = 0xffffffff,
              step        = 0,
              default     = 0,
            endnumeric;
          endif;
          endif;

          // Display Condition: CbsCpuPstCustomP1=Custom
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP1 == 1;
            // Pstate1 FID
            // Specifies the core frequency multiplier. COF = 200MHz * FID / DID
            numeric
              varid       = CBS_CONFIG.CbsCpuPst1Fid,
              questionid  = KEY_PSTATE1_FID,
              prompt      = STRING_TOKEN (AMD_CBS_STR_PSTATE1_FID),
              help        = STRING_TOKEN (AMD_CBS_STR_PSTATE1_FID_HELP),
              flags       = DISPLAY_UINT_HEX | RESET_REQUIRED | INTERACTIVE,
              minimum     = 0x10,
              maximum     = 0xff,
              step        = 0,
              default     = 16,
            endnumeric;
          endif;

          // Display Condition: CbsCpuPstCustomP1=Custom
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP1 == 1;
            // Pstate1 DID
            // Specifies the core frequency divisor (DID[0] should zero if DID[5:0]>1Ah).
            numeric
              varid       = CBS_CONFIG.CbsCpuPst1Did,
              questionid  = KEY_PSTATE1_DID,
              prompt      = STRING_TOKEN (AMD_CBS_STR_PSTATE1_DID),
              help        = STRING_TOKEN (AMD_CBS_STR_PSTATE1_DID_HELP),
              flags       = DISPLAY_UINT_HEX | RESET_REQUIRED | INTERACTIVE,
              minimum     = 0x8,
              maximum     = 0x30,
              step        = 0,
              default     = 8,
            endnumeric;
          endif;

          // Display Condition: CbsCpuPstCustomP1=Custom
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP1 == 1;
            // Pstate1 VID
            // Specifies the core voltage.
            numeric
              varid       = CBS_CONFIG.CbsCpuPst1Vid,
              questionid  = KEY_PSTATE1_VID,
              prompt      = STRING_TOKEN (AMD_CBS_STR_PSTATE1_VID),
              help        = STRING_TOKEN (AMD_CBS_STR_PSTATE1_VID_HELP),
              flags       = DISPLAY_UINT_HEX | RESET_REQUIRED | INTERACTIVE,
              minimum     = 0,
              maximum     = 0xff,
              step        = 0,
              default     = 255,
            endnumeric;
          endif;

          // Active Condition: CbsCmnCpuOcMode=Customized,CbsCpuPstCustomP1=Custom|CbsCmnCpuOcMode=Customized,CbsCpuPstCustomP1=Auto
          grayoutif NOT ideqval CBS_CONFIG.CbsCmnCpuOcMode == 5
                 OR NOT ideqval CBS_CONFIG.CbsCpuPstCustomP1 == 1
                AND NOT ideqval CBS_CONFIG.CbsCpuPstCustomP1 == 2;
            // Custom Pstate2
            // Disabled - disable this Pstate\nCustom - customize this Pstate, applicable only if PcdOcDisable=FALSE\n\nWARNING - DAMAGE CAUSED BY USE OF YOUR AMD PROCESSOR OUTSIDE OF SPECIFICATION OR IN EXCESS OF FACTORY SETTINGS ARE NOT COVERED UNDER YOUR AMD PRODUCT WARRANTY AND MAY NOT BE COVERED BY YOUR SYSTEM MANUFACTURER'S WARRANTY.\nOperating your AMD processor outside of specification or in excess of factory settings, including but not limited to overclocking, may damage or shorten the life of your processor or other system components, create system instabilities (e.g., data loss and corrupted images) and in extreme cases may result in total system failure. AMD does not provide support or service for issues or damages related to use of an AMD processor outside of processor specifications or in excess of factory settings.\n
            oneof
              varid       = CBS_CONFIG.CbsCpuPstCustomP2,
              questionid  = KEY_CUSTOM_PSTATE2,
              prompt      = STRING_TOKEN (AMD_CBS_STR_CUSTOM_PSTATE2),
              help        = STRING_TOKEN (AMD_CBS_STR_CUSTOM_PSTATE2_HELP),
              option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED | INTERACTIVE;
              option text = STRING_TOKEN (AMD_CBS_STR_CUSTOM),          value = 1,    flags = 0 | RESET_REQUIRED | INTERACTIVE;
              option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 2,    flags = DEFAULT | RESET_REQUIRED | INTERACTIVE;
            endoneof;
          endif;

          // Display Condition: CbsCpuPstCustomP2=Custom
          // Active Condition: CbsCpuPstCustomP2=Auto
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP2 == 1;
          grayoutif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP2 == 2;
            // Frequency (MHz)
            // No help string
            numeric
              varid       = CBS_CONFIG.CbsCpuCofP2,
              prompt      = STRING_TOKEN (AMD_CBS_STR_FREQUENCY_MHZ),
              help        = STRING_TOKEN (AMD_CBS_STR_FREQUENCY_MHZ_HELP),
              flags       = RESET_REQUIRED,
              minimum     = 0,
              maximum     = 0xffffffff,
              step        = 0,
              default     = 0,
            endnumeric;
          endif;
          endif;

          // Display Condition: CbsCpuPstCustomP2=Custom
          // Active Condition: CbsCpuPstCustomP2=Auto
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP2 == 1;
          grayoutif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP2 == 2;
            // Voltage (uV)
            // No help string
            numeric
              varid       = CBS_CONFIG.CbsCpuVoltageP2,
              prompt      = STRING_TOKEN (AMD_CBS_STR_VOLTAGE_UV),
              help        = STRING_TOKEN (AMD_CBS_STR_VOLTAGE_UV_HELP),
              flags       = RESET_REQUIRED,
              minimum     = 0,
              maximum     = 0xffffffff,
              step        = 0,
              default     = 0,
            endnumeric;
          endif;
          endif;

          // Display Condition: CbsCpuPstCustomP2=Custom
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP2 == 1;
            // Pstate2 FID
            // Specifies the core frequency multiplier. COF = 200MHz * FID / DID
            numeric
              varid       = CBS_CONFIG.CbsCpuPst2Fid,
              questionid  = KEY_PSTATE2_FID,
              prompt      = STRING_TOKEN (AMD_CBS_STR_PSTATE2_FID),
              help        = STRING_TOKEN (AMD_CBS_STR_PSTATE2_FID_HELP),
              flags       = DISPLAY_UINT_HEX | RESET_REQUIRED | INTERACTIVE,
              minimum     = 0x10,
              maximum     = 0xff,
              step        = 0,
              default     = 16,
            endnumeric;
          endif;

          // Display Condition: CbsCpuPstCustomP2=Custom
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP2 == 1;
            // Pstate2 DID
            // Specifies the core frequency divisor (DID[0] should zero if DID[5:0]>1Ah).
            numeric
              varid       = CBS_CONFIG.CbsCpuPst2Did,
              questionid  = KEY_PSTATE2_DID,
              prompt      = STRING_TOKEN (AMD_CBS_STR_PSTATE2_DID),
              help        = STRING_TOKEN (AMD_CBS_STR_PSTATE2_DID_HELP),
              flags       = DISPLAY_UINT_HEX | RESET_REQUIRED | INTERACTIVE,
              minimum     = 0x8,
              maximum     = 0x30,
              step        = 0,
              default     = 8,
            endnumeric;
          endif;

          // Display Condition: CbsCpuPstCustomP2=Custom
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP2 == 1;
            // Pstate2 VID
            // Specifies the core voltage.
            numeric
              varid       = CBS_CONFIG.CbsCpuPst2Vid,
              questionid  = KEY_PSTATE2_VID,
              prompt      = STRING_TOKEN (AMD_CBS_STR_PSTATE2_VID),
              help        = STRING_TOKEN (AMD_CBS_STR_PSTATE2_VID_HELP),
              flags       = DISPLAY_UINT_HEX | RESET_REQUIRED | INTERACTIVE,
              minimum     = 0,
              maximum     = 0xff,
              step        = 0,
              default     = 255,
            endnumeric;
          endif;

          // Active Condition: CbsCmnCpuOcMode=Customized,CbsCpuPstCustomP2=Custom|CbsCmnCpuOcMode=Customized,CbsCpuPstCustomP2=Auto
          grayoutif NOT ideqval CBS_CONFIG.CbsCmnCpuOcMode == 5
                 OR NOT ideqval CBS_CONFIG.CbsCpuPstCustomP2 == 1
                AND NOT ideqval CBS_CONFIG.CbsCpuPstCustomP2 == 2;
            // Custom Pstate3
            // Disabled - disable this Pstate\nCustom - customize this Pstate, applicable only if PcdOcDisable=FALSE\n\nWARNING - DAMAGE CAUSED BY USE OF YOUR AMD PROCESSOR OUTSIDE OF SPECIFICATION OR IN EXCESS OF FACTORY SETTINGS ARE NOT COVERED UNDER YOUR AMD PRODUCT WARRANTY AND MAY NOT BE COVERED BY YOUR SYSTEM MANUFACTURER'S WARRANTY.\nOperating your AMD processor outside of specification or in excess of factory settings, including but not limited to overclocking, may damage or shorten the life of your processor or other system components, create system instabilities (e.g., data loss and corrupted images) and in extreme cases may result in total system failure. AMD does not provide support or service for issues or damages related to use of an AMD processor outside of processor specifications or in excess of factory settings.\n
            oneof
              varid       = CBS_CONFIG.CbsCpuPstCustomP3,
              questionid  = KEY_CUSTOM_PSTATE3,
              prompt      = STRING_TOKEN (AMD_CBS_STR_CUSTOM_PSTATE3),
              help        = STRING_TOKEN (AMD_CBS_STR_CUSTOM_PSTATE3_HELP),
              option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED | INTERACTIVE;
              option text = STRING_TOKEN (AMD_CBS_STR_CUSTOM),          value = 1,    flags = 0 | RESET_REQUIRED | INTERACTIVE;
              option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 2,    flags = DEFAULT | RESET_REQUIRED | INTERACTIVE;
            endoneof;
          endif;

          // Display Condition: CbsCpuPstCustomP3=Custom
          // Active Condition: CbsCpuPstCustomP3=Auto
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP3 == 1;
          grayoutif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP3 == 2;
            // Frequency (MHz)
            // No help string
            numeric
              varid       = CBS_CONFIG.CbsCpuCofP3,
              prompt      = STRING_TOKEN (AMD_CBS_STR_FREQUENCY_MHZ),
              help        = STRING_TOKEN (AMD_CBS_STR_FREQUENCY_MHZ_HELP),
              flags       = RESET_REQUIRED,
              minimum     = 0,
              maximum     = 0xffffffff,
              step        = 0,
              default     = 0,
            endnumeric;
          endif;
          endif;

          // Display Condition: CbsCpuPstCustomP3=Custom
          // Active Condition: CbsCpuPstCustomP3=Auto
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP3 == 1;
          grayoutif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP3 == 2;
            // Voltage (uV)
            // No help string
            numeric
              varid       = CBS_CONFIG.CbsCpuVoltageP3,
              prompt      = STRING_TOKEN (AMD_CBS_STR_VOLTAGE_UV),
              help        = STRING_TOKEN (AMD_CBS_STR_VOLTAGE_UV_HELP),
              flags       = RESET_REQUIRED,
              minimum     = 0,
              maximum     = 0xffffffff,
              step        = 0,
              default     = 0,
            endnumeric;
          endif;
          endif;

          // Display Condition: CbsCpuPstCustomP3=Custom
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP3 == 1;
            // Pstate3 FID
            // Specifies the core frequency multiplier. COF = 200MHz * FID / DID
            numeric
              varid       = CBS_CONFIG.CbsCpuPst3Fid,
              questionid  = KEY_PSTATE3_FID,
              prompt      = STRING_TOKEN (AMD_CBS_STR_PSTATE3_FID),
              help        = STRING_TOKEN (AMD_CBS_STR_PSTATE3_FID_HELP),
              flags       = DISPLAY_UINT_HEX | RESET_REQUIRED | INTERACTIVE,
              minimum     = 0x10,
              maximum     = 0xff,
              step        = 0,
              default     = 16,
            endnumeric;
          endif;

          // Display Condition: CbsCpuPstCustomP3=Custom
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP3 == 1;
            // Pstate3 DID
            // Specifies the core frequency divisor (DID[0] should zero if DID[5:0]>1Ah).
            numeric
              varid       = CBS_CONFIG.CbsCpuPst3Did,
              questionid  = KEY_PSTATE3_DID,
              prompt      = STRING_TOKEN (AMD_CBS_STR_PSTATE3_DID),
              help        = STRING_TOKEN (AMD_CBS_STR_PSTATE3_DID_HELP),
              flags       = DISPLAY_UINT_HEX | RESET_REQUIRED | INTERACTIVE,
              minimum     = 0x8,
              maximum     = 0x30,
              step        = 0,
              default     = 8,
            endnumeric;
          endif;

          // Display Condition: CbsCpuPstCustomP3=Custom
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP3 == 1;
            // Pstate3 VID
            // Specifies the core voltage.
            numeric
              varid       = CBS_CONFIG.CbsCpuPst3Vid,
              questionid  = KEY_PSTATE3_VID,
              prompt      = STRING_TOKEN (AMD_CBS_STR_PSTATE3_VID),
              help        = STRING_TOKEN (AMD_CBS_STR_PSTATE3_VID_HELP),
              flags       = DISPLAY_UINT_HEX | RESET_REQUIRED | INTERACTIVE,
              minimum     = 0,
              maximum     = 0xff,
              step        = 0,
              default     = 255,
            endnumeric;
          endif;

          // Active Condition: CbsCmnCpuOcMode=Customized,CbsCpuPstCustomP3=Custom|CbsCmnCpuOcMode=Customized,CbsCpuPstCustomP3=Auto
          grayoutif NOT ideqval CBS_CONFIG.CbsCmnCpuOcMode == 5
                 OR NOT ideqval CBS_CONFIG.CbsCpuPstCustomP3 == 1
                AND NOT ideqval CBS_CONFIG.CbsCpuPstCustomP3 == 2;
            // Custom Pstate4
            // Disabled - disable this Pstate\nCustom - customize this Pstate, applicable only if PcdOcDisable=FALSE\n\nWARNING - DAMAGE CAUSED BY USE OF YOUR AMD PROCESSOR OUTSIDE OF SPECIFICATION OR IN EXCESS OF FACTORY SETTINGS ARE NOT COVERED UNDER YOUR AMD PRODUCT WARRANTY AND MAY NOT BE COVERED BY YOUR SYSTEM MANUFACTURER'S WARRANTY.\nOperating your AMD processor outside of specification or in excess of factory settings, including but not limited to overclocking, may damage or shorten the life of your processor or other system components, create system instabilities (e.g., data loss and corrupted images) and in extreme cases may result in total system failure. AMD does not provide support or service for issues or damages related to use of an AMD processor outside of processor specifications or in excess of factory settings.\n
            oneof
              varid       = CBS_CONFIG.CbsCpuPstCustomP4,
              questionid  = KEY_CUSTOM_PSTATE4,
              prompt      = STRING_TOKEN (AMD_CBS_STR_CUSTOM_PSTATE4),
              help        = STRING_TOKEN (AMD_CBS_STR_CUSTOM_PSTATE4_HELP),
              option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED | INTERACTIVE;
              option text = STRING_TOKEN (AMD_CBS_STR_CUSTOM),          value = 1,    flags = 0 | RESET_REQUIRED | INTERACTIVE;
              option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 2,    flags = DEFAULT | RESET_REQUIRED | INTERACTIVE;
            endoneof;
          endif;

          // Display Condition: CbsCpuPstCustomP4=Custom
          // Active Condition: CbsCpuPstCustomP4=Auto
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP4 == 1;
          grayoutif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP4 == 2;
            // Frequency (MHz)
            // No help string
            numeric
              varid       = CBS_CONFIG.CbsCpuCofP4,
              prompt      = STRING_TOKEN (AMD_CBS_STR_FREQUENCY_MHZ),
              help        = STRING_TOKEN (AMD_CBS_STR_FREQUENCY_MHZ_HELP),
              flags       = RESET_REQUIRED,
              minimum     = 0,
              maximum     = 0xffffffff,
              step        = 0,
              default     = 0,
            endnumeric;
          endif;
          endif;

          // Display Condition: CbsCpuPstCustomP4=Custom
          // Active Condition: CbsCpuPstCustomP4=Auto
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP4 == 1;
          grayoutif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP4 == 2;
            // Voltage (uV)
            // No help string
            numeric
              varid       = CBS_CONFIG.CbsCpuVoltageP4,
              prompt      = STRING_TOKEN (AMD_CBS_STR_VOLTAGE_UV),
              help        = STRING_TOKEN (AMD_CBS_STR_VOLTAGE_UV_HELP),
              flags       = RESET_REQUIRED,
              minimum     = 0,
              maximum     = 0xffffffff,
              step        = 0,
              default     = 0,
            endnumeric;
          endif;
          endif;

          // Display Condition: CbsCpuPstCustomP4=Custom
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP4 == 1;
            // Pstate4 FID
            // Specifies the core frequency multiplier. COF = 200MHz * FID / DID
            numeric
              varid       = CBS_CONFIG.CbsCpuPst4Fid,
              questionid  = KEY_PSTATE4_FID,
              prompt      = STRING_TOKEN (AMD_CBS_STR_PSTATE4_FID),
              help        = STRING_TOKEN (AMD_CBS_STR_PSTATE4_FID_HELP),
              flags       = DISPLAY_UINT_HEX | RESET_REQUIRED | INTERACTIVE,
              minimum     = 0x10,
              maximum     = 0xff,
              step        = 0,
              default     = 16,
            endnumeric;
          endif;

          // Display Condition: CbsCpuPstCustomP4=Custom
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP4 == 1;
            // Pstate4 DID
            // Specifies the core frequency divisor (DID[0] should zero if DID[5:0]>1Ah).
            numeric
              varid       = CBS_CONFIG.CbsCpuPst4Did,
              questionid  = KEY_PSTATE4_DID,
              prompt      = STRING_TOKEN (AMD_CBS_STR_PSTATE4_DID),
              help        = STRING_TOKEN (AMD_CBS_STR_PSTATE4_DID_HELP),
              flags       = DISPLAY_UINT_HEX | RESET_REQUIRED | INTERACTIVE,
              minimum     = 0x8,
              maximum     = 0x30,
              step        = 0,
              default     = 8,
            endnumeric;
          endif;

          // Display Condition: CbsCpuPstCustomP4=Custom
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP4 == 1;
            // Pstate4 VID
            // Specifies the core voltage.
            numeric
              varid       = CBS_CONFIG.CbsCpuPst4Vid,
              questionid  = KEY_PSTATE4_VID,
              prompt      = STRING_TOKEN (AMD_CBS_STR_PSTATE4_VID),
              help        = STRING_TOKEN (AMD_CBS_STR_PSTATE4_VID_HELP),
              flags       = DISPLAY_UINT_HEX | RESET_REQUIRED | INTERACTIVE,
              minimum     = 0,
              maximum     = 0xff,
              step        = 0,
              default     = 255,
            endnumeric;
          endif;

          // Active Condition: CbsCmnCpuOcMode=Customized,CbsCpuPstCustomP4=Custom|CbsCmnCpuOcMode=Customized,CbsCpuPstCustomP4=Auto
          grayoutif NOT ideqval CBS_CONFIG.CbsCmnCpuOcMode == 5
                 OR NOT ideqval CBS_CONFIG.CbsCpuPstCustomP4 == 1
                AND NOT ideqval CBS_CONFIG.CbsCpuPstCustomP4 == 2;
            // Custom Pstate5
            // Disabled - disable this Pstate\nCustom - customize this Pstate, applicable only if PcdOcDisable=FALSE\n\nWARNING - DAMAGE CAUSED BY USE OF YOUR AMD PROCESSOR OUTSIDE OF SPECIFICATION OR IN EXCESS OF FACTORY SETTINGS ARE NOT COVERED UNDER YOUR AMD PRODUCT WARRANTY AND MAY NOT BE COVERED BY YOUR SYSTEM MANUFACTURER'S WARRANTY.\nOperating your AMD processor outside of specification or in excess of factory settings, including but not limited to overclocking, may damage or shorten the life of your processor or other system components, create system instabilities (e.g., data loss and corrupted images) and in extreme cases may result in total system failure. AMD does not provide support or service for issues or damages related to use of an AMD processor outside of processor specifications or in excess of factory settings.\n
            oneof
              varid       = CBS_CONFIG.CbsCpuPstCustomP5,
              questionid  = KEY_CUSTOM_PSTATE5,
              prompt      = STRING_TOKEN (AMD_CBS_STR_CUSTOM_PSTATE5),
              help        = STRING_TOKEN (AMD_CBS_STR_CUSTOM_PSTATE5_HELP),
              option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED | INTERACTIVE;
              option text = STRING_TOKEN (AMD_CBS_STR_CUSTOM),          value = 1,    flags = 0 | RESET_REQUIRED | INTERACTIVE;
              option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 2,    flags = DEFAULT | RESET_REQUIRED | INTERACTIVE;
            endoneof;
          endif;

          // Display Condition: CbsCpuPstCustomP5=Custom
          // Active Condition: CbsCpuPstCustomP5=Auto
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP5 == 1;
          grayoutif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP5 == 2;
            // Frequency (MHz)
            // No help string
            numeric
              varid       = CBS_CONFIG.CbsCpuCofP5,
              prompt      = STRING_TOKEN (AMD_CBS_STR_FREQUENCY_MHZ),
              help        = STRING_TOKEN (AMD_CBS_STR_FREQUENCY_MHZ_HELP),
              flags       = RESET_REQUIRED,
              minimum     = 0,
              maximum     = 0xffffffff,
              step        = 0,
              default     = 0,
            endnumeric;
          endif;
          endif;

          // Display Condition: CbsCpuPstCustomP5=Custom
          // Active Condition: CbsCpuPstCustomP5=Auto
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP5 == 1;
          grayoutif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP5 == 2;
            // Voltage (uV)
            // No help string
            numeric
              varid       = CBS_CONFIG.CbsCpuVoltageP5,
              prompt      = STRING_TOKEN (AMD_CBS_STR_VOLTAGE_UV),
              help        = STRING_TOKEN (AMD_CBS_STR_VOLTAGE_UV_HELP),
              flags       = RESET_REQUIRED,
              minimum     = 0,
              maximum     = 0xffffffff,
              step        = 0,
              default     = 0,
            endnumeric;
          endif;
          endif;

          // Display Condition: CbsCpuPstCustomP5=Custom
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP5 == 1;
            // Pstate5 FID
            // Specifies the core frequency multiplier. COF = 200MHz * FID / DID
            numeric
              varid       = CBS_CONFIG.CbsCpuPst5Fid,
              questionid  = KEY_PSTATE5_FID,
              prompt      = STRING_TOKEN (AMD_CBS_STR_PSTATE5_FID),
              help        = STRING_TOKEN (AMD_CBS_STR_PSTATE5_FID_HELP),
              flags       = DISPLAY_UINT_HEX | RESET_REQUIRED | INTERACTIVE,
              minimum     = 0x10,
              maximum     = 0xff,
              step        = 0,
              default     = 16,
            endnumeric;
          endif;

          // Display Condition: CbsCpuPstCustomP5=Custom
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP5 == 1;
            // Pstate5 DID
            // Specifies the core frequency divisor (DID[0] should zero if DID[5:0]>1Ah).
            numeric
              varid       = CBS_CONFIG.CbsCpuPst5Did,
              questionid  = KEY_PSTATE5_DID,
              prompt      = STRING_TOKEN (AMD_CBS_STR_PSTATE5_DID),
              help        = STRING_TOKEN (AMD_CBS_STR_PSTATE5_DID_HELP),
              flags       = DISPLAY_UINT_HEX | RESET_REQUIRED | INTERACTIVE,
              minimum     = 0x8,
              maximum     = 0x30,
              step        = 0,
              default     = 8,
            endnumeric;
          endif;

          // Display Condition: CbsCpuPstCustomP5=Custom
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP5 == 1;
            // Pstate5 VID
            // Specifies the core voltage.
            numeric
              varid       = CBS_CONFIG.CbsCpuPst5Vid,
              questionid  = KEY_PSTATE5_VID,
              prompt      = STRING_TOKEN (AMD_CBS_STR_PSTATE5_VID),
              help        = STRING_TOKEN (AMD_CBS_STR_PSTATE5_VID_HELP),
              flags       = DISPLAY_UINT_HEX | RESET_REQUIRED | INTERACTIVE,
              minimum     = 0,
              maximum     = 0xff,
              step        = 0,
              default     = 255,
            endnumeric;
          endif;

          // Active Condition: CbsCmnCpuOcMode=Customized,CbsCpuPstCustomP5=Custom|CbsCmnCpuOcMode=Customized,CbsCpuPstCustomP5=Auto
          grayoutif NOT ideqval CBS_CONFIG.CbsCmnCpuOcMode == 5
                 OR NOT ideqval CBS_CONFIG.CbsCpuPstCustomP5 == 1
                AND NOT ideqval CBS_CONFIG.CbsCpuPstCustomP5 == 2;
            // Custom Pstate6
            // Disabled - disable this Pstate\nCustom - customize this Pstate, applicable only if PcdOcDisable=FALSE\n\nWARNING - DAMAGE CAUSED BY USE OF YOUR AMD PROCESSOR OUTSIDE OF SPECIFICATION OR IN EXCESS OF FACTORY SETTINGS ARE NOT COVERED UNDER YOUR AMD PRODUCT WARRANTY AND MAY NOT BE COVERED BY YOUR SYSTEM MANUFACTURER'S WARRANTY.\nOperating your AMD processor outside of specification or in excess of factory settings, including but not limited to overclocking, may damage or shorten the life of your processor or other system components, create system instabilities (e.g., data loss and corrupted images) and in extreme cases may result in total system failure. AMD does not provide support or service for issues or damages related to use of an AMD processor outside of processor specifications or in excess of factory settings.\n
            oneof
              varid       = CBS_CONFIG.CbsCpuPstCustomP6,
              questionid  = KEY_CUSTOM_PSTATE6,
              prompt      = STRING_TOKEN (AMD_CBS_STR_CUSTOM_PSTATE6),
              help        = STRING_TOKEN (AMD_CBS_STR_CUSTOM_PSTATE6_HELP),
              option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED | INTERACTIVE;
              option text = STRING_TOKEN (AMD_CBS_STR_CUSTOM),          value = 1,    flags = 0 | RESET_REQUIRED | INTERACTIVE;
              option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 2,    flags = DEFAULT | RESET_REQUIRED | INTERACTIVE;
            endoneof;
          endif;

          // Display Condition: CbsCpuPstCustomP6=Custom
          // Active Condition: CbsCpuPstCustomP6=Auto
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP6 == 1;
          grayoutif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP6 == 2;
            // Frequency (MHz)
            // No help string
            numeric
              varid       = CBS_CONFIG.CbsCpuCofP6,
              prompt      = STRING_TOKEN (AMD_CBS_STR_FREQUENCY_MHZ),
              help        = STRING_TOKEN (AMD_CBS_STR_FREQUENCY_MHZ_HELP),
              flags       = RESET_REQUIRED,
              minimum     = 0,
              maximum     = 0xffffffff,
              step        = 0,
              default     = 0,
            endnumeric;
          endif;
          endif;

          // Display Condition: CbsCpuPstCustomP6=Custom
          // Active Condition: CbsCpuPstCustomP6=Auto
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP6 == 1;
          grayoutif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP6 == 2;
            // Voltage (uV)
            // No help string
            numeric
              varid       = CBS_CONFIG.CbsCpuVoltageP6,
              prompt      = STRING_TOKEN (AMD_CBS_STR_VOLTAGE_UV),
              help        = STRING_TOKEN (AMD_CBS_STR_VOLTAGE_UV_HELP),
              flags       = RESET_REQUIRED,
              minimum     = 0,
              maximum     = 0xffffffff,
              step        = 0,
              default     = 0,
            endnumeric;
          endif;
          endif;

          // Display Condition: CbsCpuPstCustomP6=Custom
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP6 == 1;
            // Pstate6 FID
            // Specifies the core frequency multiplier. COF = 200MHz * FID / DID
            numeric
              varid       = CBS_CONFIG.CbsCpuPst6Fid,
              questionid  = KEY_PSTATE6_FID,
              prompt      = STRING_TOKEN (AMD_CBS_STR_PSTATE6_FID),
              help        = STRING_TOKEN (AMD_CBS_STR_PSTATE6_FID_HELP),
              flags       = DISPLAY_UINT_HEX | RESET_REQUIRED | INTERACTIVE,
              minimum     = 0x10,
              maximum     = 0xff,
              step        = 0,
              default     = 16,
            endnumeric;
          endif;

          // Display Condition: CbsCpuPstCustomP6=Custom
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP6 == 1;
            // Pstate6 DID
            // Specifies the core frequency divisor (DID[0] should zero if DID[5:0]>1Ah).
            numeric
              varid       = CBS_CONFIG.CbsCpuPst6Did,
              questionid  = KEY_PSTATE6_DID,
              prompt      = STRING_TOKEN (AMD_CBS_STR_PSTATE6_DID),
              help        = STRING_TOKEN (AMD_CBS_STR_PSTATE6_DID_HELP),
              flags       = DISPLAY_UINT_HEX | RESET_REQUIRED | INTERACTIVE,
              minimum     = 0x8,
              maximum     = 0x30,
              step        = 0,
              default     = 8,
            endnumeric;
          endif;

          // Display Condition: CbsCpuPstCustomP6=Custom
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP6 == 1;
            // Pstate6 VID
            // Specifies the core voltage.
            numeric
              varid       = CBS_CONFIG.CbsCpuPst6Vid,
              questionid  = KEY_PSTATE6_VID,
              prompt      = STRING_TOKEN (AMD_CBS_STR_PSTATE6_VID),
              help        = STRING_TOKEN (AMD_CBS_STR_PSTATE6_VID_HELP),
              flags       = DISPLAY_UINT_HEX | RESET_REQUIRED | INTERACTIVE,
              minimum     = 0,
              maximum     = 0xff,
              step        = 0,
              default     = 255,
            endnumeric;
          endif;

          // Active Condition: CbsCmnCpuOcMode=Customized,CbsCpuPstCustomP6=Custom|CbsCmnCpuOcMode=Customized,CbsCpuPstCustomP6=Auto
          grayoutif NOT ideqval CBS_CONFIG.CbsCmnCpuOcMode == 5
                 OR NOT ideqval CBS_CONFIG.CbsCpuPstCustomP6 == 1
                AND NOT ideqval CBS_CONFIG.CbsCpuPstCustomP6 == 2;
            // Custom Pstate7
            // Disabled - disable this Pstate\nCustom - customize this Pstate, applicable only if PcdOcDisable=FALSE\n\nWARNING - DAMAGE CAUSED BY USE OF YOUR AMD PROCESSOR OUTSIDE OF SPECIFICATION OR IN EXCESS OF FACTORY SETTINGS ARE NOT COVERED UNDER YOUR AMD PRODUCT WARRANTY AND MAY NOT BE COVERED BY YOUR SYSTEM MANUFACTURER'S WARRANTY.\nOperating your AMD processor outside of specification or in excess of factory settings, including but not limited to overclocking, may damage or shorten the life of your processor or other system components, create system instabilities (e.g., data loss and corrupted images) and in extreme cases may result in total system failure. AMD does not provide support or service for issues or damages related to use of an AMD processor outside of processor specifications or in excess of factory settings.\n
            oneof
              varid       = CBS_CONFIG.CbsCpuPstCustomP7,
              questionid  = KEY_CUSTOM_PSTATE7,
              prompt      = STRING_TOKEN (AMD_CBS_STR_CUSTOM_PSTATE7),
              help        = STRING_TOKEN (AMD_CBS_STR_CUSTOM_PSTATE7_HELP),
              option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED | INTERACTIVE;
              option text = STRING_TOKEN (AMD_CBS_STR_CUSTOM),          value = 1,    flags = 0 | RESET_REQUIRED | INTERACTIVE;
              option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 2,    flags = DEFAULT | RESET_REQUIRED | INTERACTIVE;
            endoneof;
          endif;

          // Display Condition: CbsCpuPstCustomP7=Custom
          // Active Condition: CbsCpuPstCustomP7=Auto
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP7 == 1;
          grayoutif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP7 == 2;
            // Frequency (MHz)
            // No help string
            numeric
              varid       = CBS_CONFIG.CbsCpuCofP7,
              prompt      = STRING_TOKEN (AMD_CBS_STR_FREQUENCY_MHZ),
              help        = STRING_TOKEN (AMD_CBS_STR_FREQUENCY_MHZ_HELP),
              flags       = RESET_REQUIRED,
              minimum     = 0,
              maximum     = 0xffffffff,
              step        = 0,
              default     = 0,
            endnumeric;
          endif;
          endif;

          // Display Condition: CbsCpuPstCustomP7=Custom
          // Active Condition: CbsCpuPstCustomP7=Auto
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP7 == 1;
          grayoutif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP7 == 2;
            // Voltage (uV)
            // No help string
            numeric
              varid       = CBS_CONFIG.CbsCpuVoltageP7,
              prompt      = STRING_TOKEN (AMD_CBS_STR_VOLTAGE_UV),
              help        = STRING_TOKEN (AMD_CBS_STR_VOLTAGE_UV_HELP),
              flags       = RESET_REQUIRED,
              minimum     = 0,
              maximum     = 0xffffffff,
              step        = 0,
              default     = 0,
            endnumeric;
          endif;
          endif;

          // Display Condition: CbsCpuPstCustomP7=Custom
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP7 == 1;
            // Pstate7 FID
            // Specifies the core frequency multiplier. COF = 200MHz * FID / DID
            numeric
              varid       = CBS_CONFIG.CbsCpuPst7Fid,
              questionid  = KEY_PSTATE7_FID,
              prompt      = STRING_TOKEN (AMD_CBS_STR_PSTATE7_FID),
              help        = STRING_TOKEN (AMD_CBS_STR_PSTATE7_FID_HELP),
              flags       = DISPLAY_UINT_HEX | RESET_REQUIRED | INTERACTIVE,
              minimum     = 0x10,
              maximum     = 0xff,
              step        = 0,
              default     = 16,
            endnumeric;
          endif;

          // Display Condition: CbsCpuPstCustomP7=Custom
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP7 == 1;
            // Pstate7 DID
            // Specifies the core frequency divisor (DID[0] should zero if DID[5:0]>1Ah).
            numeric
              varid       = CBS_CONFIG.CbsCpuPst7Did,
              questionid  = KEY_PSTATE7_DID,
              prompt      = STRING_TOKEN (AMD_CBS_STR_PSTATE7_DID),
              help        = STRING_TOKEN (AMD_CBS_STR_PSTATE7_DID_HELP),
              flags       = DISPLAY_UINT_HEX | RESET_REQUIRED | INTERACTIVE,
              minimum     = 0x8,
              maximum     = 0x30,
              step        = 0,
              default     = 8,
            endnumeric;
          endif;

          // Display Condition: CbsCpuPstCustomP7=Custom
          suppressif NOT ideqval CBS_CONFIG.CbsCpuPstCustomP7 == 1;
            // Pstate7 VID
            // Specifies the core voltage.
            numeric
              varid       = CBS_CONFIG.CbsCpuPst7Vid,
              questionid  = KEY_PSTATE7_VID,
              prompt      = STRING_TOKEN (AMD_CBS_STR_PSTATE7_VID),
              help        = STRING_TOKEN (AMD_CBS_STR_PSTATE7_VID_HELP),
              flags       = DISPLAY_UINT_HEX | RESET_REQUIRED | INTERACTIVE,
              minimum     = 0,
              maximum     = 0xff,
              step        = 0,
              default     = 255,
            endnumeric;
          endif;

          // Relaxed EDC throttling
          // Disabled - Part-specific EDC throttling protection enabled\nEnabled - Reduce the amount of time the processor will throttle\nAuto - AMD's recommendation (Disabled)\n
          oneof
            varid       = CBS_CONFIG.CbsCpuRelaxedEdcThrottling,
            questionid  = KEY_RELAXED_EDC_THROTTLING,
            prompt      = STRING_TOKEN (AMD_CBS_STR_RELAXED_EDC_THROTTLING),
            help        = STRING_TOKEN (AMD_CBS_STR_RELAXED_EDC_THROTTLING_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED | INTERACTIVE;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED | INTERACTIVE;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 3,    flags = DEFAULT | RESET_REQUIRED | INTERACTIVE;
          endoneof;

        endform;
      //
      // form - Core/Thread Enablement
      //
      form

        formid        = SETUP_CORE_THREAD_ENABLEMENT_LABLE,

        title         = STRING_TOKEN (AMD_CBS_STR_CORE_THREAD_ENABLEMENT_SECTION);

        subtitle text = STRING_TOKEN (AMD_CBS_STR_CORE_THREAD_ENABLEMENT_SECTION);
        subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

        // Core/Thread Enablement Legal Disclaimer
        // Legal Disclaimer
        text
          help        = STRING_TOKEN (AMD_CBS_STR_CORE_THREAD_ENABLEMENT_LEGAL_DISCLAIMER_HELP),
          text        = STRING_TOKEN (AMD_CBS_STR_CORE_THREAD_ENABLEMENT_LEGAL_DISCLAIMER);

        goto SETUP_ZEN_COMMON_OPTIONS_LABLE,
          prompt      = STRING_TOKEN (AMD_CBS_STR_DISAGREE_SECTION),
          help        = STRING_TOKEN (AMD_CBS_STR_DISAGREE_SECTION);

        goto SETUP_AGREE_LABLE,
          prompt      = STRING_TOKEN (AMD_CBS_STR_AGREE_SECTION),
          help        = STRING_TOKEN (AMD_CBS_STR_AGREE_SECTION);

      endform;
        //
        // form - Disagree
        //
        form

          formid        = SETUP_DISAGREE_LABLE,

          title         = STRING_TOKEN (AMD_CBS_STR_DISAGREE_SECTION);

          subtitle text = STRING_TOKEN (AMD_CBS_STR_DISAGREE_SECTION);
          subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

        endform;
        //
        // form - Agree
        //
        form

          formid        = SETUP_AGREE_LABLE,

          title         = STRING_TOKEN (AMD_CBS_STR_AGREE_SECTION);

          subtitle text = STRING_TOKEN (AMD_CBS_STR_AGREE_SECTION);
          subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

          // Downcore control
          // Sets the number of cores to be used. Once this option has been used to remove any cores, a POWER CYCLE is required in order for future selections to take effect.\nNOTE: Need to set "CBS -> FCH Common Options -> System Control -> Toggle All PwrGood On Cf9" as disabled.
          oneof
            varid       = CBS_CONFIG.CbsCmnCpuGenDowncoreCtrl,
            prompt      = STRING_TOKEN (AMD_CBS_STR_DOWNCORE_CONTROL),
            help        = STRING_TOKEN (AMD_CBS_STR_DOWNCORE_CONTROL_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_ONE),             value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_TWO),             value = 3,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_THREE),           value = 4,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0,    flags = DEFAULT | RESET_REQUIRED;
          endoneof;

          // SMTEN
          // Can be used to disable symmetric multithreading. To re-enable SMT, a POWER CYCLE is needed after selecting the "Auto" option.\nWARNING - S3 is NOT SUPPORTED on systems where SMT is disabled.\nNOTE: Need to set "CBS -> FCH Common Options -> System Control -> Toggle All PwrGood On Cf9" as disabled.
          oneof
            varid       = CBS_CONFIG.CbsCmnCpuGenSmtEn,
            prompt      = STRING_TOKEN (AMD_CBS_STR_SMTEN),
            help        = STRING_TOKEN (AMD_CBS_STR_SMTEN_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0x1,  flags = DEFAULT | RESET_REQUIRED;
          endoneof;

        endform;
    //
    // form - DF Common Options
    //
    form

      formid        = SETUP_DF_COMMON_OPTIONS_LABLE,

      title         = STRING_TOKEN (AMD_CBS_STR_DF_COMMON_OPTIONS_SECTION);

      subtitle text = STRING_TOKEN (AMD_CBS_STR_DF_COMMON_OPTIONS_SECTION);
      subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

      // DRAM scrub time
      // Provide a value that is the number of hours to scrub memory.
      oneof
        varid       = CBS_CONFIG.CbsDfCmnDramScrubTime,
        prompt      = STRING_TOKEN (AMD_CBS_STR_DRAM_SCRUB_TIME),
        help        = STRING_TOKEN (AMD_CBS_STR_DRAM_SCRUB_TIME_HELP),
        option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_1_HOUR),          value = 1,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_4_HOURS),         value = 4,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_8_HOURS),         value = 8,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_16_HOURS),        value = 16,   flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_24_HOURS),        value = 24,   flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_48_HOURS),        value = 48,   flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED;
      endoneof;

      // Redirect scrubber control
      // Control DF::RedirScrubCtrl[EnRedirScrub]
      oneof
        varid       = CBS_CONFIG.CbsDfCmnRedirScrubCtrl,
        prompt      = STRING_TOKEN (AMD_CBS_STR_REDIRECT_SCRUBBER_CONTROL),
        help        = STRING_TOKEN (AMD_CBS_STR_REDIRECT_SCRUBBER_CONTROL_HELP),
        option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 3,    flags = DEFAULT | RESET_REQUIRED;
      endoneof;

      // Disable DF sync flood propagation
      // Control DF::PIEConfig[DisSyncFloodProp]
      oneof
        varid       = CBS_CONFIG.CbsDfCmnSyncFloodProp,
        prompt      = STRING_TOKEN (AMD_CBS_STR_DISABLE_DF_SYNC_FLOOD_PROPAGATION),
        help        = STRING_TOKEN (AMD_CBS_STR_DISABLE_DF_SYNC_FLOOD_PROPAGATION_HELP),
        option text = STRING_TOKEN (AMD_CBS_STR_SYNC_FLOOD_DISABLED), value = 0,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_SYNC_FLOOD_ENABLED), value = 1,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 3,    flags = DEFAULT | RESET_REQUIRED;
      endoneof;

      // GMI encryption control
      // Control GMI link encryption
      oneof
        varid       = CBS_CONFIG.CbsDfCmnGmiEncryption,
        prompt      = STRING_TOKEN (AMD_CBS_STR_GMI_ENCRYPTION_CONTROL),
        help        = STRING_TOKEN (AMD_CBS_STR_GMI_ENCRYPTION_CONTROL_HELP),
        option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 3,    flags = DEFAULT | RESET_REQUIRED;
      endoneof;

      // xGMI encryption control
      // Control xGMI link encryption
      oneof
        varid       = CBS_CONFIG.CbsDfCmnXGmiEncryption,
        prompt      = STRING_TOKEN (AMD_CBS_STR_XGMI_ENCRYPTION_CONTROL),
        help        = STRING_TOKEN (AMD_CBS_STR_XGMI_ENCRYPTION_CONTROL_HELP),
        option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 3,    flags = DEFAULT | RESET_REQUIRED;
      endoneof;

      // CC6 memory region encryption
      // Control whether or not the CC6 save/restore memory is encrypted
      oneof
        varid       = CBS_CONFIG.CbsDfCmnCc6MemEncryption,
        prompt      = STRING_TOKEN (AMD_CBS_STR_CC6_MEMORY_REGION_ENCRYPTION),
        help        = STRING_TOKEN (AMD_CBS_STR_CC6_MEMORY_REGION_ENCRYPTION_HELP),
        option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 3,    flags = DEFAULT | RESET_REQUIRED;
      endoneof;

      // Location of private memory regions
      // Controls whether or not the private memory regions (PSP, SMU and CC6) are at the top of DRAM or distributed. Note that distributed requires memory on all dies. Note that it will always be at the top of DRAM if some dies don't have memory regardless of this option's setting.
      oneof
        varid       = CBS_CONFIG.CbsDfCmnCc6AllocationScheme,
        prompt      = STRING_TOKEN (AMD_CBS_STR_LOCATION_OF_PRIVATE_MEMORY_REGIONS),
        help        = STRING_TOKEN (AMD_CBS_STR_LOCATION_OF_PRIVATE_MEMORY_REGIONS_HELP),
        option text = STRING_TOKEN (AMD_CBS_STR_DISTRIBUTED),     value = 0,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_CONSOLIDATED),    value = 1,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 3,    flags = DEFAULT | RESET_REQUIRED;
      endoneof;

      // System probe filter
      // Controls whether or not the probe filter is enabled. Has no effect on parts where the probe filter is fuse disabled.
      oneof
        varid       = CBS_CONFIG.CbsDfCmnSysProbeFilter,
        prompt      = STRING_TOKEN (AMD_CBS_STR_SYSTEM_PROBE_FILTER),
        help        = STRING_TOKEN (AMD_CBS_STR_SYSTEM_PROBE_FILTER_HELP),
        option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 3,    flags = DEFAULT | RESET_REQUIRED;
      endoneof;

      // Memory interleaving
      // Controls fabric level memory interleaving (AUTO, none, channel, die, socket). Note that channel, die, and socket has requirements on memory populations and it will be ignored if the memory doesn't support the selected option.
      oneof
        varid       = CBS_CONFIG.CbsDfCmnMemIntlv,
        prompt      = STRING_TOKEN (AMD_CBS_STR_MEMORY_INTERLEAVING),
        help        = STRING_TOKEN (AMD_CBS_STR_MEMORY_INTERLEAVING_HELP),
        option text = STRING_TOKEN (AMD_CBS_STR_NONE),            value = 0,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_CHANNEL),         value = 1,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_DIE),             value = 2,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_SOCKET),          value = 3,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 7,    flags = DEFAULT | RESET_REQUIRED;
      endoneof;

      // Memory interleaving size
      // Controls the memory interleaving size. The valid values are AUTO, 256 bytes, 512 bytes, 1 Kbytes or 2Kbytes. This determines the starting address of the interleave (bit 8, 9, 10 or 11).
      oneof
        varid       = CBS_CONFIG.CbsDfCmnMemIntlvSize,
        prompt      = STRING_TOKEN (AMD_CBS_STR_MEMORY_INTERLEAVING_SIZE),
        help        = STRING_TOKEN (AMD_CBS_STR_MEMORY_INTERLEAVING_SIZE_HELP),
        option text = STRING_TOKEN (AMD_CBS_STR_256_BYTES),       value = 0,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_512_BYTES),       value = 1,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_1_KB),            value = 2,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_2_KB),            value = 3,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 7,    flags = DEFAULT | RESET_REQUIRED;
      endoneof;

      // Channel interleaving hash
      // Controls whether or not the address bits are hashed during channel interleave mode. This field should not be used unless the interleaving is set to channel and the interleaving size is 256 or 512 bytes.
      oneof
        varid       = CBS_CONFIG.CbsDfCmnChnlIntlvHash,
        prompt      = STRING_TOKEN (AMD_CBS_STR_CHANNEL_INTERLEAVING_HASH),
        help        = STRING_TOKEN (AMD_CBS_STR_CHANNEL_INTERLEAVING_HASH_HELP),
        option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 3,    flags = DEFAULT | RESET_REQUIRED;
      endoneof;

      // DF C-state control
      // Enable / disable DF C-states (DF::CstateControl[DfCstateDisable])
      oneof
        varid       = CBS_CONFIG.CbsDfCmnCstateCtrl,
        prompt      = STRING_TOKEN (AMD_CBS_STR_DF_C_STATE_CONTROL),
        help        = STRING_TOKEN (AMD_CBS_STR_DF_C_STATE_CONTROL_HELP),
        option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 3,    flags = DEFAULT | RESET_REQUIRED;
      endoneof;

      // xGMI DLWM control
      // Controls xGMI dynamic link width management feature.
      oneof
        varid       = CBS_CONFIG.CbsDfCmnxGmiDlwmCtrl,
        prompt      = STRING_TOKEN (AMD_CBS_STR_XGMI_DLWM_CONTROL),
        help        = STRING_TOKEN (AMD_CBS_STR_XGMI_DLWM_CONTROL_HELP),
        option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 3,    flags = DEFAULT | RESET_REQUIRED;
      endoneof;

      // Freeze DF module queues on error
      // Controls DF::DfGlobalCtrl[DisImmSyncFloodOnFatalError]\nDisabling this option sets DF:DfGlobalCtrl[DisImmSyncFloodOnFatalError]
      oneof
        varid       = CBS_CONFIG.CbsDfCmnFreezeQueueError,
        prompt      = STRING_TOKEN (AMD_CBS_STR_FREEZE_DF_MODULE_QUEUES_ON_ERROR),
        help        = STRING_TOKEN (AMD_CBS_STR_FREEZE_DF_MODULE_QUEUES_ON_ERROR_HELP),
        option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 3,    flags = DEFAULT | RESET_REQUIRED;
      endoneof;

    endform;
    //
    // form - UMC Common Options
    //
    form

      formid        = SETUP_UMC_COMMON_OPTIONS_LABLE,

      title         = STRING_TOKEN (AMD_CBS_STR_UMC_COMMON_OPTIONS_SECTION);

      subtitle text = STRING_TOKEN (AMD_CBS_STR_UMC_COMMON_OPTIONS_SECTION);
      subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

      goto SETUP_DDR4_COMMON_OPTIONS_LABLE,
        prompt      = STRING_TOKEN (AMD_CBS_STR_DDR4_COMMON_OPTIONS_SECTION),
        help        = STRING_TOKEN (AMD_CBS_STR_DDR4_COMMON_OPTIONS_SECTION);

      goto SETUP_DRAM_MEMORY_MAPPING_LABLE,
        prompt      = STRING_TOKEN (AMD_CBS_STR_DRAM_MEMORY_MAPPING_SECTION),
        help        = STRING_TOKEN (AMD_CBS_STR_DRAM_MEMORY_MAPPING_SECTION);

      goto SETUP_NVDIMM_LABLE,
        prompt      = STRING_TOKEN (AMD_CBS_STR_NVDIMM_SECTION),
        help        = STRING_TOKEN (AMD_CBS_STR_NVDIMM_SECTION);

      goto SETUP_MEMORY_MBIST_LABLE,
        prompt      = STRING_TOKEN (AMD_CBS_STR_MEMORY_MBIST_SECTION),
        help        = STRING_TOKEN (AMD_CBS_STR_MEMORY_MBIST_SECTION);

    endform;
      //
      // form - DDR4 Common Options
      //
      form

        formid        = SETUP_DDR4_COMMON_OPTIONS_LABLE,

        title         = STRING_TOKEN (AMD_CBS_STR_DDR4_COMMON_OPTIONS_SECTION);

        subtitle text = STRING_TOKEN (AMD_CBS_STR_DDR4_COMMON_OPTIONS_SECTION);
        subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

        goto SETUP_DRAM_TIMING_CONFIGURATION_LABLE,
          prompt      = STRING_TOKEN (AMD_CBS_STR_DRAM_TIMING_CONFIGURATION_SECTION),
          help        = STRING_TOKEN (AMD_CBS_STR_DRAM_TIMING_CONFIGURATION_SECTION);

        goto SETUP_DRAM_CONTROLLER_CONFIGURATION_LABLE,
          prompt      = STRING_TOKEN (AMD_CBS_STR_DRAM_CONTROLLER_CONFIGURATION_SECTION),
          help        = STRING_TOKEN (AMD_CBS_STR_DRAM_CONTROLLER_CONFIGURATION_SECTION);

        goto SETUP_CAD_BUS_CONFIGURATION_LABLE,
          prompt      = STRING_TOKEN (AMD_CBS_STR_CAD_BUS_CONFIGURATION_SECTION),
          help        = STRING_TOKEN (AMD_CBS_STR_CAD_BUS_CONFIGURATION_SECTION);

        goto SETUP_DATA_BUS_CONFIGURATION_LABLE,
          prompt      = STRING_TOKEN (AMD_CBS_STR_DATA_BUS_CONFIGURATION_SECTION),
          help        = STRING_TOKEN (AMD_CBS_STR_DATA_BUS_CONFIGURATION_SECTION);

        goto SETUP_COMMON_RAS_LABLE,
          prompt      = STRING_TOKEN (AMD_CBS_STR_COMMON_RAS_SECTION),
          help        = STRING_TOKEN (AMD_CBS_STR_COMMON_RAS_SECTION);

        goto SETUP_SECURITY_LABLE,
          prompt      = STRING_TOKEN (AMD_CBS_STR_SECURITY_SECTION),
          help        = STRING_TOKEN (AMD_CBS_STR_SECURITY_SECTION);

      endform;
        //
        // form - DRAM Timing Configuration
        //
        form

          formid        = SETUP_DRAM_TIMING_CONFIGURATION_LABLE,

          title         = STRING_TOKEN (AMD_CBS_STR_DRAM_TIMING_CONFIGURATION_SECTION);

          subtitle text = STRING_TOKEN (AMD_CBS_STR_DRAM_TIMING_CONFIGURATION_SECTION);
          subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

          // DRAM Timing Configuration Legal Disclaimer
          // No help string
          text
            help        = STRING_TOKEN (AMD_CBS_STR_DRAM_TIMING_CONFIGURATION_LEGAL_DISCLAIMER_HELP),
            text        = STRING_TOKEN (AMD_CBS_STR_DRAM_TIMING_CONFIGURATION_LEGAL_DISCLAIMER);

          // DRAM Timing Configuration Legal Disclaimer 1
          // No help string
          text
            help        = STRING_TOKEN (AMD_CBS_STR_DRAM_TIMING_CONFIGURATION_LEGAL_DISCLAIMER_1_HELP),
            text        = STRING_TOKEN (AMD_CBS_STR_DRAM_TIMING_CONFIGURATION_LEGAL_DISCLAIMER_1);

          goto SETUP_DDR4_COMMON_OPTIONS_LABLE,
            prompt      = STRING_TOKEN (AMD_CBS_STR_I_DECLINE_SECTION),
            help        = STRING_TOKEN (AMD_CBS_STR_I_DECLINE_SECTION);

          goto SETUP_I_ACCEPT_LABLE,
            prompt      = STRING_TOKEN (AMD_CBS_STR_I_ACCEPT_SECTION),
            help        = STRING_TOKEN (AMD_CBS_STR_I_ACCEPT_SECTION);

        endform;
          //
          // form - I Decline
          //
          form

            formid        = SETUP_I_DECLINE_LABLE,

            title         = STRING_TOKEN (AMD_CBS_STR_I_DECLINE_SECTION);

            subtitle text = STRING_TOKEN (AMD_CBS_STR_I_DECLINE_SECTION);
            subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

          endform;
          //
          // form - I Accept
          //
          form

            formid        = SETUP_I_ACCEPT_LABLE,

            title         = STRING_TOKEN (AMD_CBS_STR_I_ACCEPT_SECTION);

            subtitle text = STRING_TOKEN (AMD_CBS_STR_I_ACCEPT_SECTION);
            subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

            // Overclock
            // Memory Overclock Settings
            oneof
              varid       = CBS_CONFIG.CbsCmnMemOverclockDdr4,
              prompt      = STRING_TOKEN (AMD_CBS_STR_OVERCLOCK),
              help        = STRING_TOKEN (AMD_CBS_STR_OVERCLOCK_HELP),
              option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
            endoneof;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1;
              // Memory Clock Speed
              // Set the memory clock frequency.
              oneof
                varid       = CBS_CONFIG.CbsCmnMemSpeedDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_MEMORY_CLOCK_SPEED),
                help        = STRING_TOKEN (AMD_CBS_STR_MEMORY_CLOCK_SPEED_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_667MHZ),          value = 0x14, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_800MHZ),          value = 0x18, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_933MHZ),          value = 0x1C, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1067MHZ),         value = 0x20, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1200MHZ),         value = 0x24, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1333MHZ),         value = 0x28, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1367MHZ),         value = 0x29, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1400MHZ),         value = 0x2A, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1433MHZ),         value = 0x2B, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1467MHZ),         value = 0x2C, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1500MHZ),         value = 0x2D, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1533MHZ),         value = 0x2E, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1567MHZ),         value = 0x2F, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1600MHZ),         value = 0x30, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1633MHZ),         value = 0x31, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1667MHZ),         value = 0x32, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1700MHZ),         value = 0x33, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1733MHZ),         value = 0x34, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1767MHZ),         value = 0x35, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1800MHZ),         value = 0x36, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1833MHZ),         value = 0x37, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1867MHZ),         value = 0x38, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1900MHZ),         value = 0x39, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1933MHZ),         value = 0x3A, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1967MHZ),         value = 0x3B, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_2000MHZ),         value = 0x3C, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_333MHZ),          value = 4,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_400MHZ),          value = 6,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_533MHZ),          value = 0xA,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1050MHZ),         value = 0x19, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1066MHZ),         value = 0x1A, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_2033MHZ),         value = 0x3D, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_2067MHZ),         value = 0x3E, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_2100MHZ),         value = 0x3F, flags = 0 | RESET_REQUIRED;
              endoneof;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1;
              // Tcl
              // Sets the tCL time.
              oneof
                varid       = CBS_CONFIG.CbsCmnMemTimingTclDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TCL),
                help        = STRING_TOKEN (AMD_CBS_STR_TCL_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_8_CLK),           value = 8,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_9_CLK),           value = 9,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0AH_CLK),         value = 0xA,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0BH_CLK),         value = 0xB,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0CH_CLK),         value = 0xC,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0DH_CLK),         value = 0xD,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0EH_CLK),         value = 0xE,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0FH_CLK),         value = 0xF,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_10H_CLK),         value = 0x10, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_11H_CLK),         value = 0x11, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_12H_CLK),         value = 0x12, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_13H_CLK),         value = 0x13, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_14H_CLK),         value = 0x14, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_15H_CLK),         value = 0x15, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_16H_CLK),         value = 0x16, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_17H_CLK),         value = 0x17, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_18H_CLK),         value = 0x18, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_19H_CLK),         value = 0x19, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1AH_CLK),         value = 0x1A, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1BH_CLK),         value = 0x1B, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1CH_CLK),         value = 0x1C, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1DH_CLK),         value = 0x1D, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1EH_CLK),         value = 0x1E, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1FH_CLK),         value = 0x1F, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_20H_CLK),         value = 0x20, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_21H_CLK),         value = 0x21, flags = 0 | RESET_REQUIRED;
              endoneof;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1;
              // Trcdrd
              // This sets the RAS# Active to CAS# read/write delay.
              oneof
                varid       = CBS_CONFIG.CbsCmnMemTimingTrcdrdDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TRCDRD),
                help        = STRING_TOKEN (AMD_CBS_STR_TRCDRD_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_8_CLK),           value = 8,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_9_CLK),           value = 9,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0AH_CLK),         value = 0xA,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0BH_CLK),         value = 0xB,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0CH_CLK),         value = 0xC,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0DH_CLK),         value = 0xD,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0EH_CLK),         value = 0xE,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0FH_CLK),         value = 0xF,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_10H_CLK),         value = 0x10, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_14H_CLK),         value = 0x14, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_15H_CLK),         value = 0x15, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_16H_CLK),         value = 0x16, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_17H_CLK),         value = 0x17, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_18H_CLK),         value = 0x18, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_19H_CLK),         value = 0x19, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1AH_CLK),         value = 0x1A, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_11H_CLK),         value = 0x11, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_12H_CLK),         value = 0x12, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_13H_CLK),         value = 0x13, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1BH_CLK),         value = 0x1B, flags = 0 | RESET_REQUIRED;
              endoneof;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1;
              // Trcdwr
              // This sets the RAS# Active to CAS# read/write delay.
              oneof
                varid       = CBS_CONFIG.CbsCmnMemTimingTrcdwrDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TRCDWR),
                help        = STRING_TOKEN (AMD_CBS_STR_TRCDWR_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_8_CLK),           value = 8,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_9_CLK),           value = 9,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0XA_CLK),         value = 0xA,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0XB_CLK),         value = 0xB,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0XC_CLK),         value = 0xC,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0XD_CLK),         value = 0xD,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0XE_CLK),         value = 0xE,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0XF_CLK),         value = 0xF,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_10H_CLK),         value = 0x10, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_11H_CLK),         value = 0x11, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_12H_CLK),         value = 0x12, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_13H_CLK),         value = 0x13, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_14H_CLK),         value = 0x14, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_15H_CLK),         value = 0x15, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_16H_CLK),         value = 0x16, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_17H_CLK),         value = 0x17, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_18H_CLK),         value = 0x18, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_19H_CLK),         value = 0x19, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1AH_CLK),         value = 0x1A, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1BH_CLK),         value = 0x1B, flags = 0 | RESET_REQUIRED;
              endoneof;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1;
              // Trp
              // Specify the row precharge time.
              oneof
                varid       = CBS_CONFIG.CbsCmnMemTimingTrpDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TRP),
                help        = STRING_TOKEN (AMD_CBS_STR_TRP_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_8_CLK),           value = 8,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_9_CLK),           value = 9,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0AH_CLK),         value = 0xA,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0BH_CLK),         value = 0xB,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0CH_CLK),         value = 0xC,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0DH_CLK),         value = 0xD,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0EH_CLK),         value = 0xE,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0FH_CLK),         value = 0xF,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_10H_CLK),         value = 0x10, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_11H_CLK),         value = 0x11, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_12H_CLK),         value = 0x12, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_13H_CLK),         value = 0x13, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_14H_CLK),         value = 0x14, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_15H_CLK),         value = 0x15, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_16H_CLK),         value = 0x16, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_17H_CLK),         value = 0x17, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_18H_CLK),         value = 0x18, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_19H_CLK),         value = 0x19, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1AH_CLK),         value = 0x1A, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1BH_CLK),         value = 0x1B, flags = 0 | RESET_REQUIRED;
              endoneof;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1;
              // Tras
              // Specify the min RAS# active time.
              oneof
                varid       = CBS_CONFIG.CbsCmnMemTimingTrasDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TRAS),
                help        = STRING_TOKEN (AMD_CBS_STR_TRAS_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_15H_CLK),         value = 0x15, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_16H_CLK),         value = 0x16, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_17H_CLK),         value = 0x17, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_18H_CLK),         value = 0x18, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_19H_CLK),         value = 0x19, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1AH_CLK),         value = 0x1A, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1BH_CLK),         value = 0x1B, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1CH_CLK),         value = 0x1C, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1DH_CLK),         value = 0x1D, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1EH_CLK),         value = 0x1E, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1FH_CLK),         value = 0x1F, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_20H_CLK),         value = 0x20, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_21H_CLK),         value = 0x21, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_22H_CLK),         value = 0x22, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_23H_CLK),         value = 0x23, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_24H_CLK),         value = 0x24, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_25H_CLK),         value = 0x25, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_26H_CLK),         value = 0x26, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_27H_CLK),         value = 0x27, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_28H_CLK),         value = 0x28, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_29H_CLK),         value = 0x29, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_2AH_CLK),         value = 0x2A, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_2BH_CLK),         value = 0x2B, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_2CH_CLK),         value = 0x2C, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_2DH_CLK),         value = 0x2D, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_2EH_CLK),         value = 0x2E, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_2FH_CLK),         value = 0x2F, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_30H_CLK),         value = 0x30, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_31H_CLK),         value = 0x31, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_32H_CLK),         value = 0x32, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_33H_CLK),         value = 0x33, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_34H_CLK),         value = 0x34, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_35H_CLK),         value = 0x35, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_36H_CLK),         value = 0x36, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_37H_CLK),         value = 0x37, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_38H_CLK),         value = 0x38, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_39H_CLK),         value = 0x39, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_3AH_CLK),         value = 0x3A, flags = 0 | RESET_REQUIRED;
              endoneof;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1;
              // Trc Ctrl
              // Specify Trc
              oneof
                varid       = CBS_CONFIG.CbsCmnMemTimingTrcCtrlDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TRC_CTRL),
                help        = STRING_TOKEN (AMD_CBS_STR_TRC_CTRL_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0,    flags = DEFAULT | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_MANUAL),          value = 1,    flags = 0 | RESET_REQUIRED;
              endoneof;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled,CbsCmnMemTimingTrcCtrlDdr4=Manual
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1
                    OR NOT ideqval CBS_CONFIG.CbsCmnMemTimingTrcCtrlDdr4 == 1;
              // Trc
              // Active to Active/Refresh Delay Time. Valid values 87h-1Dh.
              numeric
                varid       = CBS_CONFIG.CbsCmnMemTimingTrcDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TRC),
                help        = STRING_TOKEN (AMD_CBS_STR_TRC_HELP),
                flags       = DISPLAY_UINT_HEX | RESET_REQUIRED,
                minimum     = 0x1d,
                maximum     = 0x87,
                step        = 0,
                default     = 0x39,
              endnumeric;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1;
              // TrrdS
              // Activate to Activate Delay Time, different bank group (tRRD_S)
              oneof
                varid       = CBS_CONFIG.CbsCmnMemTimingTrrdSDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TRRDS),
                help        = STRING_TOKEN (AMD_CBS_STR_TRRDS_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_4_CLK),           value = 4,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_5_CLK),           value = 5,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_6_CLK),           value = 6,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_7_CLK),           value = 7,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_8_CLK),           value = 8,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_9_CLK),           value = 9,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0AH_CLK),         value = 0xA,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0BH_CLK),         value = 0xB,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0CH_CLK),         value = 0xC,  flags = 0 | RESET_REQUIRED;
              endoneof;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1;
              // TrrdL
              // Activate to Activate Delay Time, same bank group (tRRD_L)
              oneof
                varid       = CBS_CONFIG.CbsCmnMemTimingTrrdLDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TRRDL),
                help        = STRING_TOKEN (AMD_CBS_STR_TRRDL_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_4_CLK),           value = 4,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_5_CLK),           value = 5,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_6_CLK),           value = 6,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_7_CLK),           value = 7,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_8_CLK),           value = 8,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_9_CLK),           value = 9,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0AH_CLK),         value = 0xA,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0BH_CLK),         value = 0xB,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0CH_CLK),         value = 0xC,  flags = 0 | RESET_REQUIRED;
              endoneof;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1;
              // Tfaw Ctrl
              // Specify Tfaw
              oneof
                varid       = CBS_CONFIG.CbsCmnMemTimingTfawCtrlDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TFAW_CTRL),
                help        = STRING_TOKEN (AMD_CBS_STR_TFAW_CTRL_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0,    flags = DEFAULT | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_MANUAL),          value = 1,    flags = 0 | RESET_REQUIRED;
              endoneof;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled,CbsCmnMemTimingTfawCtrlDdr4=Manual
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1
                    OR NOT ideqval CBS_CONFIG.CbsCmnMemTimingTfawCtrlDdr4 == 1;
              // Tfaw
              // Four Activate Window Time. Valid values 36h-6h.
              numeric
                varid       = CBS_CONFIG.CbsCmnMemTimingTfawDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TFAW),
                help        = STRING_TOKEN (AMD_CBS_STR_TFAW_HELP),
                flags       = DISPLAY_UINT_HEX | RESET_REQUIRED,
                minimum     = 0x6,
                maximum     = 0x36,
                step        = 0,
                default     = 26,
              endnumeric;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1;
              // TwtrS
              // Minimum Write to Read Time, different bank group
              oneof
                varid       = CBS_CONFIG.CbsCmnMemTimingTwtrSDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TWTRS),
                help        = STRING_TOKEN (AMD_CBS_STR_TWTRS_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_2_CLK),           value = 2,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_3_CLK),           value = 3,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_4_CLK),           value = 4,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_5_CLK),           value = 5,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_6_CLK),           value = 6,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_7_CLK),           value = 7,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_8_CLK),           value = 8,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_9_CLK),           value = 9,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0AH_CLK),         value = 0xA,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0BH_CLK),         value = 0xB,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0CH_CLK),         value = 0xC,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0DH_CLK),         value = 0xD,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0EH_CLK),         value = 0xE,  flags = 0 | RESET_REQUIRED;
              endoneof;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1;
              // TwtrL
              // Minimum Write to Read Time, same bank group
              oneof
                varid       = CBS_CONFIG.CbsCmnMemTimingTwtrLDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TWTRL),
                help        = STRING_TOKEN (AMD_CBS_STR_TWTRL_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_2_CLK),           value = 2,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_3_CLK),           value = 3,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_4_CLK),           value = 4,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_5_CLK),           value = 5,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_6_CLK),           value = 6,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_7_CLK),           value = 7,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_8_CLK),           value = 8,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_9_CLK),           value = 9,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0AH_CLK),         value = 0xA,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0BH_CLK),         value = 0xB,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0CH_CLK),         value = 0xC,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0DH_CLK),         value = 0xD,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0EH_CLK),         value = 0xE,  flags = 0 | RESET_REQUIRED;
              endoneof;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1;
              // Twr Ctrl
              // Specify Twr
              oneof
                varid       = CBS_CONFIG.CbsCmnMemTimingTwrCtrlDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TWR_CTRL),
                help        = STRING_TOKEN (AMD_CBS_STR_TWR_CTRL_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0,    flags = DEFAULT | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_MANUAL),          value = 1,    flags = 0 | RESET_REQUIRED;
              endoneof;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled,CbsCmnMemTimingTwrCtrlDdr4=Manual
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1
                    OR NOT ideqval CBS_CONFIG.CbsCmnMemTimingTwrCtrlDdr4 == 1;
              // Twr
              // Minimum Write Recovery Time. Valid value 51h-Ah
              numeric
                varid       = CBS_CONFIG.CbsCmnMemTimingTwrDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TWR),
                help        = STRING_TOKEN (AMD_CBS_STR_TWR_HELP),
                flags       = DISPLAY_UINT_HEX | RESET_REQUIRED,
                minimum     = 0xa,
                maximum     = 0x51,
                step        = 0,
                default     = 18,
              endnumeric;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1;
              // Trcpage Ctrl
              // Specify Trcpage
              oneof
                varid       = CBS_CONFIG.CbsCmnMemTimingTrcpageCtrlDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TRCPAGE_CTRL),
                help        = STRING_TOKEN (AMD_CBS_STR_TRCPAGE_CTRL_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0,    flags = DEFAULT | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_MANUAL),          value = 1,    flags = 0 | RESET_REQUIRED;
              endoneof;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled,CbsCmnMemTimingTrcpageCtrlDdr4=Manual
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1
                    OR NOT ideqval CBS_CONFIG.CbsCmnMemTimingTrcpageCtrlDdr4 == 1;
              // Trcpage
              // SDRAM Optional Features (tMAW, MAC). Valid value 3FFh - 0h
              numeric
                varid       = CBS_CONFIG.CbsCmnMemTimingTrcpageDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TRCPAGE),
                help        = STRING_TOKEN (AMD_CBS_STR_TRCPAGE_HELP),
                flags       = DISPLAY_UINT_HEX | RESET_REQUIRED,
                minimum     = 0,
                maximum     = 0x3ff,
                step        = 0,
                default     = 0,
              endnumeric;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1;
              // TrdrdScL Ctrl
              // Specify TrdrdScL
              oneof
                varid       = CBS_CONFIG.CbsCmnMemTimingTrdrdScLCtrlDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TRDRDSCL_CTRL),
                help        = STRING_TOKEN (AMD_CBS_STR_TRDRDSCL_CTRL_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0,    flags = DEFAULT | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_MANUAL),          value = 1,    flags = 0 | RESET_REQUIRED;
              endoneof;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled,CbsCmnMemTimingTrdrdScLCtrlDdr4=Manual
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1
                    OR NOT ideqval CBS_CONFIG.CbsCmnMemTimingTrdrdScLCtrlDdr4 == 1;
              // TrdrdScL
              // CAS to CAS Delay Time, same bank group. Valid values Fh-1h
              numeric
                varid       = CBS_CONFIG.CbsCmnMemTimingTrdrdScLDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TRDRDSCL),
                help        = STRING_TOKEN (AMD_CBS_STR_TRDRDSCL_HELP),
                flags       = DISPLAY_UINT_HEX | RESET_REQUIRED,
                minimum     = 0x1,
                maximum     = 0xf,
                step        = 0,
                default     = 3,
              endnumeric;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1;
              // TwrwrScL Ctrl
              // Specify TwrwrScL
              oneof
                varid       = CBS_CONFIG.CbsCmnMemTimingTwrwrScLCtrlDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TWRWRSCL_CTRL),
                help        = STRING_TOKEN (AMD_CBS_STR_TWRWRSCL_CTRL_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0,    flags = DEFAULT | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_MANUAL),          value = 1,    flags = 0 | RESET_REQUIRED;
              endoneof;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled,CbsCmnMemTimingTwrwrScLCtrlDdr4=Manual
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1
                    OR NOT ideqval CBS_CONFIG.CbsCmnMemTimingTwrwrScLCtrlDdr4 == 1;
              // TwrwrScL
              // CAS to CAS Delay Time, same bank group. Valid values 3Fh-1h
              numeric
                varid       = CBS_CONFIG.CbsCmnMemTimingTwrwrScLDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TWRWRSCL),
                help        = STRING_TOKEN (AMD_CBS_STR_TWRWRSCL_HELP),
                flags       = DISPLAY_UINT_HEX | RESET_REQUIRED,
                minimum     = 0x1,
                maximum     = 0x3f,
                step        = 0,
                default     = 0x3,
              endnumeric;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1;
              // Trfc Ctrl
              // Specify Trfc
              oneof
                varid       = CBS_CONFIG.CbsCmnMemTimingTrfcCtrlDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TRFC_CTRL),
                help        = STRING_TOKEN (AMD_CBS_STR_TRFC_CTRL_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0,    flags = DEFAULT | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_MANUAL),          value = 1,    flags = 0 | RESET_REQUIRED;
              endoneof;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled,CbsCmnMemTimingTrfcCtrlDdr4=Manual
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1
                    OR NOT ideqval CBS_CONFIG.CbsCmnMemTimingTrfcCtrlDdr4 == 1;
              // Trfc
              // Refresh Recovery Delay Time (tRFC1). Valid values 3DEh-3Ch
              numeric
                varid       = CBS_CONFIG.CbsCmnMemTimingTrfcDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TRFC),
                help        = STRING_TOKEN (AMD_CBS_STR_TRFC_HELP),
                flags       = DISPLAY_UINT_HEX | RESET_REQUIRED,
                minimum     = 0x3c,
                maximum     = 0x3de,
                step        = 0,
                default     = 0x138,
              endnumeric;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1;
              // Trfc2 Ctrl
              // Specify Trfc2
              oneof
                varid       = CBS_CONFIG.CbsCmnMemTimingTrfc2CtrlDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TRFC2_CTRL),
                help        = STRING_TOKEN (AMD_CBS_STR_TRFC2_CTRL_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0,    flags = DEFAULT | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_MANUAL),          value = 1,    flags = 0 | RESET_REQUIRED;
              endoneof;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled,CbsCmnMemTimingTrfc2CtrlDdr4=Manual
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1
                    OR NOT ideqval CBS_CONFIG.CbsCmnMemTimingTrfc2CtrlDdr4 == 1;
              // Trfc2
              // Refresh Recovery Delay Time (tRFC2).  Valid values 3DEh-3Ch
              numeric
                varid       = CBS_CONFIG.CbsCmnMemTimingTrfc2Ddr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TRFC2),
                help        = STRING_TOKEN (AMD_CBS_STR_TRFC2_HELP),
                flags       = DISPLAY_UINT_HEX | RESET_REQUIRED,
                minimum     = 0x3c,
                maximum     = 0x3de,
                step        = 0,
                default     = 0xC0,
              endnumeric;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1;
              // Trfc4 Ctrl
              // Specify Trfc4
              oneof
                varid       = CBS_CONFIG.CbsCmnMemTimingTrfc4CtrlDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TRFC4_CTRL),
                help        = STRING_TOKEN (AMD_CBS_STR_TRFC4_CTRL_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0,    flags = DEFAULT | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_MANUAL),          value = 1,    flags = 0 | RESET_REQUIRED;
              endoneof;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled, CbsCmnMemTimingTrfc4CtrlDdr4=Manual
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1
                    OR NOT ideqval CBS_CONFIG.CbsCmnMemTimingTrfc4CtrlDdr4 == 1;
              // Trfc4
              // Refresh Recovery Delay Time (tRFC4). Valid values 3DEh-3Ch
              numeric
                varid       = CBS_CONFIG.CbsCmnMemTimingTrfc4Ddr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TRFC4),
                help        = STRING_TOKEN (AMD_CBS_STR_TRFC4_HELP),
                flags       = DISPLAY_UINT_HEX | RESET_REQUIRED,
                minimum     = 0x3c,
                maximum     = 0x3de,
                step        = 0,
                default     = 0x84,
              endnumeric;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1;
              // Fail_CNT
              // The number of training failure/retries required before boot from recovery mode
              numeric
                varid       = CBS_CONFIG.CbsCmnMemOverclockFailCNT,
                prompt      = STRING_TOKEN (AMD_CBS_STR_FAIL_CNT),
                help        = STRING_TOKEN (AMD_CBS_STR_FAIL_CNT_HELP),
                flags       = DISPLAY_UINT_HEX | RESET_REQUIRED,
                minimum     = 0,
                maximum     = 10,
                step        = 0,
                default     = 5,
              endnumeric;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1;
              // ProcODT
              // Specifies the Processor ODT
              oneof
                varid       = CBS_CONFIG.CbsCmnMemCtrllerProcOdtDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_PROCODT),
                help        = STRING_TOKEN (AMD_CBS_STR_PROCODT_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_HIGH_IMPEDANCE),  value = 0,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_480_OHM),         value = 1,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_240_OHM),         value = 2,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_160_OHM),         value = 3,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_120_OHM),         value = 8,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_96_OHM),          value = 9,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_80_OHM),          value = 10,   flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_68_DOT_6_OHM),    value = 11,   flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_60_OHM),          value = 0x18, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_53_DOT_3_OHM),    value = 0x19, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_48_OHM),          value = 0x1A, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_43_DOT_6_OHM),    value = 0x1B, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_40_OHM),          value = 0x38, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_36_DOT_9_OHM),    value = 0x39, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_34_DOT_3_OHM),    value = 0x3A, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_32_OHM),          value = 0x3B, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_30_OHM),          value = 0x3E, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_28_DOT_2_OHM),    value = 0x3F, flags = 0 | RESET_REQUIRED;
              endoneof;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1;
              // Tcwl
              // No help string
              oneof
                varid       = CBS_CONFIG.CbsCmnMemTimingTcwlDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TCWL),
                help        = STRING_TOKEN (AMD_CBS_STR_TCWL_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_9_CLK),           value = 9,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0AH_CLK),         value = 0xA,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0BH_CLK),         value = 0xB,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0CH_CLK),         value = 0xC,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0EH_CLK),         value = 0xE,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_10H_CLK),         value = 0x10, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_12H_CLK),         value = 0x12, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_14H_CLK),         value = 0x14, flags = 0 | RESET_REQUIRED;
              endoneof;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1;
              // Trtp
              // Specifies the read CAS# to precharge time.
              oneof
                varid       = CBS_CONFIG.CbsCmnMemTimingTrtpDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TRTP),
                help        = STRING_TOKEN (AMD_CBS_STR_TRTP_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_8_CLK),           value = 8,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_9_CLK),           value = 9,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0AH_CLK),         value = 0xA,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0BH_CLK),         value = 0xB,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0CH_CLK),         value = 0xC,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0DH_CLK),         value = 0xD,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_5_CLK),           value = 0x5,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_6_CLK),           value = 0x6,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_7_CLK),           value = 0x7,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0EH_CLK),         value = 0xE,  flags = 0 | RESET_REQUIRED;
              endoneof;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1;
              // Tcke
              // Specifies the CKE minimum high and low pulse width in memory clock cycles.
              oneof
                varid       = CBS_CONFIG.CbsCmnMemTimingTckeDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TCKE),
                help        = STRING_TOKEN (AMD_CBS_STR_TCKE_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1_CLK),           value = 1,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_2_CLK),           value = 2,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_3_CLK),           value = 3,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_4_CLK),           value = 4,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_5_CLK),           value = 5,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_6_CLK),           value = 6,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_7_CLK),           value = 7,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_8_CLK),           value = 8,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_9_CLK),           value = 9,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0AH_CLK),         value = 0xA,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0BH_CLK),         value = 0xB,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0CH_CLK),         value = 0xC,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0DH_CLK),         value = 0xD,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0EH_CLK),         value = 0xE,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0FH_CLK),         value = 0xF,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_10H_CLK),         value = 0x10, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_11H_CLK),         value = 0x11, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_12H_CLK),         value = 0x12, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_13H_CLK),         value = 0x13, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_14H_CLK),         value = 0x14, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_15H_CLK),         value = 0x15, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_16H_CLK),         value = 0x16, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_17H_CLK),         value = 0x17, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_18H_CLK),         value = 0x18, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_19H_CLK),         value = 0x19, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1AH_CLK),         value = 0x1A, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1BH_CLK),         value = 0x1B, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1CH_CLK),         value = 0x1C, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1DH_CLK),         value = 0x1D, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1EH_CLK),         value = 0x1E, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1FH_CLK),         value = 0x1F, flags = 0 | RESET_REQUIRED;
              endoneof;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1;
              // TrdrdSc
              // write to write timing same DIMM same chip select.
              oneof
                varid       = CBS_CONFIG.CbsCmnMemTimingTrdrdScDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TRDRDSC),
                help        = STRING_TOKEN (AMD_CBS_STR_TRDRDSC_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_1_CLK),           value = 1,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_2_CLK),           value = 2,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_3_CLK),           value = 3,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_4_CLK),           value = 4,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_5_CLK),           value = 5,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_6_CLK),           value = 6,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_7_CLK),           value = 7,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_8_CLK),           value = 8,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_9_CLK),           value = 9,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0AH_CLK),         value = 0xA,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0BH_CLK),         value = 0xB,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED;
              endoneof;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1;
              // TrdrdSd
              // write to write timing same DIMM same chip select.
              oneof
                varid       = CBS_CONFIG.CbsCmnMemTimingTrdrdSdDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TRDRDSD),
                help        = STRING_TOKEN (AMD_CBS_STR_TRDRDSD_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_2_CLK),           value = 2,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_3_CLK),           value = 3,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_4_CLK),           value = 4,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_5_CLK),           value = 5,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_6_CLK),           value = 6,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_7_CLK),           value = 7,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_8_CLK),           value = 8,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_9_CLK),           value = 9,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0AH_CLK),         value = 0xA,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0BH_CLK),         value = 0xB,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1_CLK),           value = 1,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0CH_CLK),         value = 0xC,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0DH_CLK),         value = 0xD,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0EH_CLK),         value = 0xE,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0FH_CLK),         value = 0xF,  flags = 0 | RESET_REQUIRED;
              endoneof;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1;
              // TrdrdDd
              // write to write timing same DIMM same chip select.
              oneof
                varid       = CBS_CONFIG.CbsCmnMemTimingTrdrdDdDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TRDRDDD),
                help        = STRING_TOKEN (AMD_CBS_STR_TRDRDDD_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_2_CLK),           value = 2,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_3_CLK),           value = 3,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_4_CLK),           value = 4,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_5_CLK),           value = 5,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_6_CLK),           value = 6,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_7_CLK),           value = 7,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_8_CLK),           value = 8,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_9_CLK),           value = 9,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0AH_CLK),         value = 0xA,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0BH_CLK),         value = 0xB,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1_CLK),           value = 1,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0CH_CLK),         value = 0xC,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0DH_CLK),         value = 0xD,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0EH_CLK),         value = 0xE,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0FH_CLK),         value = 0xF,  flags = 0 | RESET_REQUIRED;
              endoneof;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1;
              // TwrwrSc
              // write to write timing same DIMM same chip select.
              oneof
                varid       = CBS_CONFIG.CbsCmnMemTimingTwrwrScDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TWRWRSC),
                help        = STRING_TOKEN (AMD_CBS_STR_TWRWRSC_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_1_CLK),           value = 1,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_2_CLK),           value = 2,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_3_CLK),           value = 3,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_4_CLK),           value = 4,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_5_CLK),           value = 5,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_6_CLK),           value = 6,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_7_CLK),           value = 7,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_8_CLK),           value = 8,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_9_CLK),           value = 9,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0AH_CLK),         value = 0xA,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0BH_CLK),         value = 0xB,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0CH_CLK),         value = 0xC,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0DH_CLK),         value = 0xD,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0EH_CLK),         value = 0xE,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0FH_CLK),         value = 0xF,  flags = 0 | RESET_REQUIRED;
              endoneof;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1;
              // TwrwrSd
              // write to write timing same DIMM same chip select.
              oneof
                varid       = CBS_CONFIG.CbsCmnMemTimingTwrwrSdDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TWRWRSD),
                help        = STRING_TOKEN (AMD_CBS_STR_TWRWRSD_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_2_CLK),           value = 2,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_3_CLK),           value = 3,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_4_CLK),           value = 4,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_5_CLK),           value = 5,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_6_CLK),           value = 6,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_7_CLK),           value = 7,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_8_CLK),           value = 8,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_9_CLK),           value = 9,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0AH_CLK),         value = 0xA,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0BH_CLK),         value = 0xB,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1_CLK),           value = 1,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0CH_CLK),         value = 0xC,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0DH_CLK),         value = 0xD,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0EH_CLK),         value = 0xE,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0FH_CLK),         value = 0xF,  flags = 0 | RESET_REQUIRED;
              endoneof;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1;
              // TwrwrDd
              // write to write timing same DIMM same chip select.
              oneof
                varid       = CBS_CONFIG.CbsCmnMemTimingTwrwrDdDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TWRWRDD),
                help        = STRING_TOKEN (AMD_CBS_STR_TWRWRDD_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_2_CLK),           value = 2,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_3_CLK),           value = 3,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_4_CLK),           value = 4,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_5_CLK),           value = 5,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_6_CLK),           value = 6,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_7_CLK),           value = 7,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_8_CLK),           value = 8,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_9_CLK),           value = 9,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0AH_CLK),         value = 0xA,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0BH_CLK),         value = 0xB,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1_CLK),           value = 1,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0CH_CLK),         value = 0xC,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0DH_CLK),         value = 0xD,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0EH_CLK),         value = 0xE,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0FH_CLK),         value = 0xF,  flags = 0 | RESET_REQUIRED;
              endoneof;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1;
              // Trdwr
              // This sets the tWRTTO time.
              oneof
                varid       = CBS_CONFIG.CbsCmnMemTimingTrdwrDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TRDWR),
                help        = STRING_TOKEN (AMD_CBS_STR_TRDWR_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_2_CLK),           value = 2,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_3_CLK),           value = 3,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_4_CLK),           value = 4,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_5_CLK),           value = 5,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_6_CLK),           value = 6,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_7_CLK),           value = 7,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_8_CLK),           value = 8,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_9_CLK),           value = 9,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0AH_CLK),         value = 0xA,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0BH_CLK),         value = 0xB,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0CH_CLK),         value = 0xC,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0DH_CLK),         value = 0xD,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0EH_CLK),         value = 0xE,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0FH_CLK),         value = 0xF,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_10H_CLK),         value = 0x10, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_11H_CLK),         value = 0x11, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_12H_CLK),         value = 0x12, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_13H_CLK),         value = 0x13, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_14H_CLK),         value = 0x14, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_15H_CLK),         value = 0x15, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_16H_CLK),         value = 0x16, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_17H_CLK),         value = 0x17, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_18H_CLK),         value = 0x18, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_19H_CLK),         value = 0x19, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1AH_CLK),         value = 0x1A, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1BH_CLK),         value = 0x1B, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1_CLK),           value = 1,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1CH_CLK),         value = 0x1C, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1DH_CLK),         value = 0x1D, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1EH_CLK),         value = 0x1E, flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_1FH_CLK),         value = 0x1F, flags = 0 | RESET_REQUIRED;
              endoneof;
            endif;

            // Display Condition: CbsCmnMemOverclockDdr4=Enabled
            suppressif NOT ideqval CBS_CONFIG.CbsCmnMemOverclockDdr4 == 1;
              // Twrrd
              // Specify the write to read delay when accessing different DIMMs.
              oneof
                varid       = CBS_CONFIG.CbsCmnMemTimingTwrrdDdr4,
                prompt      = STRING_TOKEN (AMD_CBS_STR_TWRRD),
                help        = STRING_TOKEN (AMD_CBS_STR_TWRRD_HELP),
                option text = STRING_TOKEN (AMD_CBS_STR_1_CLK),           value = 1,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_2_CLK),           value = 2,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_3_CLK),           value = 3,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_4_CLK),           value = 4,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_5_CLK),           value = 5,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_6_CLK),           value = 6,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_7_CLK),           value = 7,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_8_CLK),           value = 8,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_9_CLK),           value = 9,    flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0AH_CLK),         value = 0xA,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0BH_CLK),         value = 0xB,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0CH),             value = 0xC,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0DH),             value = 0xD,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0EH),             value = 0xE,  flags = 0 | RESET_REQUIRED;
                option text = STRING_TOKEN (AMD_CBS_STR_0FH),             value = 0xF,  flags = 0 | RESET_REQUIRED;
              endoneof;
            endif;

          endform;
        //
        // form - DRAM Controller Configuration
        //
        form

          formid        = SETUP_DRAM_CONTROLLER_CONFIGURATION_LABLE,

          title         = STRING_TOKEN (AMD_CBS_STR_DRAM_CONTROLLER_CONFIGURATION_SECTION);

          subtitle text = STRING_TOKEN (AMD_CBS_STR_DRAM_CONTROLLER_CONFIGURATION_SECTION);
          subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

          goto SETUP_DRAM_POWER_OPTIONS_LABLE,
            prompt      = STRING_TOKEN (AMD_CBS_STR_DRAM_POWER_OPTIONS_SECTION),
            help        = STRING_TOKEN (AMD_CBS_STR_DRAM_POWER_OPTIONS_SECTION);

          text
            help        = STRING_TOKEN (AMD_CBS_STR_BLANK),
            text        = STRING_TOKEN (AMD_CBS_STR_BLANK);

          // Cmd2T
          // Select between 1T and 2T mode on ADDR/CMD
          oneof
            varid       = CBS_CONFIG.CbsCmnMemCtrller2TModeDdr4,
            prompt      = STRING_TOKEN (AMD_CBS_STR_CMD2T),
            help        = STRING_TOKEN (AMD_CBS_STR_CMD2T_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_1T),              value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_2T),              value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED;
          endoneof;

          // Gear Down Mode
          // No help string
          oneof
            varid       = CBS_CONFIG.CbsCmnMemGearDownModeDdr4,
            prompt      = STRING_TOKEN (AMD_CBS_STR_GEAR_DOWN_MODE),
            help        = STRING_TOKEN (AMD_CBS_STR_GEAR_DOWN_MODE_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED;
          endoneof;

          // Data Mask
          // No help string
          oneof
            varid       = CBS_CONFIG.CbsCmnMemDataMaskDdr4,
            prompt      = STRING_TOKEN (AMD_CBS_STR_DATA_MASK),
            help        = STRING_TOKEN (AMD_CBS_STR_DATA_MASK_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          endoneof;

        endform;
          //
          // form - DRAM Power Options
          //
          form

            formid        = SETUP_DRAM_POWER_OPTIONS_LABLE,

            title         = STRING_TOKEN (AMD_CBS_STR_DRAM_POWER_OPTIONS_SECTION);

            subtitle text = STRING_TOKEN (AMD_CBS_STR_DRAM_POWER_OPTIONS_SECTION);
            subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

            // Power Down Enable
            // Enable or disable DDR power down mode
            oneof
              varid       = CBS_CONFIG.CbsCmnMemCtrllerPwrDnEnDdr4,
              prompt      = STRING_TOKEN (AMD_CBS_STR_POWER_DOWN_ENABLE),
              help        = STRING_TOKEN (AMD_CBS_STR_POWER_DOWN_ENABLE_HELP),
              option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED;
            endoneof;

          endform;
        //
        // form - CAD Bus Configuration
        //
        form

          formid        = SETUP_CAD_BUS_CONFIGURATION_LABLE,

          title         = STRING_TOKEN (AMD_CBS_STR_CAD_BUS_CONFIGURATION_SECTION);

          subtitle text = STRING_TOKEN (AMD_CBS_STR_CAD_BUS_CONFIGURATION_SECTION);
          subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

          // CAD Bus Timing User Controls
          // Setup time on CAD bus signals to Auto or Manual
          oneof
            varid       = CBS_CONFIG.CbsCmnMemCadBusTimingCtlDdr4,
            prompt      = STRING_TOKEN (AMD_CBS_STR_CAD_BUS_TIMING_USER_CONTROLS),
            help        = STRING_TOKEN (AMD_CBS_STR_CAD_BUS_TIMING_USER_CONTROLS_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_MANUAL),          value = 1,    flags = 0 | RESET_REQUIRED;
          endoneof;

          // Display Condition: CbsCmnMemCadBusTimingCtlDdr4=Manual
          suppressif NOT ideqval CBS_CONFIG.CbsCmnMemCadBusTimingCtlDdr4 == 1;
            // AddrCmdSetup
            // Setup time on CAD bus signals. Valid values 3Fh-0h.
            numeric
              varid       = CBS_CONFIG.CbsCmnMemAddrCmdSetupDdr4,
              prompt      = STRING_TOKEN (AMD_CBS_STR_ADDRCMDSETUP),
              help        = STRING_TOKEN (AMD_CBS_STR_ADDRCMDSETUP_HELP),
              flags       = DISPLAY_UINT_HEX | RESET_REQUIRED,
              minimum     = 0,
              maximum     = 0x3f,
              step        = 0,
              default     = 0,
            endnumeric;
          endif;

          // Display Condition: CbsCmnMemCadBusTimingCtlDdr4=Manual
          suppressif NOT ideqval CBS_CONFIG.CbsCmnMemCadBusTimingCtlDdr4 == 1;
            // CsOdtSetup
            // Setup time on CAD bus signals. Valid values 3Fh-0h.
            numeric
              varid       = CBS_CONFIG.CbsCmnMemCsOdtSetupDdr4,
              prompt      = STRING_TOKEN (AMD_CBS_STR_CSODTSETUP),
              help        = STRING_TOKEN (AMD_CBS_STR_CSODTSETUP_HELP),
              flags       = DISPLAY_UINT_HEX | RESET_REQUIRED,
              minimum     = 0,
              maximum     = 0x3f,
              step        = 0,
              default     = 0,
            endnumeric;
          endif;

          // Display Condition: CbsCmnMemCadBusTimingCtlDdr4=Manual
          suppressif NOT ideqval CBS_CONFIG.CbsCmnMemCadBusTimingCtlDdr4 == 1;
            // CkeSetup
            // Setup time on CAD bus signals. Valid values 3Fh-0h.
            numeric
              varid       = CBS_CONFIG.CbsCmnMemCkeSetupDdr4,
              prompt      = STRING_TOKEN (AMD_CBS_STR_CKESETUP),
              help        = STRING_TOKEN (AMD_CBS_STR_CKESETUP_HELP),
              flags       = DISPLAY_UINT_HEX | RESET_REQUIRED,
              minimum     = 0,
              maximum     = 0x3f,
              step        = 0,
              default     = 0,
            endnumeric;
          endif;

          // CAD Bus Drive Strength User Controls
          // Drive Strength on CAD bus signals to Auto or Manual
          oneof
            varid       = CBS_CONFIG.CbsCmnMemCadBusDrvStrenCtlDdr4,
            prompt      = STRING_TOKEN (AMD_CBS_STR_CAD_BUS_DRIVE_STRENGTH_USER_CONTROLS),
            help        = STRING_TOKEN (AMD_CBS_STR_CAD_BUS_DRIVE_STRENGTH_USER_CONTROLS_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_MANUAL),          value = 1,    flags = 0 | RESET_REQUIRED;
          endoneof;

          // Display Condition: CbsCmnMemCadBusDrvStrenCtlDdr4=Manual
          suppressif NOT ideqval CBS_CONFIG.CbsCmnMemCadBusDrvStrenCtlDdr4 == 1;
            // ClkDrvStren
            // No help string
            oneof
              varid       = CBS_CONFIG.CbsCmnMemCadBusClkDrvStrenDdr4,
              prompt      = STRING_TOKEN (AMD_CBS_STR_CLKDRVSTREN),
              help        = STRING_TOKEN (AMD_CBS_STR_CLKDRVSTREN_HELP),
              option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_120_DOT_0_OHM),   value = 0,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_60_DOT_0_OHM),    value = 1,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_40_DOT_0_OHM),    value = 3,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_30_DOT_0_OHM),    value = 7,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_24_DOT_0_OHM),    value = 15,   flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_20_DOT_0_OHM),    value = 31,   flags = 0 | RESET_REQUIRED;
            endoneof;
          endif;

          // Display Condition: CbsCmnMemCadBusDrvStrenCtlDdr4=Manual
          suppressif NOT ideqval CBS_CONFIG.CbsCmnMemCadBusDrvStrenCtlDdr4 == 1;
            // AddrCmdDrvStren
            // No help string
            oneof
              varid       = CBS_CONFIG.CbsCmnMemCadBusAddrCmdDrvStrenDdr4,
              prompt      = STRING_TOKEN (AMD_CBS_STR_ADDRCMDDRVSTREN),
              help        = STRING_TOKEN (AMD_CBS_STR_ADDRCMDDRVSTREN_HELP),
              option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_120_DOT_0_OHM),   value = 0,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_60_DOT_0_OHM),    value = 1,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_40_DOT_0_OHM),    value = 3,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_30_DOT_0_OHM),    value = 7,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_24_DOT_0_OHM),    value = 15,   flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_20_DOT_0_OHM),    value = 31,   flags = 0 | RESET_REQUIRED;
            endoneof;
          endif;

          // Display Condition: CbsCmnMemCadBusDrvStrenCtlDdr4=Manual
          suppressif NOT ideqval CBS_CONFIG.CbsCmnMemCadBusDrvStrenCtlDdr4 == 1;
            // CsOdtDrvStren
            // No help string
            oneof
              varid       = CBS_CONFIG.CbsCmnMemCadBusCsOdtDrvStrenDdr4,
              prompt      = STRING_TOKEN (AMD_CBS_STR_CSODTDRVSTREN),
              help        = STRING_TOKEN (AMD_CBS_STR_CSODTDRVSTREN_HELP),
              option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_120_DOT_0_OHM),   value = 0,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_60_DOT_0_OHM),    value = 1,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_40_DOT_0_OHM),    value = 3,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_30_DOT_0_OHM),    value = 7,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_24_DOT_0_OHM),    value = 15,   flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_20_DOT_0_OHM),    value = 31,   flags = 0 | RESET_REQUIRED;
            endoneof;
          endif;

          // Display Condition: CbsCmnMemCadBusDrvStrenCtlDdr4=Manual
          suppressif NOT ideqval CBS_CONFIG.CbsCmnMemCadBusDrvStrenCtlDdr4 == 1;
            // CkeDrvStren
            // No help string
            oneof
              varid       = CBS_CONFIG.CbsCmnMemCadBusCkeDrvStrenDdr4,
              prompt      = STRING_TOKEN (AMD_CBS_STR_CKEDRVSTREN),
              help        = STRING_TOKEN (AMD_CBS_STR_CKEDRVSTREN_HELP),
              option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_120_DOT_0_OHM),   value = 0,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_60_DOT_0_OHM),    value = 1,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_40_DOT_0_OHM),    value = 3,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_30_DOT_0_OHM),    value = 7,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_24_DOT_0_OHM),    value = 15,   flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_20_DOT_0_OHM),    value = 31,   flags = 0 | RESET_REQUIRED;
            endoneof;
          endif;

        endform;
        //
        // form - Data Bus Configuration
        //
        form

          formid        = SETUP_DATA_BUS_CONFIGURATION_LABLE,

          title         = STRING_TOKEN (AMD_CBS_STR_DATA_BUS_CONFIGURATION_SECTION);

          subtitle text = STRING_TOKEN (AMD_CBS_STR_DATA_BUS_CONFIGURATION_SECTION);
          subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

          // Data Bus Configuration User Controls
          // Specify the mode for drive strength to Auto or Manual
          oneof
            varid       = CBS_CONFIG.CbsCmnMemDataBusConfigCtlDdr4,
            prompt      = STRING_TOKEN (AMD_CBS_STR_DATA_BUS_CONFIGURATION_USER_CONTROLS),
            help        = STRING_TOKEN (AMD_CBS_STR_DATA_BUS_CONFIGURATION_USER_CONTROLS_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_MANUAL),          value = 1,    flags = 0 | RESET_REQUIRED;
          endoneof;

          // Display Condition: CbsCmnMemDataBusConfigCtlDdr4=Manual
          suppressif NOT ideqval CBS_CONFIG.CbsCmnMemDataBusConfigCtlDdr4 == 1;
            // RttNom
            // No help string
            oneof
              varid       = CBS_CONFIG.CbsCmnMemCtrllerRttNomDdr4,
              prompt      = STRING_TOKEN (AMD_CBS_STR_RTTNOM),
              help        = STRING_TOKEN (AMD_CBS_STR_RTTNOM_HELP),
              option text = STRING_TOKEN (AMD_CBS_STR_RTT_NOM_DISABLE), value = 0,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_RZQ_4),           value = 1,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_RZQ_2),           value = 2,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_RZQ_6),           value = 3,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_RZQ_1),           value = 4,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_RZQ_5),           value = 5,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_RZQ_3),           value = 6,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_RZQ_7),           value = 7,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED;
            endoneof;
          endif;

          // Display Condition: CbsCmnMemDataBusConfigCtlDdr4=Manual
          suppressif NOT ideqval CBS_CONFIG.CbsCmnMemDataBusConfigCtlDdr4 == 1;
            // RttWr
            // No help string
            oneof
              varid       = CBS_CONFIG.CbsCmnMemCtrllerRttWrDdr4,
              prompt      = STRING_TOKEN (AMD_CBS_STR_RTTWR),
              help        = STRING_TOKEN (AMD_CBS_STR_RTTWR_HELP),
              option text = STRING_TOKEN (AMD_CBS_STR_DYNAMIC_ODT_OFF), value = 0,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_RZQ_2),           value = 1,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_RZQ_1),           value = 2,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_HI_Z),            value = 3,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_RZQ_3),           value = 4,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED;
            endoneof;
          endif;

          // Display Condition: CbsCmnMemDataBusConfigCtlDdr4=Manual
          suppressif NOT ideqval CBS_CONFIG.CbsCmnMemDataBusConfigCtlDdr4 == 1;
            // RttPark
            // No help string
            oneof
              varid       = CBS_CONFIG.CbsCmnMemCtrllerRttParkDdr4,
              prompt      = STRING_TOKEN (AMD_CBS_STR_RTTPARK),
              help        = STRING_TOKEN (AMD_CBS_STR_RTTPARK_HELP),
              option text = STRING_TOKEN (AMD_CBS_STR_RTT_PARK_DISABLE), value = 0,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_RZQ_4),           value = 1,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_RZQ_2),           value = 2,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_RZQ_6),           value = 3,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_RZQ_1),           value = 4,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_RZQ_5),           value = 5,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_RZQ_3),           value = 6,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_RZQ_7),           value = 7,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED;
            endoneof;
          endif;

        endform;
        //
        // form - Common RAS
        //
        form

          formid        = SETUP_COMMON_RAS_LABLE,

          title         = STRING_TOKEN (AMD_CBS_STR_COMMON_RAS_SECTION);

          subtitle text = STRING_TOKEN (AMD_CBS_STR_COMMON_RAS_SECTION);
          subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

          // Data Poisoning
          //  Enable/disable data poisoning: UMC_CH::EccCtrl[UcFatalEn] UMC_CH::EccCtrl[WrEccEn] Should be enabled/disabled together.
          oneof
            varid       = CBS_CONFIG.CbsCmnMemDataPoisoningDdr4,
            prompt      = STRING_TOKEN (AMD_CBS_STR_DATA_POISONING),
            help        = STRING_TOKEN (AMD_CBS_STR_DATA_POISONING_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED;
          endoneof;

          goto SETUP_ECC_CONFIGURATION_LABLE,
            prompt      = STRING_TOKEN (AMD_CBS_STR_ECC_CONFIGURATION_SECTION),
            help        = STRING_TOKEN (AMD_CBS_STR_ECC_CONFIGURATION_SECTION);

        endform;
          //
          // form - ECC Configuration
          //
          form

            formid        = SETUP_ECC_CONFIGURATION_LABLE,

            title         = STRING_TOKEN (AMD_CBS_STR_ECC_CONFIGURATION_SECTION);

            subtitle text = STRING_TOKEN (AMD_CBS_STR_ECC_CONFIGURATION_SECTION);
            subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

            // DRAM ECC Symbol Size
            // DRAM ECC Symbol Size (x4/x8) - UMC_CH::EccCtrl[EccSymbolSize]
            oneof
              varid       = CBS_CONFIG.CbsCmnMemCtrllerDramEccSymbolSizeDdr4,
              prompt      = STRING_TOKEN (AMD_CBS_STR_DRAM_ECC_SYMBOL_SIZE),
              help        = STRING_TOKEN (AMD_CBS_STR_DRAM_ECC_SYMBOL_SIZE_HELP),
              option text = STRING_TOKEN (AMD_CBS_STR_X4),              value = 0,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_X8),              value = 1,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED;
            endoneof;

            // DRAM ECC Enable
            // Use this option to enable / disable DRAM ECC. Auto will set ECC to enable.
            oneof
              varid       = CBS_CONFIG.CbsCmnMemCtrllerDramEccEnDdr4,
              prompt      = STRING_TOKEN (AMD_CBS_STR_DRAM_ECC_ENABLE),
              help        = STRING_TOKEN (AMD_CBS_STR_DRAM_ECC_ENABLE_HELP),
              option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
              option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED;
            endoneof;

          endform;
        //
        // form - Security
        //
        form

          formid        = SETUP_SECURITY_LABLE,

          title         = STRING_TOKEN (AMD_CBS_STR_SECURITY_SECTION);

          subtitle text = STRING_TOKEN (AMD_CBS_STR_SECURITY_SECTION);
          subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

          // TSME
          // Transparent SME: AddrTweakEn = 1; ForceEncrEn =1; DataEncrEn = 0
          oneof
            varid       = CBS_CONFIG.CbsCmnMemTsmeDdr4,
            questionid  = KEY_TSME,
            prompt      = STRING_TOKEN (AMD_CBS_STR_TSME),
            help        = STRING_TOKEN (AMD_CBS_STR_TSME_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED | INTERACTIVE;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED | INTERACTIVE;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED | INTERACTIVE;
          endoneof;

        endform;
      //
      // form - DRAM Memory Mapping
      //
      form

        formid        = SETUP_DRAM_MEMORY_MAPPING_LABLE,

        title         = STRING_TOKEN (AMD_CBS_STR_DRAM_MEMORY_MAPPING_SECTION);

        subtitle text = STRING_TOKEN (AMD_CBS_STR_DRAM_MEMORY_MAPPING_SECTION);
        subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

        // Chipselect Interleaving
        // Interleave memory blocks across the DRAM chip selects for node 0.
        oneof
          varid       = CBS_CONFIG.CbsCmnMemMappingBankInterleaveDdr4,
          prompt      = STRING_TOKEN (AMD_CBS_STR_CHIPSELECT_INTERLEAVING),
          help        = STRING_TOKEN (AMD_CBS_STR_CHIPSELECT_INTERLEAVING_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // BankGroupSwap
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsCmnMemCtrllerBankGroupSwapDdr4,
          prompt      = STRING_TOKEN (AMD_CBS_STR_BANKGROUPSWAP),
          help        = STRING_TOKEN (AMD_CBS_STR_BANKGROUPSWAP_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_APU),             value = 2,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_CPU),             value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // BankGroupSwapAlt
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsCmnMemCtrllerBankGroupSwapAltDdr4,
          prompt      = STRING_TOKEN (AMD_CBS_STR_BANKGROUPSWAPALT),
          help        = STRING_TOKEN (AMD_CBS_STR_BANKGROUPSWAPALT_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // Address Hash Bank
        // Enable or disable bank address hashing
        oneof
          varid       = CBS_CONFIG.CbsCmnMemAddressHashBankDdr4,
          prompt      = STRING_TOKEN (AMD_CBS_STR_ADDRESS_HASH_BANK),
          help        = STRING_TOKEN (AMD_CBS_STR_ADDRESS_HASH_BANK_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // Address Hash CS
        // Enable or disable CS address hashing
        oneof
          varid       = CBS_CONFIG.CbsCmnMemAddressHashCsDdr4,
          prompt      = STRING_TOKEN (AMD_CBS_STR_ADDRESS_HASH_CS),
          help        = STRING_TOKEN (AMD_CBS_STR_ADDRESS_HASH_CS_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
        endoneof;

      endform;
      //
      // form - NVDIMM
      //
      form

        formid        = SETUP_NVDIMM_LABLE,

        title         = STRING_TOKEN (AMD_CBS_STR_NVDIMM_SECTION);

        subtitle text = STRING_TOKEN (AMD_CBS_STR_NVDIMM_SECTION);
        subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

      endform;
      //
      // form - Memory MBIST
      //
      form

        formid        = SETUP_MEMORY_MBIST_LABLE,

        title         = STRING_TOKEN (AMD_CBS_STR_MEMORY_MBIST_SECTION);

        subtitle text = STRING_TOKEN (AMD_CBS_STR_MEMORY_MBIST_SECTION);
        subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

        // MBIST Enable
        // Enable or disable Memory MBIST
        oneof
          varid       = CBS_CONFIG.CbsCmnMemMbistEn,
          prompt      = STRING_TOKEN (AMD_CBS_STR_MBIST_ENABLE),
          help        = STRING_TOKEN (AMD_CBS_STR_MBIST_ENABLE_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
        endoneof;

        // Display Condition: CbsCmnMemMbistEn=Enabled
        suppressif NOT ideqval CBS_CONFIG.CbsCmnMemMbistEn == 1;
          // MBIST Test Mode
          // Select MBIST Test Mode -Interface Mode (Tests Single and Multiple CS transactions and Basic Connectivity) or Data Eye Mode (Measures Voltage vs. Timing)
          oneof
            varid       = CBS_CONFIG.CbsCmnMemMbistSubTest,
            prompt      = STRING_TOKEN (AMD_CBS_STR_MBIST_TEST_MODE),
            help        = STRING_TOKEN (AMD_CBS_STR_MBIST_TEST_MODE_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_INTERFACE_MODE),  value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_DATA_EYE_MODE),   value = 1,    flags = 0 | RESET_REQUIRED;
          endoneof;
        endif;

        // Display Condition: CbsCmnMemMbistEn=Enabled
        suppressif NOT ideqval CBS_CONFIG.CbsCmnMemMbistEn == 1;
          // MBIST Aggressors
          // Enable or disable MBIST Aggressor test
          oneof
            varid       = CBS_CONFIG.CbsCmnMemMbistAggressors,
            prompt      = STRING_TOKEN (AMD_CBS_STR_MBIST_AGGRESSORS),
            help        = STRING_TOKEN (AMD_CBS_STR_MBIST_AGGRESSORS_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
          endoneof;
        endif;

        // Display Condition: CbsCmnMemMbistEn=Enabled
        suppressif NOT ideqval CBS_CONFIG.CbsCmnMemMbistEn == 1;
          // MBIST Per Bit Slave Die Reporting
          // Reports 2D Data Eye Results in ABL Log for each DQ, Chipselect, and Channel
          oneof
            varid       = CBS_CONFIG.CbsCmnMemMbistPerBitSlaveDieReporting,
            prompt      = STRING_TOKEN (AMD_CBS_STR_MBIST_PER_BIT_SLAVE_DIE_REPORTING),
            help        = STRING_TOKEN (AMD_CBS_STR_MBIST_PER_BIT_SLAVE_DIE_REPORTING_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xFF, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
          endoneof;
        endif;

      endform;
    //
    // form - NBIO Common Options
    //
    form

      formid        = SETUP_NBIO_COMMON_OPTIONS_LABLE,

      title         = STRING_TOKEN (AMD_CBS_STR_NBIO_COMMON_OPTIONS_SECTION);

      subtitle text = STRING_TOKEN (AMD_CBS_STR_NBIO_COMMON_OPTIONS_SECTION);
      subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

      goto SETUP_GFX_CONFIGURATION_LABLE,
        prompt      = STRING_TOKEN (AMD_CBS_STR_GFX_CONFIGURATION_SECTION),
        help        = STRING_TOKEN (AMD_CBS_STR_GFX_CONFIGURATION_SECTION);

      goto SETUP_NB_CONFIGURATION_LABLE,
        prompt      = STRING_TOKEN (AMD_CBS_STR_NB_CONFIGURATION_SECTION),
        help        = STRING_TOKEN (AMD_CBS_STR_NB_CONFIGURATION_SECTION);

      goto SETUP_PCIE_CONFIGURATION_LABLE,
        prompt      = STRING_TOKEN (AMD_CBS_STR_PCIE_CONFIGURATION_SECTION),
        help        = STRING_TOKEN (AMD_CBS_STR_PCIE_CONFIGURATION_SECTION);

      text
        help        = STRING_TOKEN (AMD_CBS_STR_BLANK),
        text        = STRING_TOKEN (AMD_CBS_STR_BLANK);

      // System Configuration
      // Warning: Select System Configuration may cause the system to hang, as some System Configuration may not be supported by your OPN.\n
      oneof
        varid       = CBS_CONFIG.CbsCmnGnbSMUSystemConfig,
        questionid  = KEY_SYSTEM_CONFIGURATION,
        prompt      = STRING_TOKEN (AMD_CBS_STR_SYSTEM_CONFIGURATION),
        help        = STRING_TOKEN (AMD_CBS_STR_SYSTEM_CONFIGURATION_HELP),
        option text = STRING_TOKEN (AMD_CBS_STR_12W_POR_CONFIGURATION_1_COMMERCIAL_CONSUMER), value = 1,    flags = 0 | RESET_REQUIRED | INTERACTIVE;
        option text = STRING_TOKEN (AMD_CBS_STR_15W_POR_CONFIGURATION_2_COMMERCIAL_CONSUMER), value = 2,    flags = 0 | RESET_REQUIRED | INTERACTIVE;
        option text = STRING_TOKEN (AMD_CBS_STR_25W_POR_CONFIGURATION_3_COMMERCIAL_CONSUMER), value = 3,    flags = 0 | RESET_REQUIRED | INTERACTIVE;
        option text = STRING_TOKEN (AMD_CBS_STR_35W_POR_CONFIGURATION_4_CONSUMER), value = 4,    flags = 0 | RESET_REQUIRED | INTERACTIVE;
        option text = STRING_TOKEN (AMD_CBS_STR_45W_POR_CONFIGURATION_5_CONSUMER), value = 5,    flags = 0 | RESET_REQUIRED | INTERACTIVE;
        option text = STRING_TOKEN (AMD_CBS_STR_54W_POR_CONFIGURATION_6_CONSUMER), value = 6,    flags = 0 | RESET_REQUIRED | INTERACTIVE;
        option text = STRING_TOKEN (AMD_CBS_STR_35W_POR_CONFIGURATION_7_EMBEDDED), value = 7,    flags = 0 | RESET_REQUIRED | INTERACTIVE;
        option text = STRING_TOKEN (AMD_CBS_STR_45W_POR_CONFIGURATION_8_EMBEDDED), value = 8,    flags = 0 | RESET_REQUIRED | INTERACTIVE;
        option text = STRING_TOKEN (AMD_CBS_STR_54W_POR_CONFIGURATION_9_EMBEDDED), value = 9,    flags = 0 | RESET_REQUIRED | INTERACTIVE;
        option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED | INTERACTIVE;
      endoneof;

      // Display Condition: CbsComboFlag=1|CbsComboFlag=2|CbsComboFlag=3
      suppressif NOT ideqval CBS_CONFIG.CbsComboFlag == 1
             AND NOT ideqval CBS_CONFIG.CbsComboFlag == 2
             AND NOT ideqval CBS_CONFIG.CbsComboFlag == 3;
        goto SETUP_FAN_CONTROL_LABLE,
          prompt      = STRING_TOKEN (AMD_CBS_STR_FAN_CONTROL_SECTION),
          help        = STRING_TOKEN (AMD_CBS_STR_FAN_CONTROL_SECTION);
      endif;

      // Audio IOs
      // Audio IOs control
      oneof
        varid       = CBS_CONFIG.CbsDbgGnbAudioIOs,
        prompt      = STRING_TOKEN (AMD_CBS_STR_AUDIO_IOS),
        help        = STRING_TOKEN (AMD_CBS_STR_AUDIO_IOS_HELP),
        option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_MAX_HDA_MIN_SOUNDWIRE), value = 0,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_MAX_MHDA_MIN_SOUNDWIRE), value = 1,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_MAX_SOUNDWIRE_MIN_HDA), value = 2,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_MAX_SOUNDWIRE_MIN_MHDA), value = 3,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_I2S_TDM),         value = 0x4,  flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_DISABLE_AUDIO_IOS), value = 7,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_SOUNDWIRE),       value = 0x8,  flags = 0 | RESET_REQUIRED;
      endoneof;

      // System Temperature Tracking
      // System Temperature Tracking [0 = disabled; 1 = enabled]
      oneof
        varid       = CBS_CONFIG.CbsCmnSystemTemperatureTracking,
        prompt      = STRING_TOKEN (AMD_CBS_STR_SYSTEM_TEMPERATURE_TRACKING),
        help        = STRING_TOKEN (AMD_CBS_STR_SYSTEM_TEMPERATURE_TRACKING_HELP),
        option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
        option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
      endoneof;

    endform;
      //
      // form - GFX Configuration
      //
      form

        formid        = SETUP_GFX_CONFIGURATION_LABLE,

        title         = STRING_TOKEN (AMD_CBS_STR_GFX_CONFIGURATION_SECTION);

        subtitle text = STRING_TOKEN (AMD_CBS_STR_GFX_CONFIGURATION_SECTION);
        subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

        // Integrated Graphics Controller
        // Enable Integrated Graphics controller
        oneof
          varid       = CBS_CONFIG.CbsCmnGnbGfxiGPU_CONTROL,
          prompt      = STRING_TOKEN (AMD_CBS_STR_INTEGRATED_GRAPHICS_CONTROLLER),
          help        = STRING_TOKEN (AMD_CBS_STR_INTEGRATED_GRAPHICS_CONTROLLER_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_FORCES),          value = 2,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // Display Condition: CbsCmnGnbGfxiGPU_CONTROL=Forces
        suppressif NOT ideqval CBS_CONFIG.CbsCmnGnbGfxiGPU_CONTROL == 2;
          // UMA Mode
          oneof
            varid       = CBS_CONFIG.CbsCmnGnbGfxUmaMode,
            prompt      = STRING_TOKEN (AMD_CBS_STR_UMA_MODE),
            help        = STRING_TOKEN (AMD_CBS_STR_UMA_MODE_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_UMA_SPECIFIED),   value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_UMA_AUTO),        value = 2,    flags = 0 | RESET_REQUIRED;
          endoneof;
        endif;

        // Display Condition: CbsCmnGnbGfxiGPU_CONTROL=Forces
        suppressif NOT ideqval CBS_CONFIG.CbsCmnGnbGfxiGPU_CONTROL == 2;
          // UMA Version
          // UMA Legacy Version\nUMA Non Legacy Version\nHybrid Secure
          oneof
            varid       = CBS_CONFIG.CbsCmnGnbGfxUmaVersion,
            prompt      = STRING_TOKEN (AMD_CBS_STR_UMA_VERSION),
            help        = STRING_TOKEN (AMD_CBS_STR_UMA_VERSION_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_LEGACY),          value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_NON_LEGACY),      value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_HYBRID_SECURE),   value = 2,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED;
          endoneof;
        endif;

        // Display Condition: CbsCmnGnbGfxiGPU_CONTROL=Forces,CbsCmnGnbGfxUmaMode=UMA_AUTO
        suppressif NOT ideqval CBS_CONFIG.CbsCmnGnbGfxiGPU_CONTROL == 2
                OR NOT ideqval CBS_CONFIG.CbsCmnGnbGfxUmaMode == 2;
          // Display Resulotuon
          // Display Resolution
          oneof
            varid       = CBS_CONFIG.CbsCmnGnbGfxDisplayResolution,
            prompt      = STRING_TOKEN (AMD_CBS_STR_DISPLAY_RESULOTUON),
            help        = STRING_TOKEN (AMD_CBS_STR_DISPLAY_RESULOTUON_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_1920X1080_AND_BELOW), value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_2560X1600),       value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_3840X2160),       value = 2,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xff, flags = DEFAULT | RESET_REQUIRED;
          endoneof;
        endif;

        // Display Condition: CbsCmnGnbGfxiGPU_CONTROL=Forces,CbsCmnGnbGfxUmaMode=UMA_SPECIFIED
        suppressif NOT ideqval CBS_CONFIG.CbsCmnGnbGfxiGPU_CONTROL == 2
                OR NOT ideqval CBS_CONFIG.CbsCmnGnbGfxUmaMode == 1;
          // UMA Frame buffer Size
          // Set UMA FB size
          oneof
            varid       = CBS_CONFIG.CbsCmnGnbGfxUmaFrameBufferSize,
            prompt      = STRING_TOKEN (AMD_CBS_STR_UMA_FRAME_BUFFER_SIZE),
            help        = STRING_TOKEN (AMD_CBS_STR_UMA_FRAME_BUFFER_SIZE_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xffffffff, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_64M),             value = 64,   flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_128M),            value = 128,  flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_256M),            value = 256,  flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_384M),            value = 384,  flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_512M),            value = 512,  flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_80M),             value = 80,   flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_96M),             value = 96,   flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_768M),            value = 768,  flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_1G),              value = 1024, flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_2G),              value = 2048, flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_3G),              value = 3072, flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_4G),              value = 4096, flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_8G),              value = 8192, flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_16G),             value = 16384, flags = 0 | RESET_REQUIRED;
          endoneof;
        endif;

        // Display Condition: CbsCmnGnbGfxiGPU_CONTROL=Auto|CbsCmnGnbGfxiGPU_CONTROL=Forces
        suppressif NOT ideqval CBS_CONFIG.CbsCmnGnbGfxiGPU_CONTROL == 0xf
               AND NOT ideqval CBS_CONFIG.CbsCmnGnbGfxiGPU_CONTROL == 2;
          // NB Azalia
          // Enable Integrate HD Audio controller
          oneof
            varid       = CBS_CONFIG.CbsCmnGnbGfxNbAzalia,
            prompt      = STRING_TOKEN (AMD_CBS_STR_NB_AZALIA),
            help        = STRING_TOKEN (AMD_CBS_STR_NB_AZALIA_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED;
          endoneof;
        endif;

      endform;
      //
      // form - NB Configuration
      //
      form

        formid        = SETUP_NB_CONFIGURATION_LABLE,

        title         = STRING_TOKEN (AMD_CBS_STR_NB_CONFIGURATION_SECTION);

        subtitle text = STRING_TOKEN (AMD_CBS_STR_NB_CONFIGURATION_SECTION);
        subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

        // IOMMU
        // Enable/Disable IOMMU
        oneof
          varid       = CBS_CONFIG.CbsCmnGnbNbIOMMU,
          prompt      = STRING_TOKEN (AMD_CBS_STR_IOMMU),
          help        = STRING_TOKEN (AMD_CBS_STR_IOMMU_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

      endform;
      //
      // form - PCIe Configuration
      //
      form

        formid        = SETUP_PCIE_CONFIGURATION_LABLE,

        title         = STRING_TOKEN (AMD_CBS_STR_PCIE_CONFIGURATION_SECTION);

        subtitle text = STRING_TOKEN (AMD_CBS_STR_PCIE_CONFIGURATION_SECTION);
        subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

        // PSPP Policy
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsCmnGnbPciePsppPolicy,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PSPP_POLICY),
          help        = STRING_TOKEN (AMD_CBS_STR_PSPP_POLICY_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_PERFORMANCE),     value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_BALANCED),        value = 2,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_POWER_SAVING),    value = 3,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

      endform;
      //
      // form - Fan Control
      //
      form

        formid        = SETUP_FAN_CONTROL_LABLE,

        title         = STRING_TOKEN (AMD_CBS_STR_FAN_CONTROL_SECTION);

        subtitle text = STRING_TOKEN (AMD_CBS_STR_FAN_CONTROL_SECTION);
        subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

        // Fan Control
        // Auto = Use the default fan controller settings\nManual = User can set customized fan controller settings
        oneof
          varid       = CBS_CONFIG.CbsDbgFanCtl,
          prompt      = STRING_TOKEN (AMD_CBS_STR_FAN_CONTROL),
          help        = STRING_TOKEN (AMD_CBS_STR_FAN_CONTROL_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_MANUAL),          value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0,    flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // Display Condition: CbsDbgFanCtl=Manual
        suppressif NOT ideqval CBS_CONFIG.CbsDbgFanCtl == 1;
          // Force PWM Control
          // Unforce = Do not force the fan PWM\nForce = Force the fan PWM to the use specified value
          oneof
            varid       = CBS_CONFIG.CbsDbgForcePwmCtl,
            prompt      = STRING_TOKEN (AMD_CBS_STR_FORCE_PWM_CONTROL),
            help        = STRING_TOKEN (AMD_CBS_STR_FORCE_PWM_CONTROL_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_FORCE),           value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_UNFORCE),         value = 0,    flags = DEFAULT | RESET_REQUIRED;
          endoneof;
        endif;

        // Display Condition: CbsDbgForcePwmCtl=Force
        suppressif NOT ideqval CBS_CONFIG.CbsDbgForcePwmCtl == 1;
          // Force PWM
          // Specify the PWM to force the fan to [0-100]
          numeric
            varid       = CBS_CONFIG.CbsDbgForcePwm,
            prompt      = STRING_TOKEN (AMD_CBS_STR_FORCE_PWM),
            help        = STRING_TOKEN (AMD_CBS_STR_FORCE_PWM_HELP),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 100,
            step        = 0,
            default     = 0,
          endnumeric;
        endif;

        // Display Condition: CbsDbgFanCtl=Manual
        suppressif NOT ideqval CBS_CONFIG.CbsDbgFanCtl == 1;
          // Fan Table Control
          // Auto = Use the default fan table\nManual = User can set customized fan table
          oneof
            varid       = CBS_CONFIG.CbsDbgFanTableCtl,
            prompt      = STRING_TOKEN (AMD_CBS_STR_FAN_TABLE_CONTROL),
            help        = STRING_TOKEN (AMD_CBS_STR_FAN_TABLE_CONTROL_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_MANUAL),          value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0,    flags = DEFAULT | RESET_REQUIRED;
          endoneof;
        endif;

        // Display Condition: CbsDbgFanTableCtl=Manual
        suppressif NOT ideqval CBS_CONFIG.CbsDbgFanTableCtl == 1;
          // Low Temperature
          // Low Temperature ['C]
          numeric
            varid       = CBS_CONFIG.CbsDbgFanTableTempLow,
            prompt      = STRING_TOKEN (AMD_CBS_STR_LOW_TEMPERATURE),
            help        = STRING_TOKEN (AMD_CBS_STR_LOW_TEMPERATURE_HELP),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 0xff,
            step        = 0,
            default     = 0,
          endnumeric;
        endif;

        // Display Condition: CbsDbgFanTableCtl=Manual
        suppressif NOT ideqval CBS_CONFIG.CbsDbgFanTableCtl == 1;
          // Medium Temperature
          // Medium Temperature ['C]
          numeric
            varid       = CBS_CONFIG.CbsDbgFanTableTempMed,
            prompt      = STRING_TOKEN (AMD_CBS_STR_MEDIUM_TEMPERATURE),
            help        = STRING_TOKEN (AMD_CBS_STR_MEDIUM_TEMPERATURE_HELP),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 0xff,
            step        = 0,
            default     = 0,
          endnumeric;
        endif;

        // Display Condition: CbsDbgFanTableCtl=Manual
        suppressif NOT ideqval CBS_CONFIG.CbsDbgFanTableCtl == 1;
          // High Temperature
          // High Temperature ['C]
          numeric
            varid       = CBS_CONFIG.CbsDbgFanTableTempHigh,
            prompt      = STRING_TOKEN (AMD_CBS_STR_HIGH_TEMPERATURE),
            help        = STRING_TOKEN (AMD_CBS_STR_HIGH_TEMPERATURE_HELP),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 0xff,
            step        = 0,
            default     = 0,
          endnumeric;
        endif;

        // Display Condition: CbsDbgFanTableCtl=Manual
        suppressif NOT ideqval CBS_CONFIG.CbsDbgFanTableCtl == 1;
          // Critical Temperature
          // Critical Temperature ['C]
          numeric
            varid       = CBS_CONFIG.CbsDbgFanTableTempCritical,
            prompt      = STRING_TOKEN (AMD_CBS_STR_CRITICAL_TEMPERATURE),
            help        = STRING_TOKEN (AMD_CBS_STR_CRITICAL_TEMPERATURE_HELP),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 0xff,
            step        = 0,
            default     = 0,
          endnumeric;
        endif;

        // Display Condition: CbsDbgFanTableCtl=Manual
        suppressif NOT ideqval CBS_CONFIG.CbsDbgFanTableCtl == 1;
          // Low Pwm
          // Low Pwm [0-100]
          numeric
            varid       = CBS_CONFIG.CbsDbgFanTableTPwmLow,
            prompt      = STRING_TOKEN (AMD_CBS_STR_LOW_PWM),
            help        = STRING_TOKEN (AMD_CBS_STR_LOW_PWM_HELP),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 100,
            step        = 0,
            default     = 0,
          endnumeric;
        endif;

        // Display Condition: CbsDbgFanTableCtl=Manual
        suppressif NOT ideqval CBS_CONFIG.CbsDbgFanTableCtl == 1;
          // Medium Pwm
          // Medium Pwm [0-100]
          numeric
            varid       = CBS_CONFIG.CbsDbgFanTablePwmMed,
            prompt      = STRING_TOKEN (AMD_CBS_STR_MEDIUM_PWM),
            help        = STRING_TOKEN (AMD_CBS_STR_MEDIUM_PWM_HELP),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 100,
            step        = 0,
            default     = 0,
          endnumeric;
        endif;

        // Display Condition: CbsDbgFanTableCtl=Manual
        suppressif NOT ideqval CBS_CONFIG.CbsDbgFanTableCtl == 1;
          // High Pwm
          // High Pwm [0-100]
          numeric
            varid       = CBS_CONFIG.CbsDbgFanTablePwmHigh,
            prompt      = STRING_TOKEN (AMD_CBS_STR_HIGH_PWM),
            help        = STRING_TOKEN (AMD_CBS_STR_HIGH_PWM_HELP),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 100,
            step        = 0,
            default     = 0,
          endnumeric;
        endif;

        // Display Condition: CbsDbgFanTableCtl=Manual
        suppressif NOT ideqval CBS_CONFIG.CbsDbgFanTableCtl == 1;
          // Temperature Hysteresis
          // Temperature Hysteresis ['C]
          numeric
            varid       = CBS_CONFIG.CbsDbgFanTableHyst,
            prompt      = STRING_TOKEN (AMD_CBS_STR_TEMPERATURE_HYSTERESIS),
            help        = STRING_TOKEN (AMD_CBS_STR_TEMPERATURE_HYSTERESIS_HELP),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 0xff,
            step        = 0,
            default     = 0,
          endnumeric;
        endif;

        // Display Condition: CbsDbgFanTableCtl=Manual
        suppressif NOT ideqval CBS_CONFIG.CbsDbgFanTableCtl == 1;
          // Pwm Frequency
          // 0 = 25kHz\n1 = 100Hz
          oneof
            varid       = CBS_CONFIG.CbsDbgFanTablePwmFreq,
            prompt      = STRING_TOKEN (AMD_CBS_STR_PWM_FREQUENCY),
            help        = STRING_TOKEN (AMD_CBS_STR_PWM_FREQUENCY_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_100HZ),           value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_25KHZ),           value = 0,    flags = DEFAULT | RESET_REQUIRED;
          endoneof;
        endif;

        // Display Condition: CbsDbgFanTableCtl=Manual
        suppressif NOT ideqval CBS_CONFIG.CbsDbgFanTableCtl == 1;
          // Fan Polarity
          // 0 = negative\n1 = positive
          oneof
            varid       = CBS_CONFIG.CbsDbgFanPolarity,
            prompt      = STRING_TOKEN (AMD_CBS_STR_FAN_POLARITY),
            help        = STRING_TOKEN (AMD_CBS_STR_FAN_POLARITY_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_NEGATIVE),        value = 0,    flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_POSITIVE),        value = 1,    flags = 0 | RESET_REQUIRED;
          endoneof;
        endif;

      endform;
    //
    // form - FCH Common Options
    //
    form

      formid        = SETUP_FCH_COMMON_OPTIONS_LABLE,

      title         = STRING_TOKEN (AMD_CBS_STR_FCH_COMMON_OPTIONS_SECTION);

      subtitle text = STRING_TOKEN (AMD_CBS_STR_FCH_COMMON_OPTIONS_SECTION);
      subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

      goto SETUP_SATA_CONFIGURATION_OPTIONS_LABLE,
        prompt      = STRING_TOKEN (AMD_CBS_STR_SATA_CONFIGURATION_OPTIONS_SECTION),
        help        = STRING_TOKEN (AMD_CBS_STR_SATA_CONFIGURATION_OPTIONS_SECTION);

      goto SETUP_USB_CONFIGURATION_OPTIONS_LABLE,
        prompt      = STRING_TOKEN (AMD_CBS_STR_USB_CONFIGURATION_OPTIONS_SECTION),
        help        = STRING_TOKEN (AMD_CBS_STR_USB_CONFIGURATION_OPTIONS_SECTION);

      goto SETUP_AC_POWER_LOSS_OPTIONS_LABLE,
        prompt      = STRING_TOKEN (AMD_CBS_STR_AC_POWER_LOSS_OPTIONS_SECTION),
        help        = STRING_TOKEN (AMD_CBS_STR_AC_POWER_LOSS_OPTIONS_SECTION);

      goto SETUP_I2C_CONFIGURATION_OPTIONS_LABLE,
        prompt      = STRING_TOKEN (AMD_CBS_STR_I2C_CONFIGURATION_OPTIONS_SECTION),
        help        = STRING_TOKEN (AMD_CBS_STR_I2C_CONFIGURATION_OPTIONS_SECTION);

      goto SETUP_UART_CONFIGURATION_OPTIONS_LABLE,
        prompt      = STRING_TOKEN (AMD_CBS_STR_UART_CONFIGURATION_OPTIONS_SECTION),
        help        = STRING_TOKEN (AMD_CBS_STR_UART_CONFIGURATION_OPTIONS_SECTION);

      goto SETUP_ESPI_CONFIGURATION_OPTIONS_LABLE,
        prompt      = STRING_TOKEN (AMD_CBS_STR_ESPI_CONFIGURATION_OPTIONS_SECTION),
        help        = STRING_TOKEN (AMD_CBS_STR_ESPI_CONFIGURATION_OPTIONS_SECTION);

      goto SETUP_XGBE_CONFIGURATION_OPTIONS_LABLE,
        prompt      = STRING_TOKEN (AMD_CBS_STR_XGBE_CONFIGURATION_OPTIONS_SECTION),
        help        = STRING_TOKEN (AMD_CBS_STR_XGBE_CONFIGURATION_OPTIONS_SECTION);

      goto SETUP_EMMC_OPTIONS_LABLE,
        prompt      = STRING_TOKEN (AMD_CBS_STR_EMMC_OPTIONS_SECTION),
        help        = STRING_TOKEN (AMD_CBS_STR_EMMC_OPTIONS_SECTION);

      goto SETUP_LPC_OPTIONS_LABLE,
        prompt      = STRING_TOKEN (AMD_CBS_STR_LPC_OPTIONS_SECTION),
        help        = STRING_TOKEN (AMD_CBS_STR_LPC_OPTIONS_SECTION);

      goto SETUP_SYSTEM_CONTROL_LABLE,
        prompt      = STRING_TOKEN (AMD_CBS_STR_SYSTEM_CONTROL_SECTION),
        help        = STRING_TOKEN (AMD_CBS_STR_SYSTEM_CONTROL_SECTION);

    endform;
      //
      // form - SATA Configuration Options
      //
      form

        formid        = SETUP_SATA_CONFIGURATION_OPTIONS_LABLE,

        title         = STRING_TOKEN (AMD_CBS_STR_SATA_CONFIGURATION_OPTIONS_SECTION);

        subtitle text = STRING_TOKEN (AMD_CBS_STR_SATA_CONFIGURATION_OPTIONS_SECTION);
        subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

        // SATA Controller
        // Disable or enable OnChip SATA controller
        oneof
          varid       = CBS_CONFIG.CbsCmnFchSataEnable,
          questionid  = KEY_SATA_CONTROLLER,
          prompt      = STRING_TOKEN (AMD_CBS_STR_SATA_CONTROLLER),
          help        = STRING_TOKEN (AMD_CBS_STR_SATA_CONTROLLER_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED | INTERACTIVE;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED | INTERACTIVE;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED | INTERACTIVE;
        endoneof;

        // Display Condition: CbsCmnFchSataEnable=Enabled
        suppressif NOT ideqval CBS_CONFIG.CbsCmnFchSataEnable == 1;
          // SATA Mode
          // Select OnChip SATA Type. Don't select RAID for Raven FP5 platform. Raven FP5 doesn't support RAID.
          oneof
            varid       = CBS_CONFIG.CbsCmnFchSataClass,
            questionid  = KEY_SATA_MODE,
            prompt      = STRING_TOKEN (AMD_CBS_STR_SATA_MODE),
            help        = STRING_TOKEN (AMD_CBS_STR_SATA_MODE_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_AHCI),            value = 2,    flags = 0 | RESET_REQUIRED | INTERACTIVE;
            option text = STRING_TOKEN (AMD_CBS_STR_AHCI_AS_ID_0X7904), value = 5,    flags = 0 | RESET_REQUIRED | INTERACTIVE;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED | INTERACTIVE;
            option text = STRING_TOKEN (AMD_CBS_STR_RAID),            value = 0x1,  flags = 0 | RESET_REQUIRED | INTERACTIVE;
          endoneof;
        endif;

        // Sata RAS Support
        // Disable or enable Sata RAS Support
        oneof
          varid       = CBS_CONFIG.CbsCmnFchSataRasSupport,
          prompt      = STRING_TOKEN (AMD_CBS_STR_SATA_RAS_SUPPORT),
          help        = STRING_TOKEN (AMD_CBS_STR_SATA_RAS_SUPPORT_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // Sata Disabled AHCI Prefetch Function
        // Disable or enable Sata Disabled AHCI Prefetch Function
        oneof
          varid       = CBS_CONFIG.CbsCmnFchSataAhciDisPrefetchFunction,
          prompt      = STRING_TOKEN (AMD_CBS_STR_SATA_DISABLED_AHCI_PREFETCH_FUNCTION),
          help        = STRING_TOKEN (AMD_CBS_STR_SATA_DISABLED_AHCI_PREFETCH_FUNCTION_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // Aggresive SATA Device Sleep Port 0
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsDbgFchSataAggresiveDevSlpP0,
          prompt      = STRING_TOKEN (AMD_CBS_STR_AGGRESIVE_SATA_DEVICE_SLEEP_PORT_0),
          help        = STRING_TOKEN (AMD_CBS_STR_AGGRESIVE_SATA_DEVICE_SLEEP_PORT_0_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // Aggresive SATA Device Sleep Port 1
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsDbgFchSataAggresiveDevSlpP1,
          prompt      = STRING_TOKEN (AMD_CBS_STR_AGGRESIVE_SATA_DEVICE_SLEEP_PORT_1),
          help        = STRING_TOKEN (AMD_CBS_STR_AGGRESIVE_SATA_DEVICE_SLEEP_PORT_1_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

      endform;
      //
      // form - USB Configuration Options
      //
      form

        formid        = SETUP_USB_CONFIGURATION_OPTIONS_LABLE,

        title         = STRING_TOKEN (AMD_CBS_STR_USB_CONFIGURATION_OPTIONS_SECTION);

        subtitle text = STRING_TOKEN (AMD_CBS_STR_USB_CONFIGURATION_OPTIONS_SECTION);
        subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

        // XHCI0 controller enable
        // Enable or disable USB3 controller.
        oneof
          varid       = CBS_CONFIG.CbsCmnFchUsbXHCI0Enable,
          prompt      = STRING_TOKEN (AMD_CBS_STR_XHCI0_CONTROLLER_ENABLE),
          help        = STRING_TOKEN (AMD_CBS_STR_XHCI0_CONTROLLER_ENABLE_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // Display Condition: CbsComboFlag=1|CbsComboFlag=2
        suppressif NOT ideqval CBS_CONFIG.CbsComboFlag == 1
               AND NOT ideqval CBS_CONFIG.CbsComboFlag == 2;
          // XHCI1 controller enable
          // Enable or disable USB3 controller.
          oneof
            varid       = CBS_CONFIG.CbsCmnFchUsbXHCI1Enable,
            prompt      = STRING_TOKEN (AMD_CBS_STR_XHCI1_CONTROLLER_ENABLE),
            help        = STRING_TOKEN (AMD_CBS_STR_XHCI1_CONTROLLER_ENABLE_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED;
          endoneof;
        endif;

      endform;
      //
      // form - Ac Power Loss Options
      //
      form

        formid        = SETUP_AC_POWER_LOSS_OPTIONS_LABLE,

        title         = STRING_TOKEN (AMD_CBS_STR_AC_POWER_LOSS_OPTIONS_SECTION);

        subtitle text = STRING_TOKEN (AMD_CBS_STR_AC_POWER_LOSS_OPTIONS_SECTION);
        subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

        // Ac Loss Control
        // Select Ac Loss Control Method
        oneof
          varid       = CBS_CONFIG.CbsCmnFchSystemPwrFailShadow,
          prompt      = STRING_TOKEN (AMD_CBS_STR_AC_LOSS_CONTROL),
          help        = STRING_TOKEN (AMD_CBS_STR_AC_LOSS_CONTROL_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_ALWAYS_OFF),      value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ALWAYS_ON),       value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_RESERVED),        value = 2,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_PREVIOUS),        value = 3,    flags = DEFAULT | RESET_REQUIRED;
        endoneof;

      endform;
      //
      // form - I2C Configuration Options
      //
      form

        formid        = SETUP_I2C_CONFIGURATION_OPTIONS_LABLE,

        title         = STRING_TOKEN (AMD_CBS_STR_I2C_CONFIGURATION_OPTIONS_SECTION);

        subtitle text = STRING_TOKEN (AMD_CBS_STR_I2C_CONFIGURATION_OPTIONS_SECTION);
        subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

        // I2C 0 Enable
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsCmnFchI2C0Config,
          prompt      = STRING_TOKEN (AMD_CBS_STR_I2C_0_ENABLE),
          help        = STRING_TOKEN (AMD_CBS_STR_I2C_0_ENABLE_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // I2C 1 Enable
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsCmnFchI2C1Config,
          prompt      = STRING_TOKEN (AMD_CBS_STR_I2C_1_ENABLE),
          help        = STRING_TOKEN (AMD_CBS_STR_I2C_1_ENABLE_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // I2C 2 Enable
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsCmnFchI2C2Config,
          prompt      = STRING_TOKEN (AMD_CBS_STR_I2C_2_ENABLE),
          help        = STRING_TOKEN (AMD_CBS_STR_I2C_2_ENABLE_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // I2C 3 Enable
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsCmnFchI2C3Config,
          prompt      = STRING_TOKEN (AMD_CBS_STR_I2C_3_ENABLE),
          help        = STRING_TOKEN (AMD_CBS_STR_I2C_3_ENABLE_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // I2C 4 Enable
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsCmnFchI2C4Config,
          prompt      = STRING_TOKEN (AMD_CBS_STR_I2C_4_ENABLE),
          help        = STRING_TOKEN (AMD_CBS_STR_I2C_4_ENABLE_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // I2C 5 Enable
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsCmnFchI2C5Config,
          prompt      = STRING_TOKEN (AMD_CBS_STR_I2C_5_ENABLE),
          help        = STRING_TOKEN (AMD_CBS_STR_I2C_5_ENABLE_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

      endform;
      //
      // form - Uart Configuration Options
      //
      form

        formid        = SETUP_UART_CONFIGURATION_OPTIONS_LABLE,

        title         = STRING_TOKEN (AMD_CBS_STR_UART_CONFIGURATION_OPTIONS_SECTION);

        subtitle text = STRING_TOKEN (AMD_CBS_STR_UART_CONFIGURATION_OPTIONS_SECTION);
        subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

        // Uart 0 Enable
        // Uart 0 has no HW FC if Uart 2 is enabled
        oneof
          varid       = CBS_CONFIG.CbsCmnFchUart0Config,
          prompt      = STRING_TOKEN (AMD_CBS_STR_UART_0_ENABLE),
          help        = STRING_TOKEN (AMD_CBS_STR_UART_0_ENABLE_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // Display Condition: CbsCmnFchUart0Config = Enabled
        suppressif NOT ideqval CBS_CONFIG.CbsCmnFchUart0Config == 1;
          // Uart 0 Legacy Options
          // No help string
          oneof
            varid       = CBS_CONFIG.CbsCmnFchUart0LegacyConfig,
            prompt      = STRING_TOKEN (AMD_CBS_STR_UART_0_LEGACY_OPTIONS),
            help        = STRING_TOKEN (AMD_CBS_STR_UART_0_LEGACY_OPTIONS_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_0X2E8),           value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_0X2F8),           value = 2,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_0X3E8),           value = 3,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_0X3F8),           value = 4,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED;
          endoneof;
        endif;

        // Uart 1 Enable
        // Uart 1 has no HW FC if Uart 3 is enabled
        oneof
          varid       = CBS_CONFIG.CbsCmnFchUart1Config,
          prompt      = STRING_TOKEN (AMD_CBS_STR_UART_1_ENABLE),
          help        = STRING_TOKEN (AMD_CBS_STR_UART_1_ENABLE_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // Display Condition: CbsCmnFchUart1Config = Enabled
        suppressif NOT ideqval CBS_CONFIG.CbsCmnFchUart1Config == 1;
          // Uart 1 Legacy Options
          // No help string
          oneof
            varid       = CBS_CONFIG.CbsCmnFchUart1LegacyConfig,
            prompt      = STRING_TOKEN (AMD_CBS_STR_UART_1_LEGACY_OPTIONS),
            help        = STRING_TOKEN (AMD_CBS_STR_UART_1_LEGACY_OPTIONS_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_0X2E8),           value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_0X2F8),           value = 2,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_0X3E8),           value = 3,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_0X3F8),           value = 4,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED;
          endoneof;
        endif;

        // Uart 2 Enable (no HW FC)
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsCmnFchUart2Config,
          prompt      = STRING_TOKEN (AMD_CBS_STR_UART_2_ENABLE_NO_HW_FC),
          help        = STRING_TOKEN (AMD_CBS_STR_UART_2_ENABLE_NO_HW_FC_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // Display Condition: CbsCmnFchUart2Config = Enabled
        suppressif NOT ideqval CBS_CONFIG.CbsCmnFchUart2Config == 1;
          // Uart 2 Legacy Options
          // No help string
          oneof
            varid       = CBS_CONFIG.CbsCmnFchUart2LegacyConfig,
            prompt      = STRING_TOKEN (AMD_CBS_STR_UART_2_LEGACY_OPTIONS),
            help        = STRING_TOKEN (AMD_CBS_STR_UART_2_LEGACY_OPTIONS_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_0X2E8),           value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_0X2F8),           value = 2,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_0X3E8),           value = 3,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_0X3F8),           value = 4,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED;
          endoneof;
        endif;

        // Uart 3 Enable (no HW FC)
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsCmnFchUart3Config,
          prompt      = STRING_TOKEN (AMD_CBS_STR_UART_3_ENABLE_NO_HW_FC),
          help        = STRING_TOKEN (AMD_CBS_STR_UART_3_ENABLE_NO_HW_FC_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // Display Condition: CbsCmnFchUart3Config = Enabled
        suppressif NOT ideqval CBS_CONFIG.CbsCmnFchUart3Config == 1;
          // Uart 3 Legacy Options
          // No help string
          oneof
            varid       = CBS_CONFIG.CbsCmnFchUart3LegacyConfig,
            prompt      = STRING_TOKEN (AMD_CBS_STR_UART_3_LEGACY_OPTIONS),
            help        = STRING_TOKEN (AMD_CBS_STR_UART_3_LEGACY_OPTIONS_HELP),
            option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_0X2E8),           value = 1,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_0X2F8),           value = 2,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_0X3E8),           value = 3,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_0X3F8),           value = 4,    flags = 0 | RESET_REQUIRED;
            option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED;
          endoneof;
        endif;

      endform;
      //
      // form - ESPI Configuration Options
      //
      form

        formid        = SETUP_ESPI_CONFIGURATION_OPTIONS_LABLE,

        title         = STRING_TOKEN (AMD_CBS_STR_ESPI_CONFIGURATION_OPTIONS_SECTION);

        subtitle text = STRING_TOKEN (AMD_CBS_STR_ESPI_CONFIGURATION_OPTIONS_SECTION);
        subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

        // ESPI Enable
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsCmnFchEspiConfig,
          prompt      = STRING_TOKEN (AMD_CBS_STR_ESPI_ENABLE),
          help        = STRING_TOKEN (AMD_CBS_STR_ESPI_ENABLE_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

      endform;
      //
      // form - XGBE Configuration Options
      //
      form

        formid        = SETUP_XGBE_CONFIGURATION_OPTIONS_LABLE,

        title         = STRING_TOKEN (AMD_CBS_STR_XGBE_CONFIGURATION_OPTIONS_SECTION);

        subtitle text = STRING_TOKEN (AMD_CBS_STR_XGBE_CONFIGURATION_OPTIONS_SECTION);
        subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

        // XGBE0 enable
        // Enable or disable Ethernet controller.
        oneof
          varid       = CBS_CONFIG.CbsCmnFchXgbe0Enable,
          prompt      = STRING_TOKEN (AMD_CBS_STR_XGBE0_ENABLE),
          help        = STRING_TOKEN (AMD_CBS_STR_XGBE0_ENABLE_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // XGBE1 enable
        // Enable or disable Ethernet controller.
        oneof
          varid       = CBS_CONFIG.CbsCmnFchXgbe1Enable,
          prompt      = STRING_TOKEN (AMD_CBS_STR_XGBE1_ENABLE),
          help        = STRING_TOKEN (AMD_CBS_STR_XGBE1_ENABLE_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

      endform;
      //
      // form - eMMC Options
      //
      form

        formid        = SETUP_EMMC_OPTIONS_LABLE,

        title         = STRING_TOKEN (AMD_CBS_STR_EMMC_OPTIONS_SECTION);

        subtitle text = STRING_TOKEN (AMD_CBS_STR_EMMC_OPTIONS_SECTION);
        subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

        // eMMC/SD Configure
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsDbgFchEmmcEnable,
          prompt      = STRING_TOKEN (AMD_CBS_STR_EMMC_SD_CONFIGURE),
          help        = STRING_TOKEN (AMD_CBS_STR_EMMC_SD_CONFIGURE_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_SD_NORMAL_SPEED), value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_SD_HIGH_SPEED),   value = 2,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_SD_UHSI_SDR50),   value = 3,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_SD_UHSI_DDR50),   value = 4,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_SD_UHSI_SDR104),  value = 5,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_EMMC_EMMC_BACKWARD_COMPATIBILITY), value = 6,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_EMMC_HIGH_SPEED_SDR), value = 7,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_EMMC_HIGH_SPEED_DDR), value = 8,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_EMMC_HS200),      value = 9,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_EMMC_HS400),      value = 10,   flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_EMMC_HS300),      value = 11,   flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // Driver Type
        // Bios will select MS driver for SD selections.
        oneof
          varid       = CBS_CONFIG.CbsDbgFchEmmcDriverType,
          prompt      = STRING_TOKEN (AMD_CBS_STR_DRIVER_TYPE),
          help        = STRING_TOKEN (AMD_CBS_STR_DRIVER_TYPE_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_AMD_EMMC_DRIVER), value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_MS_DRIVER),       value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_MS_EMMC_DRIVER),  value = 2,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // D3 Cold Support
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsDbgFchEmmcD3Support,
          prompt      = STRING_TOKEN (AMD_CBS_STR_D3_COLD_SUPPORT),
          help        = STRING_TOKEN (AMD_CBS_STR_D3_COLD_SUPPORT_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // eMMC Boot
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsDbgFchEmmcBoot,
          prompt      = STRING_TOKEN (AMD_CBS_STR_EMMC_BOOT),
          help        = STRING_TOKEN (AMD_CBS_STR_EMMC_BOOT_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

      endform;
      //
      // form - LPC Options
      //
      form

        formid        = SETUP_LPC_OPTIONS_LABLE,

        title         = STRING_TOKEN (AMD_CBS_STR_LPC_OPTIONS_SECTION);

        subtitle text = STRING_TOKEN (AMD_CBS_STR_LPC_OPTIONS_SECTION);
        subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

        // LPC Clock Run control
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsCmnFchLpcClockRunEn,
          prompt      = STRING_TOKEN (AMD_CBS_STR_LPC_CLOCK_RUN_CONTROL),
          help        = STRING_TOKEN (AMD_CBS_STR_LPC_CLOCK_RUN_CONTROL_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

      endform;
      //
      // form - System Control
      //
      form

        formid        = SETUP_SYSTEM_CONTROL_LABLE,

        title         = STRING_TOKEN (AMD_CBS_STR_SYSTEM_CONTROL_SECTION);

        subtitle text = STRING_TOKEN (AMD_CBS_STR_SYSTEM_CONTROL_SECTION);
        subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

        // Toggle All PwrGood On Cf9
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsCmnToggleAllPwrGoodOnCf9,
          prompt      = STRING_TOKEN (AMD_CBS_STR_TOGGLE_ALL_PWRGOOD_ON_CF9),
          help        = STRING_TOKEN (AMD_CBS_STR_TOGGLE_ALL_PWRGOOD_ON_CF9_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 2,    flags = DEFAULT | RESET_REQUIRED;
        endoneof;

      endform;
    #ifdef PROMONTORY_SUPPORT
    //
    // form - Promontory Common Options
    //
    form

      formid        = SETUP_PROMONTORY_COMMON_OPTIONS_LABLE,

      title         = STRING_TOKEN (AMD_CBS_STR_PROMONTORY_COMMON_OPTIONS_SECTION);

      subtitle text = STRING_TOKEN (AMD_CBS_STR_PROMONTORY_COMMON_OPTIONS_SECTION);
      subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

      goto SETUP_PT_SATA_CONFIGURATION_OPTIONS_LABLE,
        prompt      = STRING_TOKEN (AMD_CBS_STR_PT_SATA_CONFIGURATION_OPTIONS_SECTION),
        help        = STRING_TOKEN (AMD_CBS_STR_PT_SATA_CONFIGURATION_OPTIONS_SECTION);

      goto SETUP_PT_SATA_PORT_CONFIGURATION_OPTION_LABLE,
        prompt      = STRING_TOKEN (AMD_CBS_STR_PT_SATA_PORT_CONFIGURATION_OPTION_SECTION),
        help        = STRING_TOKEN (AMD_CBS_STR_PT_SATA_PORT_CONFIGURATION_OPTION_SECTION);

      goto SETUP_PT_USB_CONFIGURATION_OPTIONS_LABLE,
        prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB_CONFIGURATION_OPTIONS_SECTION),
        help        = STRING_TOKEN (AMD_CBS_STR_PT_USB_CONFIGURATION_OPTIONS_SECTION);

      goto SETUP_PROM3_4_5_6_7_USB_PORT_CONFIGURATION_OPTIONS_LABLE,
        prompt      = STRING_TOKEN (AMD_CBS_STR_PROM3_4_5_6_7_USB_PORT_CONFIGURATION_OPTIONS_SECTION),
        help        = STRING_TOKEN (AMD_CBS_STR_PROM3_4_5_6_7_USB_PORT_CONFIGURATION_OPTIONS_SECTION);

      goto SETUP_PROM2_8_9_USB_PORT_CONFIGURATION_OPTIONS_LABLE,
        prompt      = STRING_TOKEN (AMD_CBS_STR_PROM2_8_9_USB_PORT_CONFIGURATION_OPTIONS_SECTION),
        help        = STRING_TOKEN (AMD_CBS_STR_PROM2_8_9_USB_PORT_CONFIGURATION_OPTIONS_SECTION);

      goto SETUP_PROM1_USB_PORT_CONFIGURATION_OPTIONS_LABLE,
        prompt      = STRING_TOKEN (AMD_CBS_STR_PROM1_USB_PORT_CONFIGURATION_OPTIONS_SECTION),
        help        = STRING_TOKEN (AMD_CBS_STR_PROM1_USB_PORT_CONFIGURATION_OPTIONS_SECTION);

      goto SETUP_PT_PCIE_PORT_CONFIGURATION_OPTION_LABLE,
        prompt      = STRING_TOKEN (AMD_CBS_STR_PT_PCIE_PORT_CONFIGURATION_OPTION_SECTION),
        help        = STRING_TOKEN (AMD_CBS_STR_PT_PCIE_PORT_CONFIGURATION_OPTION_SECTION);

    endform;
    #endif


      #ifdef PROMONTORY_SUPPORT
      //
      // form - PT SATA Configuration Options
      //
      form

        formid        = SETUP_PT_SATA_CONFIGURATION_OPTIONS_LABLE,

        title         = STRING_TOKEN (AMD_CBS_STR_PT_SATA_CONFIGURATION_OPTIONS_SECTION);

        subtitle text = STRING_TOKEN (AMD_CBS_STR_PT_SATA_CONFIGURATION_OPTIONS_SECTION);
        subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

        // PT SATA Mode
        // Select Promontory SATA Type
        oneof
          varid       = CBS_CONFIG.CbsCmnPTSataClass,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PT_SATA_MODE),
          help        = STRING_TOKEN (AMD_CBS_STR_PT_SATA_MODE_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_AHCI),            value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_RAID),            value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // PT Aggresive SATA Device Sleep Port 0
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsDbgPTSataAggresiveDevSlpP0,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PT_AGGRESIVE_SATA_DEVICE_SLEEP_PORT_0),
          help        = STRING_TOKEN (AMD_CBS_STR_PT_AGGRESIVE_SATA_DEVICE_SLEEP_PORT_0_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // PT Aggresive SATA Device Sleep Port 1
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsDbgPTSataAggresiveDevSlpP1,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PT_AGGRESIVE_SATA_DEVICE_SLEEP_PORT_1),
          help        = STRING_TOKEN (AMD_CBS_STR_PT_AGGRESIVE_SATA_DEVICE_SLEEP_PORT_1_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

      endform;
      #endif


      #ifdef PROMONTORY_SUPPORT
      //
      // form - PT SATA Port Configuration Option
      //
      form

        formid        = SETUP_PT_SATA_PORT_CONFIGURATION_OPTION_LABLE,

        title         = STRING_TOKEN (AMD_CBS_STR_PT_SATA_PORT_CONFIGURATION_OPTION_SECTION);

        subtitle text = STRING_TOKEN (AMD_CBS_STR_PT_SATA_PORT_CONFIGURATION_OPTION_SECTION);
        subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

        // PT SATA Port 0 Enable
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsCmnPTSataPort0Enable,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PT_SATA_PORT_0_ENABLE),
          help        = STRING_TOKEN (AMD_CBS_STR_PT_SATA_PORT_0_ENABLE_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // PT SATA Port 1 Enable
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsCmnPTSataPort1Enable,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PT_SATA_PORT_1_ENABLE),
          help        = STRING_TOKEN (AMD_CBS_STR_PT_SATA_PORT_1_ENABLE_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // PT SATA Port 2 Enable
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsCmnPTSataPort2Enable,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PT_SATA_PORT_2_ENABLE),
          help        = STRING_TOKEN (AMD_CBS_STR_PT_SATA_PORT_2_ENABLE_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // PT SATA Port 3 Enable
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsCmnPTSataPort3Enable,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PT_SATA_PORT_3_ENABLE),
          help        = STRING_TOKEN (AMD_CBS_STR_PT_SATA_PORT_3_ENABLE_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // PT SATA Port 4 Enable
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsCmnPTSataPort4Enable,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PT_SATA_PORT_4_ENABLE),
          help        = STRING_TOKEN (AMD_CBS_STR_PT_SATA_PORT_4_ENABLE_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // PT SATA Port 5 Enable
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsCmnPTSataPort5Enable,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PT_SATA_PORT_5_ENABLE),
          help        = STRING_TOKEN (AMD_CBS_STR_PT_SATA_PORT_5_ENABLE_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // PT SATA Port 6 Enable
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsCmnPTSataPort6Enable,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PT_SATA_PORT_6_ENABLE),
          help        = STRING_TOKEN (AMD_CBS_STR_PT_SATA_PORT_6_ENABLE_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // PT SATA Port 7 Enable
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsCmnPTSataPort7Enable,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PT_SATA_PORT_7_ENABLE),
          help        = STRING_TOKEN (AMD_CBS_STR_PT_SATA_PORT_7_ENABLE_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

      endform;
      #endif


      #ifdef PROMONTORY_SUPPORT
      //
      // form - PT USB Configuration Options
      //
      form

        formid        = SETUP_PT_USB_CONFIGURATION_OPTIONS_LABLE,

        title         = STRING_TOKEN (AMD_CBS_STR_PT_USB_CONFIGURATION_OPTIONS_SECTION);

        subtitle text = STRING_TOKEN (AMD_CBS_STR_PT_USB_CONFIGURATION_OPTIONS_SECTION);
        subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

        // PT XHCI GEN1
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsDbgPTXhciGen1,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PT_XHCI_GEN1),
          help        = STRING_TOKEN (AMD_CBS_STR_PT_XHCI_GEN1_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // PT XHCI GEN2
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsDbgPTXhciGen2,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PT_XHCI_GEN2),
          help        = STRING_TOKEN (AMD_CBS_STR_PT_XHCI_GEN2_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // PT USB Equalization4
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsDbgPTUsbEqualization4,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB_EQUALIZATION4),
          help        = STRING_TOKEN (AMD_CBS_STR_PT_USB_EQUALIZATION4_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // PT USB Redriver
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsDbgPTUsbRedriver,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB_REDRIVER),
          help        = STRING_TOKEN (AMD_CBS_STR_PT_USB_REDRIVER_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

      endform;
      #endif


      #ifdef PROMONTORY_SUPPORT
      //
      // form - PROM3/4/5/6/7 USB Port Configuration Options
      //
      form

        formid        = SETUP_PROM3_4_5_6_7_USB_PORT_CONFIGURATION_OPTIONS_LABLE,

        title         = STRING_TOKEN (AMD_CBS_STR_PROM3_4_5_6_7_USB_PORT_CONFIGURATION_OPTIONS_SECTION);

        subtitle text = STRING_TOKEN (AMD_CBS_STR_PROM3_4_5_6_7_USB_PORT_CONFIGURATION_OPTIONS_SECTION);
        subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

        // PT USB31 PORT0
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsDbgPTUsb31P0,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB31_PORT0),
          help        = STRING_TOKEN (AMD_CBS_STR_PT_USB31_PORT0_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // PT USB31 PORT1
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsDbgPTUsb31P1,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB31_PORT1),
          help        = STRING_TOKEN (AMD_CBS_STR_PT_USB31_PORT1_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // PT USB30 PORT0
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsDbgPTUsb30P0,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB30_PORT0),
          help        = STRING_TOKEN (AMD_CBS_STR_PT_USB30_PORT0_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // PT USB30 PORT1
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsDbgPTUsb30P1,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB30_PORT1),
          help        = STRING_TOKEN (AMD_CBS_STR_PT_USB30_PORT1_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // PT USB30 PORT2
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsDbgPTUsb30P2,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB30_PORT2),
          help        = STRING_TOKEN (AMD_CBS_STR_PT_USB30_PORT2_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // PT USB30 PORT3
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsDbgPTUsb30P3,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB30_PORT3),
          help        = STRING_TOKEN (AMD_CBS_STR_PT_USB30_PORT3_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // PT USB30 PORT4
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsDbgPTUsb30P4,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB30_PORT4),
          help        = STRING_TOKEN (AMD_CBS_STR_PT_USB30_PORT4_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // PT USB30 PORT5
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsDbgPTUsb30P5,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB30_PORT5),
          help        = STRING_TOKEN (AMD_CBS_STR_PT_USB30_PORT5_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // PT USB20 PORT0
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsDbgPTUsb20P0,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT0),
          help        = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT0_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // PT USB20 PORT1
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsDbgPTUsb20P1,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT1),
          help        = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT1_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // PT USB20 PORT2
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsDbgPTUsb20P2,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT2),
          help        = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT2_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // PT USB20 PORT3
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsDbgPTUsb20P3,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT3),
          help        = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT3_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // PT USB20 PORT4
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsDbgPTUsb20P4,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT4),
          help        = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT4_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // PT USB20 PORT5
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsDbgPTUsb20P5,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT5),
          help        = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT5_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

      endform;
      #endif


      #ifdef PROMONTORY_SUPPORT
      //
      // form - PROM2/8/9 USB Port Configuration Options
      //
      form

        formid        = SETUP_PROM2_8_9_USB_PORT_CONFIGURATION_OPTIONS_LABLE,

        title         = STRING_TOKEN (AMD_CBS_STR_PROM2_8_9_USB_PORT_CONFIGURATION_OPTIONS_SECTION);

        subtitle text = STRING_TOKEN (AMD_CBS_STR_PROM2_8_9_USB_PORT_CONFIGURATION_OPTIONS_SECTION);
        subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

        // PT USB31 PORT0
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsDbgPTProm2Usb31P0,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB31_PORT0),
          help        = STRING_TOKEN (AMD_CBS_STR_PT_USB31_PORT0_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // PT USB31 PORT1
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsDbgPTProm2Usb31P1,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB31_PORT1),
          help        = STRING_TOKEN (AMD_CBS_STR_PT_USB31_PORT1_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // PT USB30 PORT0
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsDbgPTProm2Usb30P0,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB30_PORT0),
          help        = STRING_TOKEN (AMD_CBS_STR_PT_USB30_PORT0_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // PT USB30 PORT1
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsDbgPTProm2Usb30P1,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB30_PORT1),
          help        = STRING_TOKEN (AMD_CBS_STR_PT_USB30_PORT1_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // PT USB20 PORT0
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsDbgPTProm2Usb20P0,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT0),
          help        = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT0_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // PT USB20 PORT1
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsDbgPTProm2Usb20P1,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT1),
          help        = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT1_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // PT USB20 PORT2
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsDbgPTProm2Usb20P2,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT2),
          help        = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT2_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // PT USB20 PORT3
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsDbgPTProm2Usb20P3,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT3),
          help        = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT3_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // PT USB20 PORT4
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsDbgPTProm2Usb20P4,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT4),
          help        = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT4_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // PT USB20 PORT5
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsDbgPTProm2Usb20P5,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT5),
          help        = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT5_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

      endform;
      #endif


      #ifdef PROMONTORY_SUPPORT
      //
      // form - PROM1 USB Port Configuration Options
      //
      form

        formid        = SETUP_PROM1_USB_PORT_CONFIGURATION_OPTIONS_LABLE,

        title         = STRING_TOKEN (AMD_CBS_STR_PROM1_USB_PORT_CONFIGURATION_OPTIONS_SECTION);

        subtitle text = STRING_TOKEN (AMD_CBS_STR_PROM1_USB_PORT_CONFIGURATION_OPTIONS_SECTION);
        subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

        // PT USB31 PORT0
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsDbgPTProm1Usb31P0,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB31_PORT0),
          help        = STRING_TOKEN (AMD_CBS_STR_PT_USB31_PORT0_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // PT USB31 PORT1
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsDbgPTProm1Usb31P1,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB31_PORT1),
          help        = STRING_TOKEN (AMD_CBS_STR_PT_USB31_PORT1_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // PT USB30 PORT0
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsDbgPTProm1Usb30P0,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB30_PORT0),
          help        = STRING_TOKEN (AMD_CBS_STR_PT_USB30_PORT0_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // PT USB20 PORT0
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsDbgPTProm1Usb20P0,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT0),
          help        = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT0_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // PT USB20 PORT1
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsDbgPTProm1Usb20P1,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT1),
          help        = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT1_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // PT USB20 PORT2
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsDbgPTProm1Usb20P2,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT2),
          help        = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT2_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // PT USB20 PORT3
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsDbgPTProm1Usb20P3,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT3),
          help        = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT3_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // PT USB20 PORT4
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsDbgPTProm1Usb20P4,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT4),
          help        = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT4_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // PT USB20 PORT5
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsDbgPTProm1Usb20P5,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT5),
          help        = STRING_TOKEN (AMD_CBS_STR_PT_USB20_PORT5_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLE),         value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLE),          value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xF,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

      endform;
      #endif


      #ifdef PROMONTORY_SUPPORT
      //
      // form - PT PCIE Port Configuration Option
      //
      form

        formid        = SETUP_PT_PCIE_PORT_CONFIGURATION_OPTION_LABLE,

        title         = STRING_TOKEN (AMD_CBS_STR_PT_PCIE_PORT_CONFIGURATION_OPTION_SECTION);

        subtitle text = STRING_TOKEN (AMD_CBS_STR_PT_PCIE_PORT_CONFIGURATION_OPTION_SECTION);
        subtitle text = STRING_TOKEN (AMD_CBS_STR_BLANK);

        // PT PCIE Port 0 Enable
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsCmnPTPciePort0Enable,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PT_PCIE_PORT_0_ENABLE),
          help        = STRING_TOKEN (AMD_CBS_STR_PT_PCIE_PORT_0_ENABLE_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // PT PCIE Port 1 Enable
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsCmnPTPciePort1Enable,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PT_PCIE_PORT_1_ENABLE),
          help        = STRING_TOKEN (AMD_CBS_STR_PT_PCIE_PORT_1_ENABLE_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // PT PCIE Port 2 Enable
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsCmnPTPciePort2Enable,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PT_PCIE_PORT_2_ENABLE),
          help        = STRING_TOKEN (AMD_CBS_STR_PT_PCIE_PORT_2_ENABLE_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // PT PCIE Port 3 Enable
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsCmnPTPciePort3Enable,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PT_PCIE_PORT_3_ENABLE),
          help        = STRING_TOKEN (AMD_CBS_STR_PT_PCIE_PORT_3_ENABLE_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // PT PCIE Port 4 Enable
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsCmnPTPciePort4Enable,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PT_PCIE_PORT_4_ENABLE),
          help        = STRING_TOKEN (AMD_CBS_STR_PT_PCIE_PORT_4_ENABLE_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // PT PCIE Port 5 Enable
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsCmnPTPciePort5Enable,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PT_PCIE_PORT_5_ENABLE),
          help        = STRING_TOKEN (AMD_CBS_STR_PT_PCIE_PORT_5_ENABLE_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // PT PCIE Port 6 Enable
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsCmnPTPciePort6Enable,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PT_PCIE_PORT_6_ENABLE),
          help        = STRING_TOKEN (AMD_CBS_STR_PT_PCIE_PORT_6_ENABLE_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        // PT PCIE Port 7 Enable
        // No help string
        oneof
          varid       = CBS_CONFIG.CbsCmnPTPciePort7Enable,
          prompt      = STRING_TOKEN (AMD_CBS_STR_PT_PCIE_PORT_7_ENABLE),
          help        = STRING_TOKEN (AMD_CBS_STR_PT_PCIE_PORT_7_ENABLE_HELP),
          option text = STRING_TOKEN (AMD_CBS_STR_DISABLED),        value = 0,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_ENABLED),         value = 1,    flags = 0 | RESET_REQUIRED;
          option text = STRING_TOKEN (AMD_CBS_STR_AUTO),            value = 0xf,  flags = DEFAULT | RESET_REQUIRED;
        endoneof;

      endform;
      #endif


endformset;