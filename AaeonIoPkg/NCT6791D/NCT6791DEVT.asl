// THIS FILE IS INCLUDED to South Bridge device scope
//*************************************************************************
//*************************************************************************
//**                                                                     **
//**        (C)Copyright 1985-2013, American Megatrends, Inc.            **
//**                                                                     **
//**                       All Rights Reserved.                          **
//**                                                                     **
//**      5555 Oakbrook Parkway, Suite 200, Norcross, GA 30093           **
//**                                                                     **
//**                       Phone: (770)-246-8600                         **
//**                                                                     **
//*************************************************************************
//*************************************************************************
//<AMI_FHDR_START>
//
// Name:  <NCT6791DEVT.asl>
//
// Description: Define Event Handler For Super IO
//
//<AMI_FHDR_END>
//*************************************************************************
//Scope(\_SB.PCI0.SBRG) {
//-----------------------------------------------------------------------
// SET OF COMMON DATA/CONTROL METHODS USED FOR ALL LDN BASED SIO DEVICES
//-----------------------------------------------------------------------
// SIO specific: SIOS - SIO Chipset specific code called from _PTS
// SIO specific: SIOW - SIO Chipset specific code called from _WAK
// SIO specific: SIOH - SIO event handler, to be called from correspondent _Lxx method
// SIO specific: PowerResources & _PR0 object to control Power management for FDC, LPT, UART1,2.


//-------------------------------------------------------------------------
// SIO_PME WAKE UP EVENTS //
//-------------------------------------------------------------------------
// Following code is the workaround for wake up on RI/Key/Mouse events
// are generated by some SuperIO. The wake up signal (SIO_PME) is
// connected to one of GPIOs of south bridge chip.
// Make sure the correspondent GPIO in south bridge is enabled to generate an SCI
//-------------------------------------------------------------------------
// Add Flag for Fix WakeUp Switch bug. 
Name(PMFG, 0x00)    //PME wake ststus

//-------------------------------------------------------------------------
// SIOS - SIO Chipset specific code called from _PTS
//-------------------------------------------------------------------------
// input  - Arg0 : Sleep state #
// output - nothing
//-------------------------------------------------------------------------
Method(SIOS, 1){
    // Aware wake up events in SIO chip
    Store("SIOS", Debug)

    //AMI_TODO: 
    // 1. select sleep state
    If(LNotEqual(0x05, Arg0)){
        ^ENFG(0x0A)                        //Set Logical Device 0A (PME)

// 2. enable wake-up ; Enable Keyboard, PS/2 Mouse
        //Below is for S1 status
        If(LEqual(Arg0, One))
        {
            And(^OPT6, 0xCF, ^OPT6)
            if(\KBFG){
                Or(^OPT6, 0x10, ^OPT6)    //enable Keyboard Wake-up bit
            }        
            Else{
                And(^OPT6, 0xEF, ^OPT6)   //disable Keyboard Wake-up bit
            }
            if(\MSFG){
                Or(^OPT6, 0x20, ^OPT6)    //enable Mouse Wake-up bit
            }        
            Else{
                And(^OPT6, 0xDF, ^OPT6)   //disable Mouse Wake-up bit
            }

            //clear PME Status
            Store(0xFF, ^OPT3)                 //Clear I/O PME# Status
            Store(0xFF, ^OPT4)

            Or(^OPT2, 0x01, ^OPT2)        //Enable PME# ,set bit0     
        }

        //Below is for S3-S5 status
        If(LGreaterEqual(Arg0, 0x03))
        {
            And(^RGE0, 0x9F, ^RGE0)       //Clear the KB/MS wakeup bit.
            //Store(Zero, ^RGE1)
            //Store(Zero, ^RGE2)
            Store(^RGE3, Local0)               //Read-clear status
            Sleep(0xC8)
            If(KBFG)
            {
                Or(^RGE0, 0x41, ^RGE0)    //Enable Keyboard Wake-up bit
            }
            Else{
                And(^RGE0, 0xBE, ^RGE0)   //disable Keyboard Wake-up bit
            }
            If(MSFG)
            {
                Or(^RGE0, 0x22, ^RGE0)    //Enable Mouse Wake-up bit
            }
            Else{
                And(^RGE0, 0xDD, ^RGE0)   //disable Mouse Wake-up bit
            }

            Or(^RGE4, 0x01, ^RGE4)        //Enable PSOUT, set bit0     
        } 
      
        ^EXFG()
    }
}

//-----------------------------------------------------------------------
// SIOW - SIO Chipset specific code called from _WAK
//-----------------------------------------------------------------------
// input  - Sleep State #
// output - nothing
//-----------------------------------------------------------------------
Method(SIOW, 1){
    Store("SIOW", Debug)

    //AMI_TODO: 
    ^ENFG(0x0A)                    //Set Logical Device 04 (PME)

// 1. Clear Status
// Clear logical devices status, then clear global PME# status
    If(LEqual(Arg0, One)){
        Store(^OPT3, PMFG)                     //PMFG=PME#  Wake Status
        Store(0xFF, ^OPT3)                     //Clear I/O PME# Status
        And(^OPT6, 0xCF, ^OPT6)           //Clear the KB/MS wakeup bit.
        And(^OPT2, 0xFE, ^OPT2)           //Disable PME#, clear bit0        
    }
    If(LGreaterEqual(Arg0, 0x03)){
        Store(^RGE3, PMFG)                     //PMFG=PSOUT#  Wake Status
        Store(^RGE3, Local0)                   //Read-clear status
        And(^RGE0, 0x9F, ^RGE0)           //Clear the KB/MS wakeup bit.
        And(^RGE4, 0xFE, ^RGE4)           //Disable PSOUT#, clear bit0     
    }
    ^EXFG()
}

//-----------------------------------------------------------------------
// SIOH - SIO event handler, to be called from correspondent _Lxx method
// in order to serve the SIO chipset side of wake up event
//-----------------------------------------------------------------------
// input  - nothing
// output - nothing
//-----------------------------------------------------------------------
Method(SIOH, 0){
    If(And(PMFG, 0x08)){
        #if NCT6791D_KEYBOARD_PRESENT
        Notify(PS2K, 0x2)    //KBD Wake up
        #endif
    }
    If(And(PMFG, 0x10)){
        #if NCT6791D_MOUSE_PRESENT
        Notify(PS2M, 0x2)    //MOUSE Wake up
        #endif
    }
}    //End Of SIOH

//*************************************************************************
//*************************************************************************
//**                                                                     **
//**        (C)Copyright 1985-2013, American Megatrends, Inc.            **
//**                                                                     **
//**                       All Rights Reserved.                          **
//**                                                                     **
//**      5555 Oakbrook Parkway, Suite 200, Norcross, GA 30093           **
//**                                                                     **
//**                       Phone: (770)-246-8600                         **
//**                                                                     **
//*************************************************************************
//*************************************************************************



