//**********************************************************************
//
// Name:  <NCT6791DGpioSetup.sd>
//
// Description: SIO Form Template, Setup screen definition file
//
//**********************************************************************
//
#ifdef SETUP_DATA_DEFINITION
/***********************************************************/
/* Put NVRAM data definitions here.
/* For example:    UINT8 Data1;
/* These definitions will be converted by the build process
/* to a definitions of SETUP_DATA fields.
/***********************************************************/
    // Deep S5
    UINT8 NCT6791DDeepS5;

    // Restore On AC Power Loss
    UINT8 NCT6791D_AC_PWR_LOSS;

    // RS485 
    UINT8 NCT6791D_UART_RS485_enable[2];
    UINT8 NCT6791D_UART_RS485_inv_sel[2];
    
    // GP0x
    UINT8 NCT6791D_GP0x_Type[8];	// 0: Output, 1: Input
    UINT8 NCT6791D_GP0x_Data[8];	// 0: Low,    1: High
    UINT8 NCT6791D_GP0x_Inv[8];		// 0: Normal, 1: Inverted
    // GP1x
    UINT8 NCT6791D_GP1x_Type[8];	// 0: Output, 1: Input
    UINT8 NCT6791D_GP1x_Data[8];	// 0: Low,    1: High
    UINT8 NCT6791D_GP1x_Inv[8];		// 0: Normal, 1: Inverted
    // GP2x
    UINT8 NCT6791D_GP2x_Type[8];	// 0: Output, 1: Input
    UINT8 NCT6791D_GP2x_Data[8];	// 0: Low,    1: High
    UINT8 NCT6791D_GP2x_Inv[8];		// 0: Normal, 1: Inverted
    // GP3x
    UINT8 NCT6791D_GP3x_Type[7];	// 0: Output, 1: Input
    UINT8 NCT6791D_GP3x_Data[7];	// 0: Low,    1: High
    UINT8 NCT6791D_GP3x_Inv[7];		// 0: Normal, 1: Inverted
    // GP4x
    UINT8 NCT6791D_GP4x_Type[8];	// 0: Output, 1: Input
    UINT8 NCT6791D_GP4x_Data[8];	// 0: Low,    1: High
    UINT8 NCT6791D_GP4x_Inv[8];		// 0: Normal, 1: Inverted
    // GP5x
    UINT8 NCT6791D_GP5x_Type[8];	// 0: Output, 1: Input
    UINT8 NCT6791D_GP5x_Data[8];	// 0: Low,    1: High
    UINT8 NCT6791D_GP5x_Inv[8];		// 0: Normal, 1: Inverted
    // GP6x
    UINT8 NCT6791D_GP6x_Type[8];	// 0: Output, 1: Input
    UINT8 NCT6791D_GP6x_Data[8];	// 0: Low,    1: High
    UINT8 NCT6791D_GP6x_Inv[8];		// 0: Normal, 1: Inverted
    // GP7x
    UINT8 NCT6791D_GP7x_Type[7];	// 0: Output, 1: Input
    UINT8 NCT6791D_GP7x_Data[7];	// 0: Low,    1: High
    UINT8 NCT6791D_GP7x_Inv[7];		// 0: Normal, 1: Inverted
    // GP8x
    UINT8 NCT6791D_GP8x_Type[8];	// 0: Output, 1: Input
    UINT8 NCT6791D_GP8x_Data[8];	// 0: Low,    1: High
    UINT8 NCT6791D_GP8x_Inv[8];		// 0: Normal, 1: Inverted
#endif //SETUP_DATA_DEFINITION

#if defined(VFRCOMPILE) && !defined(CONTROLS_ARE_DEFINED)
#define CONTROL_DEFINITION
#endif

#ifdef CONTROL_DEFINITION
	#define ONEOF_NCT6791D_DEEP_S5\
		oneof varid = SETUP_DATA.NCT6791DDeepS5,\
		  prompt  = STRING_TOKEN(STR_NCT6791D_EUP_ERP_PROMPT),\
		  help    = STRING_TOKEN(STR_NCT6791D_EUP_ERP_HELP),\
		  default = NCT6791D_DEEP_S5_DEFAULT,\
		  default = NCT6791D_DEEP_S5_DEFAULT, defaultstore = AmiMfgDefault,\
		  option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;\
		  option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;\
		endoneof;

	#define ONEOF_NCT6791D_AC_PWR_LOSS\
		oneof varid = SETUP_DATA.NCT6791D_AC_PWR_LOSS,\
		  prompt  = STRING_TOKEN(STR_NCT6791D_AC_PWR_LOSS),\
		  help    = STRING_TOKEN(STR_NCT6791D_AC_PWR_LOSS_HELP),\
		  default = NCT6791D_AC_PWR_LOSS_DEFAULT,\
		  default = NCT6791D_AC_PWR_LOSS_DEFAULT, defaultstore = AmiMfgDefault,\
		  option text = STRING_TOKEN(STR_NCT6791D_PWR_OFF), value = 0, flags = RESET_REQUIRED;\
		  option text = STRING_TOKEN(STR_NCT6791D_PWR_ON), value = 1, flags = RESET_REQUIRED;\
		  option text = STRING_TOKEN(STR_NCT6791D_LAST_STATE), value = 2, flags = RESET_REQUIRED;\
		  option text = STRING_TOKEN(STR_NCT6791D_BYPASS), value = 4, flags = RESET_REQUIRED;\
		endoneof;

	#define ONEOF_NCT6791D_UART_RS485_ENABLE(PORT_NUM, NCT6791D_UART_RS485_ENABLE_DEFAULT)\
		oneof varid = SETUP_DATA.NCT6791D_UART_RS485_enable[PORT_NUM],\
		  prompt  = STRING_TOKEN(STR_NCT6791D_RS485_EN),\
		  help    = STRING_TOKEN(STR_NCT6791D_RS485_EN_HELP),\
		  default = NCT6791D_UART_RS485_ENABLE_DEFAULT,\
		  default = NCT6791D_UART_RS485_ENABLE_DEFAULT, defaultstore = AmiMfgDefault,\
		  option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;\
		  option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;\
		endoneof;

	#define ONEOF_NCT6791D_UART_RS485_INV_SEL(PORT_NUM, NCT6791D_UART_RS485_INV_SEL_DEFAULT)\
		oneof varid = SETUP_DATA.NCT6791D_UART_RS485_inv_sel[PORT_NUM],\
		  prompt  = STRING_TOKEN(STR_NCT6791D_RS485_INV),\
		  help    = STRING_TOKEN(STR_NCT6791D_RS485_INV_HELP),\
		  default = NCT6791D_UART_RS485_INV_SEL_DEFAULT,\
		  default = NCT6791D_UART_RS485_INV_SEL_DEFAULT, defaultstore = AmiMfgDefault,\
		  option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;\
		  option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;\
		endoneof;

	#define ONEOF_NCT6791D_GP0X_TYPE(PIN_NUM, PIN_TYPE_DEFAULT) \
		oneof varid     = SETUP_DATA.NCT6791D_GP0x_Type[PIN_NUM], \
			prompt  = STRING_TOKEN(STR_GPIO_TYPE), \
			help    = STRING_TOKEN(STR_GPIO_TYPE_HELP), \
			default = PIN_TYPE_DEFAULT, \
			default = PIN_TYPE_DEFAULT, defaultstore = AmiMfgDefault, \
			option text = STRING_TOKEN(STR_GPIO_OUTPUT), value = 0, flags = RESET_REQUIRED; \
   	 		option text = STRING_TOKEN(STR_GPIO_INPUT), value = 1, flags = RESET_REQUIRED; \
		endoneof;

	#define ONEOF_NCT6791D_GP0X_DATA(PIN_NUM, PIN_DATA_DEFAULT) \
	      suppressif ideqval SETUP_DATA.NCT6791D_GP0x_Type[PIN_NUM] == 1; \
		oneof varid     = SETUP_DATA.NCT6791D_GP0x_Data[PIN_NUM], \
			prompt  = STRING_TOKEN(STR_GPIO_DATA), \
			help    = STRING_TOKEN(STR_GPIO_DATA_HELP), \
			default = PIN_DATA_DEFAULT, \
			default = PIN_DATA_DEFAULT, defaultstore = AmiMfgDefault, \
			option text = STRING_TOKEN(STR_GPIO_LOW), value = 0, flags = RESET_REQUIRED; \
   	 		option text = STRING_TOKEN(STR_GPIO_HIGH), value = 1, flags = RESET_REQUIRED; \
		endoneof;\
	      endif;

	#define ONEOF_NCT6791D_GP0X_INV(PIN_NUM, PIN_INV_DEFAULT) \
		oneof varid     = SETUP_DATA.NCT6791D_GP0x_Inv[PIN_NUM], \
			prompt  = STRING_TOKEN(STR_GPIO_INV), \
			help    = STRING_TOKEN(STR_GPIO_INV_HELP), \
			default = PIN_INV_DEFAULT, \
			default = PIN_INV_DEFAULT, defaultstore = AmiMfgDefault, \
			option text = STRING_TOKEN(STR_NORMAL), value = 0, flags = RESET_REQUIRED; \
   	 		option text = STRING_TOKEN(STR_INVERTED), value = 1, flags = RESET_REQUIRED; \
		endoneof;

	#define ONEOF_NCT6791D_GP1X_TYPE(PIN_NUM, PIN_TYPE_DEFAULT) \
		oneof varid     = SETUP_DATA.NCT6791D_GP1x_Type[PIN_NUM], \
			prompt  = STRING_TOKEN(STR_GPIO_TYPE), \
			help    = STRING_TOKEN(STR_GPIO_TYPE_HELP), \
			default = PIN_TYPE_DEFAULT, \
			default = PIN_TYPE_DEFAULT, defaultstore = AmiMfgDefault, \
			option text = STRING_TOKEN(STR_GPIO_OUTPUT), value = 0, flags = RESET_REQUIRED; \
   	 		option text = STRING_TOKEN(STR_GPIO_INPUT), value = 1, flags = RESET_REQUIRED; \
		endoneof;

	#define ONEOF_NCT6791D_GP1X_DATA(PIN_NUM, PIN_DATA_DEFAULT) \
	      suppressif ideqval SETUP_DATA.NCT6791D_GP1x_Type[PIN_NUM] == 1; \
		oneof varid     = SETUP_DATA.NCT6791D_GP1x_Data[PIN_NUM], \
			prompt  = STRING_TOKEN(STR_GPIO_DATA), \
			help    = STRING_TOKEN(STR_GPIO_DATA_HELP), \
			default = PIN_DATA_DEFAULT, \
			default = PIN_DATA_DEFAULT, defaultstore = AmiMfgDefault, \
			option text = STRING_TOKEN(STR_GPIO_LOW), value = 0, flags = RESET_REQUIRED; \
   	 		option text = STRING_TOKEN(STR_GPIO_HIGH), value = 1, flags = RESET_REQUIRED; \
		endoneof;\
	      endif;

	#define ONEOF_NCT6791D_GP1X_INV(PIN_NUM, PIN_INV_DEFAULT) \
		oneof varid     = SETUP_DATA.NCT6791D_GP1x_Inv[PIN_NUM], \
			prompt  = STRING_TOKEN(STR_GPIO_INV), \
			help    = STRING_TOKEN(STR_GPIO_INV_HELP), \
			default = PIN_INV_DEFAULT, \
			default = PIN_INV_DEFAULT, defaultstore = AmiMfgDefault, \
			option text = STRING_TOKEN(STR_NORMAL), value = 0, flags = RESET_REQUIRED; \
   	 		option text = STRING_TOKEN(STR_INVERTED), value = 1, flags = RESET_REQUIRED; \
		endoneof;

	#define ONEOF_NCT6791D_GP2X_TYPE(PIN_NUM, PIN_TYPE_DEFAULT) \
		oneof varid     = SETUP_DATA.NCT6791D_GP2x_Type[PIN_NUM], \
			prompt  = STRING_TOKEN(STR_GPIO_TYPE), \
			help    = STRING_TOKEN(STR_GPIO_TYPE_HELP), \
			default = PIN_TYPE_DEFAULT, \
			default = PIN_TYPE_DEFAULT, defaultstore = AmiMfgDefault, \
			option text = STRING_TOKEN(STR_GPIO_OUTPUT), value = 0, flags = RESET_REQUIRED; \
   	 		option text = STRING_TOKEN(STR_GPIO_INPUT), value = 1, flags = RESET_REQUIRED; \
		endoneof;

	#define ONEOF_NCT6791D_GP2X_DATA(PIN_NUM, PIN_DATA_DEFAULT) \
	      suppressif ideqval SETUP_DATA.NCT6791D_GP2x_Type[PIN_NUM] == 1; \
		oneof varid     = SETUP_DATA.NCT6791D_GP2x_Data[PIN_NUM], \
			prompt  = STRING_TOKEN(STR_GPIO_DATA), \
			help    = STRING_TOKEN(STR_GPIO_DATA_HELP), \
			default = PIN_DATA_DEFAULT, \
			default = PIN_DATA_DEFAULT, defaultstore = AmiMfgDefault, \
			option text = STRING_TOKEN(STR_GPIO_LOW), value = 0, flags = RESET_REQUIRED; \
   	 		option text = STRING_TOKEN(STR_GPIO_HIGH), value = 1, flags = RESET_REQUIRED; \
		endoneof;\
	      endif;

	#define ONEOF_NCT6791D_GP2X_INV(PIN_NUM, PIN_INV_DEFAULT) \
		oneof varid     = SETUP_DATA.NCT6791D_GP2x_Inv[PIN_NUM], \
			prompt  = STRING_TOKEN(STR_GPIO_INV), \
			help    = STRING_TOKEN(STR_GPIO_INV_HELP), \
			default = PIN_INV_DEFAULT, \
			default = PIN_INV_DEFAULT, defaultstore = AmiMfgDefault, \
			option text = STRING_TOKEN(STR_NORMAL), value = 0, flags = RESET_REQUIRED; \
   	 		option text = STRING_TOKEN(STR_INVERTED), value = 1, flags = RESET_REQUIRED; \
		endoneof;

	#define ONEOF_NCT6791D_GP3X_TYPE(PIN_NUM, PIN_TYPE_DEFAULT) \
		oneof varid     = SETUP_DATA.NCT6791D_GP3x_Type[PIN_NUM], \
			prompt  = STRING_TOKEN(STR_GPIO_TYPE), \
			help    = STRING_TOKEN(STR_GPIO_TYPE_HELP), \
			default = PIN_TYPE_DEFAULT, \
			default = PIN_TYPE_DEFAULT, defaultstore = AmiMfgDefault, \
			option text = STRING_TOKEN(STR_GPIO_OUTPUT), value = 0, flags = RESET_REQUIRED; \
   	 		option text = STRING_TOKEN(STR_GPIO_INPUT), value = 1, flags = RESET_REQUIRED; \
		endoneof;

	#define ONEOF_NCT6791D_GP3X_DATA(PIN_NUM, PIN_DATA_DEFAULT) \
	      suppressif ideqval SETUP_DATA.NCT6791D_GP3x_Type[PIN_NUM] == 1; \
		oneof varid     = SETUP_DATA.NCT6791D_GP3x_Data[PIN_NUM], \
			prompt  = STRING_TOKEN(STR_GPIO_DATA), \
			help    = STRING_TOKEN(STR_GPIO_DATA_HELP), \
			default = PIN_DATA_DEFAULT, \
			default = PIN_DATA_DEFAULT, defaultstore = AmiMfgDefault, \
			option text = STRING_TOKEN(STR_GPIO_LOW), value = 0, flags = RESET_REQUIRED; \
   	 		option text = STRING_TOKEN(STR_GPIO_HIGH), value = 1, flags = RESET_REQUIRED; \
		endoneof;\
	      endif;

	#define ONEOF_NCT6791D_GP3X_INV(PIN_NUM, PIN_INV_DEFAULT) \
		oneof varid     = SETUP_DATA.NCT6791D_GP3x_Inv[PIN_NUM], \
			prompt  = STRING_TOKEN(STR_GPIO_INV), \
			help    = STRING_TOKEN(STR_GPIO_INV_HELP), \
			default = PIN_INV_DEFAULT, \
			default = PIN_INV_DEFAULT, defaultstore = AmiMfgDefault, \
			option text = STRING_TOKEN(STR_NORMAL), value = 0, flags = RESET_REQUIRED; \
   	 		option text = STRING_TOKEN(STR_INVERTED), value = 1, flags = RESET_REQUIRED; \
		endoneof;

	#define ONEOF_NCT6791D_GP4X_TYPE(PIN_NUM, PIN_TYPE_DEFAULT) \
		oneof varid     = SETUP_DATA.NCT6791D_GP4x_Type[PIN_NUM], \
			prompt  = STRING_TOKEN(STR_GPIO_TYPE), \
			help    = STRING_TOKEN(STR_GPIO_TYPE_HELP), \
			default = PIN_TYPE_DEFAULT, \
			default = PIN_TYPE_DEFAULT, defaultstore = AmiMfgDefault, \
			option text = STRING_TOKEN(STR_GPIO_OUTPUT), value = 0, flags = RESET_REQUIRED; \
   	 		option text = STRING_TOKEN(STR_GPIO_INPUT), value = 1, flags = RESET_REQUIRED; \
		endoneof;

	#define ONEOF_NCT6791D_GP4X_DATA(PIN_NUM, PIN_DATA_DEFAULT) \
	      suppressif ideqval SETUP_DATA.NCT6791D_GP4x_Type[PIN_NUM] == 1; \
		oneof varid     = SETUP_DATA.NCT6791D_GP4x_Data[PIN_NUM], \
			prompt  = STRING_TOKEN(STR_GPIO_DATA), \
			help    = STRING_TOKEN(STR_GPIO_DATA_HELP), \
			default = PIN_DATA_DEFAULT, \
			default = PIN_DATA_DEFAULT, defaultstore = AmiMfgDefault, \
			option text = STRING_TOKEN(STR_GPIO_LOW), value = 0, flags = RESET_REQUIRED; \
   	 		option text = STRING_TOKEN(STR_GPIO_HIGH), value = 1, flags = RESET_REQUIRED; \
		endoneof;\
	      endif;

	#define ONEOF_NCT6791D_GP4X_INV(PIN_NUM, PIN_INV_DEFAULT) \
		oneof varid     = SETUP_DATA.NCT6791D_GP4x_Inv[PIN_NUM], \
			prompt  = STRING_TOKEN(STR_GPIO_INV), \
			help    = STRING_TOKEN(STR_GPIO_INV_HELP), \
			default = PIN_INV_DEFAULT, \
			default = PIN_INV_DEFAULT, defaultstore = AmiMfgDefault, \
			option text = STRING_TOKEN(STR_NORMAL), value = 0, flags = RESET_REQUIRED; \
   	 		option text = STRING_TOKEN(STR_INVERTED), value = 1, flags = RESET_REQUIRED; \
		endoneof;

	#define ONEOF_NCT6791D_GP5X_TYPE(PIN_NUM, PIN_TYPE_DEFAULT) \
		oneof varid     = SETUP_DATA.NCT6791D_GP5x_Type[PIN_NUM], \
			prompt  = STRING_TOKEN(STR_GPIO_TYPE), \
			help    = STRING_TOKEN(STR_GPIO_TYPE_HELP), \
			default = PIN_TYPE_DEFAULT, \
			default = PIN_TYPE_DEFAULT, defaultstore = AmiMfgDefault, \
			option text = STRING_TOKEN(STR_GPIO_OUTPUT), value = 0, flags = RESET_REQUIRED; \
   	 		option text = STRING_TOKEN(STR_GPIO_INPUT), value = 1, flags = RESET_REQUIRED; \
		endoneof;

	#define ONEOF_NCT6791D_GP5X_DATA(PIN_NUM, PIN_DATA_DEFAULT) \
	      suppressif ideqval SETUP_DATA.NCT6791D_GP5x_Type[PIN_NUM] == 1; \
		oneof varid     = SETUP_DATA.NCT6791D_GP5x_Data[PIN_NUM], \
			prompt  = STRING_TOKEN(STR_GPIO_DATA), \
			help    = STRING_TOKEN(STR_GPIO_DATA_HELP), \
			default = PIN_DATA_DEFAULT, \
			default = PIN_DATA_DEFAULT, defaultstore = AmiMfgDefault, \
			option text = STRING_TOKEN(STR_GPIO_LOW), value = 0, flags = RESET_REQUIRED; \
   	 		option text = STRING_TOKEN(STR_GPIO_HIGH), value = 1, flags = RESET_REQUIRED; \
		endoneof;\
	      endif;

	#define ONEOF_NCT6791D_GP5X_INV(PIN_NUM, PIN_INV_DEFAULT) \
		oneof varid     = SETUP_DATA.NCT6791D_GP5x_Inv[PIN_NUM], \
			prompt  = STRING_TOKEN(STR_GPIO_INV), \
			help    = STRING_TOKEN(STR_GPIO_INV_HELP), \
			default = PIN_INV_DEFAULT, \
			default = PIN_INV_DEFAULT, defaultstore = AmiMfgDefault, \
			option text = STRING_TOKEN(STR_NORMAL), value = 0, flags = RESET_REQUIRED; \
   	 		option text = STRING_TOKEN(STR_INVERTED), value = 1, flags = RESET_REQUIRED; \
		endoneof;

	#define ONEOF_NCT6791D_GP6X_TYPE(PIN_NUM, PIN_TYPE_DEFAULT) \
		oneof varid     = SETUP_DATA.NCT6791D_GP6x_Type[PIN_NUM], \
			prompt  = STRING_TOKEN(STR_GPIO_TYPE), \
			help    = STRING_TOKEN(STR_GPIO_TYPE_HELP), \
			default = PIN_TYPE_DEFAULT, \
			default = PIN_TYPE_DEFAULT, defaultstore = AmiMfgDefault, \
			option text = STRING_TOKEN(STR_GPIO_OUTPUT), value = 0, flags = RESET_REQUIRED; \
   	 		option text = STRING_TOKEN(STR_GPIO_INPUT), value = 1, flags = RESET_REQUIRED; \
		endoneof;

	#define ONEOF_NCT6791D_GP6X_DATA(PIN_NUM, PIN_DATA_DEFAULT) \
	      suppressif ideqval SETUP_DATA.NCT6791D_GP6x_Type[PIN_NUM] == 1; \
		oneof varid     = SETUP_DATA.NCT6791D_GP6x_Data[PIN_NUM], \
			prompt  = STRING_TOKEN(STR_GPIO_DATA), \
			help    = STRING_TOKEN(STR_GPIO_DATA_HELP), \
			default = PIN_DATA_DEFAULT, \
			default = PIN_DATA_DEFAULT, defaultstore = AmiMfgDefault, \
			option text = STRING_TOKEN(STR_GPIO_LOW), value = 0, flags = RESET_REQUIRED; \
   	 		option text = STRING_TOKEN(STR_GPIO_HIGH), value = 1, flags = RESET_REQUIRED; \
		endoneof;\
	      endif;

	#define ONEOF_NCT6791D_GP6X_INV(PIN_NUM, PIN_INV_DEFAULT) \
		oneof varid     = SETUP_DATA.NCT6791D_GP6x_Inv[PIN_NUM], \
			prompt  = STRING_TOKEN(STR_GPIO_INV), \
			help    = STRING_TOKEN(STR_GPIO_INV_HELP), \
			default = PIN_INV_DEFAULT, \
			default = PIN_INV_DEFAULT, defaultstore = AmiMfgDefault, \
			option text = STRING_TOKEN(STR_NORMAL), value = 0, flags = RESET_REQUIRED; \
   	 		option text = STRING_TOKEN(STR_INVERTED), value = 1, flags = RESET_REQUIRED; \
		endoneof;

	#define ONEOF_NCT6791D_GP7X_TYPE(PIN_NUM, PIN_TYPE_DEFAULT) \
		oneof varid     = SETUP_DATA.NCT6791D_GP7x_Type[PIN_NUM], \
			prompt  = STRING_TOKEN(STR_GPIO_TYPE), \
			help    = STRING_TOKEN(STR_GPIO_TYPE_HELP), \
			default = PIN_TYPE_DEFAULT, \
			default = PIN_TYPE_DEFAULT, defaultstore = AmiMfgDefault, \
			option text = STRING_TOKEN(STR_GPIO_OUTPUT), value = 0, flags = RESET_REQUIRED; \
   	 		option text = STRING_TOKEN(STR_GPIO_INPUT), value = 1, flags = RESET_REQUIRED; \
		endoneof;

	#define ONEOF_NCT6791D_GP7X_DATA(PIN_NUM, PIN_DATA_DEFAULT) \
	      suppressif ideqval SETUP_DATA.NCT6791D_GP7x_Type[PIN_NUM] == 1; \
		oneof varid     = SETUP_DATA.NCT6791D_GP7x_Data[PIN_NUM], \
			prompt  = STRING_TOKEN(STR_GPIO_DATA), \
			help    = STRING_TOKEN(STR_GPIO_DATA_HELP), \
			default = PIN_DATA_DEFAULT, \
			default = PIN_DATA_DEFAULT, defaultstore = AmiMfgDefault, \
			option text = STRING_TOKEN(STR_GPIO_LOW), value = 0, flags = RESET_REQUIRED; \
   	 		option text = STRING_TOKEN(STR_GPIO_HIGH), value = 1, flags = RESET_REQUIRED; \
		endoneof;\
	      endif;

	#define ONEOF_NCT6791D_GP7X_INV(PIN_NUM, PIN_INV_DEFAULT) \
		oneof varid     = SETUP_DATA.NCT6791D_GP7x_Inv[PIN_NUM], \
			prompt  = STRING_TOKEN(STR_GPIO_INV), \
			help    = STRING_TOKEN(STR_GPIO_INV_HELP), \
			default = PIN_INV_DEFAULT, \
			default = PIN_INV_DEFAULT, defaultstore = AmiMfgDefault, \
			option text = STRING_TOKEN(STR_NORMAL), value = 0, flags = RESET_REQUIRED; \
   	 		option text = STRING_TOKEN(STR_INVERTED), value = 1, flags = RESET_REQUIRED; \
		endoneof;

	#define ONEOF_NCT6791D_GP8X_TYPE(PIN_NUM, PIN_TYPE_DEFAULT) \
		oneof varid     = SETUP_DATA.NCT6791D_GP8x_Type[PIN_NUM], \
			prompt  = STRING_TOKEN(STR_GPIO_TYPE), \
			help    = STRING_TOKEN(STR_GPIO_TYPE_HELP), \
			default = PIN_TYPE_DEFAULT, \
			default = PIN_TYPE_DEFAULT, defaultstore = AmiMfgDefault, \
			option text = STRING_TOKEN(STR_GPIO_OUTPUT), value = 0, flags = RESET_REQUIRED; \
   	 		option text = STRING_TOKEN(STR_GPIO_INPUT), value = 1, flags = RESET_REQUIRED; \
		endoneof;

	#define ONEOF_NCT6791D_GP8X_DATA(PIN_NUM, PIN_DATA_DEFAULT) \
	      suppressif ideqval SETUP_DATA.NCT6791D_GP8x_Type[PIN_NUM] == 1; \
		oneof varid     = SETUP_DATA.NCT6791D_GP8x_Data[PIN_NUM], \
			prompt  = STRING_TOKEN(STR_GPIO_DATA), \
			help    = STRING_TOKEN(STR_GPIO_DATA_HELP), \
			default = PIN_DATA_DEFAULT, \
			default = PIN_DATA_DEFAULT, defaultstore = AmiMfgDefault, \
			option text = STRING_TOKEN(STR_GPIO_LOW), value = 0, flags = RESET_REQUIRED; \
   	 		option text = STRING_TOKEN(STR_GPIO_HIGH), value = 1, flags = RESET_REQUIRED; \
		endoneof;\
	      endif;

	#define ONEOF_NCT6791D_GP8X_INV(PIN_NUM, PIN_INV_DEFAULT) \
		oneof varid     = SETUP_DATA.NCT6791D_GP8x_Inv[PIN_NUM], \
			prompt  = STRING_TOKEN(STR_GPIO_INV), \
			help    = STRING_TOKEN(STR_GPIO_INV_HELP), \
			default = PIN_INV_DEFAULT, \
			default = PIN_INV_DEFAULT, defaultstore = AmiMfgDefault, \
			option text = STRING_TOKEN(STR_NORMAL), value = 0, flags = RESET_REQUIRED; \
   	 		option text = STRING_TOKEN(STR_INVERTED), value = 1, flags = RESET_REQUIRED; \
		endoneof;
#endif //#ifdef CONTROL_DEFINITION

#ifdef CONTROLS_WITH_DEFAULTS

#endif //#ifdef CONTROLS_WITH_DEFAULTS

	#define NCT6791D_UARTA_RS485_MODE \
		SUBTITLE(STRING_TOKEN(STR_NCT6791D_UARTA_MODE)) \
		ONEOF_NCT6791D_UART_RS485_ENABLE(0, NCT6791D_COM1_RS485_Mode) \
		ONEOF_NCT6791D_UART_RS485_INV_SEL(0, NCT6791D_COM1_RS485_RTS_INV)

	#define NCT6791D_UARTB_RS485_MODE \
		SUBTITLE(STRING_TOKEN(STR_NCT6791D_UARTB_MODE)) \
		ONEOF_NCT6791D_UART_RS485_ENABLE(1, NCT6791D_COM2_RS485_Mode) \
		ONEOF_NCT6791D_UART_RS485_INV_SEL(1, NCT6791D_COM2_RS485_RTS_INV)

	#define NCT6791D_GP0X_ITEMS(PIN_NUM, PIN_TYPE_DEFAULT, PIN_DATA_DEFAULT, PIN_INV_DEFAULT) \
		ONEOF_NCT6791D_GP0X_TYPE(PIN_NUM, PIN_TYPE_DEFAULT) \
		ONEOF_NCT6791D_GP0X_DATA(PIN_NUM, PIN_DATA_DEFAULT) \
		ONEOF_NCT6791D_GP0X_INV(PIN_NUM, PIN_INV_DEFAULT)

	#define NCT6791D_GP0X_GROUP \
		SUBTITLE(STRING_TOKEN(STR_GP00)) \
		NCT6791D_GP0X_ITEMS(0, NCT6791D_GP00_TYPE_DEFAULT, NCT6791D_GP00_DATA_DEFAULT, NCT6791D_GP00_INV_DEFAULT) \
		SUBTITLE(STRING_TOKEN(STR_GP01)) \
		NCT6791D_GP0X_ITEMS(1, NCT6791D_GP01_TYPE_DEFAULT, NCT6791D_GP01_DATA_DEFAULT, NCT6791D_GP01_INV_DEFAULT) \
		SUBTITLE(STRING_TOKEN(STR_GP02)) \
		NCT6791D_GP0X_ITEMS(2, NCT6791D_GP02_TYPE_DEFAULT, NCT6791D_GP02_DATA_DEFAULT, NCT6791D_GP02_INV_DEFAULT) \
		SUBTITLE(STRING_TOKEN(STR_GP03)) \
		NCT6791D_GP0X_ITEMS(3, NCT6791D_GP03_TYPE_DEFAULT, NCT6791D_GP03_DATA_DEFAULT, NCT6791D_GP03_INV_DEFAULT) \
		SUBTITLE(STRING_TOKEN(STR_GP04)) \
		NCT6791D_GP0X_ITEMS(4, NCT6791D_GP04_TYPE_DEFAULT, NCT6791D_GP04_DATA_DEFAULT, NCT6791D_GP04_INV_DEFAULT) \
		SUBTITLE(STRING_TOKEN(STR_GP05)) \
		NCT6791D_GP0X_ITEMS(5, NCT6791D_GP05_TYPE_DEFAULT, NCT6791D_GP05_DATA_DEFAULT, NCT6791D_GP05_INV_DEFAULT) \
		SUBTITLE(STRING_TOKEN(STR_GP06)) \
		NCT6791D_GP0X_ITEMS(6, NCT6791D_GP06_TYPE_DEFAULT, NCT6791D_GP06_DATA_DEFAULT, NCT6791D_GP06_INV_DEFAULT) \
		SUBTITLE(STRING_TOKEN(STR_GP07)) \
		NCT6791D_GP0X_ITEMS(7, NCT6791D_GP07_TYPE_DEFAULT, NCT6791D_GP07_DATA_DEFAULT, NCT6791D_GP07_INV_DEFAULT)

	#define NCT6791D_GP1X_ITEMS(PIN_NUM, PIN_TYPE_DEFAULT, PIN_DATA_DEFAULT, PIN_INV_DEFAULT) \
		ONEOF_NCT6791D_GP1X_TYPE(PIN_NUM, PIN_TYPE_DEFAULT) \
		ONEOF_NCT6791D_GP1X_DATA(PIN_NUM, PIN_DATA_DEFAULT) \
		ONEOF_NCT6791D_GP1X_INV(PIN_NUM, PIN_INV_DEFAULT)

	#define NCT6791D_GP1X_GROUP \
		SUBTITLE(STRING_TOKEN(STR_GP10)) \
		NCT6791D_GP1X_ITEMS(0, NCT6791D_GP10_TYPE_DEFAULT, NCT6791D_GP10_DATA_DEFAULT, NCT6791D_GP10_INV_DEFAULT) \
		SUBTITLE(STRING_TOKEN(STR_GP11)) \
		NCT6791D_GP1X_ITEMS(1, NCT6791D_GP11_TYPE_DEFAULT, NCT6791D_GP11_DATA_DEFAULT, NCT6791D_GP11_INV_DEFAULT) \
		SUBTITLE(STRING_TOKEN(STR_GP12)) \
		NCT6791D_GP1X_ITEMS(2, NCT6791D_GP12_TYPE_DEFAULT, NCT6791D_GP12_DATA_DEFAULT, NCT6791D_GP12_INV_DEFAULT) \
		SUBTITLE(STRING_TOKEN(STR_GP13)) \
		NCT6791D_GP1X_ITEMS(3, NCT6791D_GP13_TYPE_DEFAULT, NCT6791D_GP13_DATA_DEFAULT, NCT6791D_GP13_INV_DEFAULT) \
		SUBTITLE(STRING_TOKEN(STR_GP14)) \
		NCT6791D_GP1X_ITEMS(4, NCT6791D_GP14_TYPE_DEFAULT, NCT6791D_GP14_DATA_DEFAULT, NCT6791D_GP14_INV_DEFAULT) \
		SUBTITLE(STRING_TOKEN(STR_GP15)) \
		NCT6791D_GP1X_ITEMS(5, NCT6791D_GP15_TYPE_DEFAULT, NCT6791D_GP15_DATA_DEFAULT, NCT6791D_GP15_INV_DEFAULT) \
		SUBTITLE(STRING_TOKEN(STR_GP16)) \
		NCT6791D_GP1X_ITEMS(6, NCT6791D_GP16_TYPE_DEFAULT, NCT6791D_GP16_DATA_DEFAULT, NCT6791D_GP16_INV_DEFAULT) \
		SUBTITLE(STRING_TOKEN(STR_GP17)) \
		NCT6791D_GP1X_ITEMS(7, NCT6791D_GP17_TYPE_DEFAULT, NCT6791D_GP17_DATA_DEFAULT, NCT6791D_GP17_INV_DEFAULT)

	#define NCT6791D_GP2X_ITEMS(PIN_NUM, PIN_TYPE_DEFAULT, PIN_DATA_DEFAULT, PIN_INV_DEFAULT) \
		ONEOF_NCT6791D_GP2X_TYPE(PIN_NUM, PIN_TYPE_DEFAULT) \
		ONEOF_NCT6791D_GP2X_DATA(PIN_NUM, PIN_DATA_DEFAULT) \
		ONEOF_NCT6791D_GP2X_INV(PIN_NUM, PIN_INV_DEFAULT)

	#define NCT6791D_GP2X_GROUP \
		SUBTITLE(STRING_TOKEN(STR_GP20)) \
		NCT6791D_GP2X_ITEMS(0, NCT6791D_GP20_TYPE_DEFAULT, NCT6791D_GP20_DATA_DEFAULT, NCT6791D_GP20_INV_DEFAULT) \
		SUBTITLE(STRING_TOKEN(STR_GP21)) \
		NCT6791D_GP2X_ITEMS(1, NCT6791D_GP21_TYPE_DEFAULT, NCT6791D_GP21_DATA_DEFAULT, NCT6791D_GP21_INV_DEFAULT) \
		SUBTITLE(STRING_TOKEN(STR_GP22)) \
		NCT6791D_GP2X_ITEMS(2, NCT6791D_GP22_TYPE_DEFAULT, NCT6791D_GP22_DATA_DEFAULT, NCT6791D_GP22_INV_DEFAULT) \
		SUBTITLE(STRING_TOKEN(STR_GP23)) \
		NCT6791D_GP2X_ITEMS(3, NCT6791D_GP23_TYPE_DEFAULT, NCT6791D_GP23_DATA_DEFAULT, NCT6791D_GP23_INV_DEFAULT) \
		SUBTITLE(STRING_TOKEN(STR_GP24)) \
		NCT6791D_GP2X_ITEMS(4, NCT6791D_GP24_TYPE_DEFAULT, NCT6791D_GP24_DATA_DEFAULT, NCT6791D_GP24_INV_DEFAULT) \
		SUBTITLE(STRING_TOKEN(STR_GP25)) \
		NCT6791D_GP2X_ITEMS(5, NCT6791D_GP25_TYPE_DEFAULT, NCT6791D_GP25_DATA_DEFAULT, NCT6791D_GP25_INV_DEFAULT) \
		SUBTITLE(STRING_TOKEN(STR_GP26)) \
		NCT6791D_GP2X_ITEMS(6, NCT6791D_GP26_TYPE_DEFAULT, NCT6791D_GP26_DATA_DEFAULT, NCT6791D_GP26_INV_DEFAULT) \
		SUBTITLE(STRING_TOKEN(STR_GP27)) \
		NCT6791D_GP2X_ITEMS(7, NCT6791D_GP27_TYPE_DEFAULT, NCT6791D_GP27_DATA_DEFAULT, NCT6791D_GP27_INV_DEFAULT)

	#define NCT6791D_GP3X_ITEMS(PIN_NUM, PIN_TYPE_DEFAULT, PIN_DATA_DEFAULT, PIN_INV_DEFAULT) \
		ONEOF_NCT6791D_GP3X_TYPE(PIN_NUM, PIN_TYPE_DEFAULT) \
		ONEOF_NCT6791D_GP3X_DATA(PIN_NUM, PIN_DATA_DEFAULT) \
		ONEOF_NCT6791D_GP3X_INV(PIN_NUM, PIN_INV_DEFAULT)

	#define NCT6791D_GP3X_GROUP \
		SUBTITLE(STRING_TOKEN(STR_GP30)) \
		NCT6791D_GP3X_ITEMS(0, NCT6791D_GP30_TYPE_DEFAULT, NCT6791D_GP30_DATA_DEFAULT, NCT6791D_GP30_INV_DEFAULT) \
		SUBTITLE(STRING_TOKEN(STR_GP31)) \
		NCT6791D_GP3X_ITEMS(1, NCT6791D_GP31_TYPE_DEFAULT, NCT6791D_GP31_DATA_DEFAULT, NCT6791D_GP31_INV_DEFAULT) \
		SUBTITLE(STRING_TOKEN(STR_GP32)) \
		NCT6791D_GP3X_ITEMS(2, NCT6791D_GP32_TYPE_DEFAULT, NCT6791D_GP32_DATA_DEFAULT, NCT6791D_GP32_INV_DEFAULT) \
		SUBTITLE(STRING_TOKEN(STR_GP33)) \
		NCT6791D_GP3X_ITEMS(3, NCT6791D_GP33_TYPE_DEFAULT, NCT6791D_GP33_DATA_DEFAULT, NCT6791D_GP33_INV_DEFAULT) \
		SUBTITLE(STRING_TOKEN(STR_GP34)) \
		NCT6791D_GP3X_ITEMS(4, NCT6791D_GP34_TYPE_DEFAULT, NCT6791D_GP34_DATA_DEFAULT, NCT6791D_GP34_INV_DEFAULT) \
		SUBTITLE(STRING_TOKEN(STR_GP35)) \
		NCT6791D_GP3X_ITEMS(5, NCT6791D_GP35_TYPE_DEFAULT, NCT6791D_GP35_DATA_DEFAULT, NCT6791D_GP35_INV_DEFAULT) \
		SUBTITLE(STRING_TOKEN(STR_GP36)) \
		NCT6791D_GP3X_ITEMS(6, NCT6791D_GP36_TYPE_DEFAULT, NCT6791D_GP36_DATA_DEFAULT, NCT6791D_GP36_INV_DEFAULT) \

	#define NCT6791D_GP4X_ITEMS(PIN_NUM, PIN_TYPE_DEFAULT, PIN_DATA_DEFAULT, PIN_INV_DEFAULT) \
		ONEOF_NCT6791D_GP4X_TYPE(PIN_NUM, PIN_TYPE_DEFAULT) \
		ONEOF_NCT6791D_GP4X_DATA(PIN_NUM, PIN_DATA_DEFAULT) \
		ONEOF_NCT6791D_GP4X_INV(PIN_NUM, PIN_INV_DEFAULT)

	#define NCT6791D_GP4X_GROUP \
		SUBTITLE(STRING_TOKEN(STR_GP40)) \
		NCT6791D_GP4X_ITEMS(0, NCT6791D_GP40_TYPE_DEFAULT, NCT6791D_GP40_DATA_DEFAULT, NCT6791D_GP40_INV_DEFAULT) \
		SUBTITLE(STRING_TOKEN(STR_GP41)) \
		NCT6791D_GP4X_ITEMS(1, NCT6791D_GP41_TYPE_DEFAULT, NCT6791D_GP41_DATA_DEFAULT, NCT6791D_GP41_INV_DEFAULT) \
		SUBTITLE(STRING_TOKEN(STR_GP42)) \
		NCT6791D_GP4X_ITEMS(2, NCT6791D_GP42_TYPE_DEFAULT, NCT6791D_GP42_DATA_DEFAULT, NCT6791D_GP42_INV_DEFAULT) \
		SUBTITLE(STRING_TOKEN(STR_GP43)) \
		NCT6791D_GP4X_ITEMS(3, NCT6791D_GP43_TYPE_DEFAULT, NCT6791D_GP43_DATA_DEFAULT, NCT6791D_GP43_INV_DEFAULT) \
		SUBTITLE(STRING_TOKEN(STR_GP44)) \
		NCT6791D_GP4X_ITEMS(4, NCT6791D_GP44_TYPE_DEFAULT, NCT6791D_GP44_DATA_DEFAULT, NCT6791D_GP44_INV_DEFAULT) \
		SUBTITLE(STRING_TOKEN(STR_GP45)) \
		NCT6791D_GP4X_ITEMS(5, NCT6791D_GP45_TYPE_DEFAULT, NCT6791D_GP45_DATA_DEFAULT, NCT6791D_GP45_INV_DEFAULT) \
		SUBTITLE(STRING_TOKEN(STR_GP46)) \
		NCT6791D_GP4X_ITEMS(6, NCT6791D_GP46_TYPE_DEFAULT, NCT6791D_GP46_DATA_DEFAULT, NCT6791D_GP46_INV_DEFAULT) \
		SUBTITLE(STRING_TOKEN(STR_GP47)) \
		NCT6791D_GP4X_ITEMS(7, NCT6791D_GP47_TYPE_DEFAULT, NCT6791D_GP47_DATA_DEFAULT, NCT6791D_GP47_INV_DEFAULT)

	#define NCT6791D_GP5X_ITEMS(PIN_NUM, PIN_TYPE_DEFAULT, PIN_DATA_DEFAULT, PIN_INV_DEFAULT) \
		ONEOF_NCT6791D_GP5X_TYPE(PIN_NUM, PIN_TYPE_DEFAULT) \
		ONEOF_NCT6791D_GP5X_DATA(PIN_NUM, PIN_DATA_DEFAULT) \
		ONEOF_NCT6791D_GP5X_INV(PIN_NUM, PIN_INV_DEFAULT)

	#define NCT6791D_GP5X_GROUP \
		SUBTITLE(STRING_TOKEN(STR_GP50)) \
		NCT6791D_GP5X_ITEMS(0, NCT6791D_GP50_TYPE_DEFAULT, NCT6791D_GP50_DATA_DEFAULT, NCT6791D_GP50_INV_DEFAULT) \
		SUBTITLE(STRING_TOKEN(STR_GP51)) \
		NCT6791D_GP5X_ITEMS(1, NCT6791D_GP51_TYPE_DEFAULT, NCT6791D_GP51_DATA_DEFAULT, NCT6791D_GP51_INV_DEFAULT) \
		SUBTITLE(STRING_TOKEN(STR_GP52)) \
		NCT6791D_GP5X_ITEMS(2, NCT6791D_GP52_TYPE_DEFAULT, NCT6791D_GP52_DATA_DEFAULT, NCT6791D_GP52_INV_DEFAULT) \
		SUBTITLE(STRING_TOKEN(STR_GP53)) \
		NCT6791D_GP5X_ITEMS(3, NCT6791D_GP53_TYPE_DEFAULT, NCT6791D_GP53_DATA_DEFAULT, NCT6791D_GP53_INV_DEFAULT) \
		SUBTITLE(STRING_TOKEN(STR_GP54)) \
		NCT6791D_GP5X_ITEMS(4, NCT6791D_GP54_TYPE_DEFAULT, NCT6791D_GP54_DATA_DEFAULT, NCT6791D_GP54_INV_DEFAULT) \
		SUBTITLE(STRING_TOKEN(STR_GP55)) \
		NCT6791D_GP5X_ITEMS(5, NCT6791D_GP55_TYPE_DEFAULT, NCT6791D_GP55_DATA_DEFAULT, NCT6791D_GP55_INV_DEFAULT) \
		SUBTITLE(STRING_TOKEN(STR_GP56)) \
		NCT6791D_GP5X_ITEMS(6, NCT6791D_GP56_TYPE_DEFAULT, NCT6791D_GP56_DATA_DEFAULT, NCT6791D_GP56_INV_DEFAULT) \
		SUBTITLE(STRING_TOKEN(STR_GP57)) \
		NCT6791D_GP5X_ITEMS(7, NCT6791D_GP57_TYPE_DEFAULT, NCT6791D_GP57_DATA_DEFAULT, NCT6791D_GP57_INV_DEFAULT)

	#define NCT6791D_GP6X_ITEMS(PIN_NUM, PIN_TYPE_DEFAULT, PIN_DATA_DEFAULT, PIN_INV_DEFAULT) \
		ONEOF_NCT6791D_GP6X_TYPE(PIN_NUM, PIN_TYPE_DEFAULT) \
		ONEOF_NCT6791D_GP6X_DATA(PIN_NUM, PIN_DATA_DEFAULT) \
		ONEOF_NCT6791D_GP6X_INV(PIN_NUM, PIN_INV_DEFAULT)

	#define NCT6791D_GP6X_GROUP \
		SUBTITLE(STRING_TOKEN(STR_GP60)) \
		NCT6791D_GP6X_ITEMS(0, NCT6791D_GP60_TYPE_DEFAULT, NCT6791D_GP60_DATA_DEFAULT, NCT6791D_GP60_INV_DEFAULT) \
		SUBTITLE(STRING_TOKEN(STR_GP61)) \
		NCT6791D_GP6X_ITEMS(1, NCT6791D_GP61_TYPE_DEFAULT, NCT6791D_GP61_DATA_DEFAULT, NCT6791D_GP61_INV_DEFAULT) \
		SUBTITLE(STRING_TOKEN(STR_GP62)) \
		NCT6791D_GP6X_ITEMS(2, NCT6791D_GP62_TYPE_DEFAULT, NCT6791D_GP62_DATA_DEFAULT, NCT6791D_GP62_INV_DEFAULT) \
		SUBTITLE(STRING_TOKEN(STR_GP63)) \
		NCT6791D_GP6X_ITEMS(3, NCT6791D_GP63_TYPE_DEFAULT, NCT6791D_GP63_DATA_DEFAULT, NCT6791D_GP63_INV_DEFAULT) \
		SUBTITLE(STRING_TOKEN(STR_GP64)) \
		NCT6791D_GP6X_ITEMS(4, NCT6791D_GP64_TYPE_DEFAULT, NCT6791D_GP64_DATA_DEFAULT, NCT6791D_GP64_INV_DEFAULT) \
		SUBTITLE(STRING_TOKEN(STR_GP65)) \
		NCT6791D_GP6X_ITEMS(5, NCT6791D_GP65_TYPE_DEFAULT, NCT6791D_GP65_DATA_DEFAULT, NCT6791D_GP65_INV_DEFAULT) \
		SUBTITLE(STRING_TOKEN(STR_GP66)) \
		NCT6791D_GP6X_ITEMS(6, NCT6791D_GP66_TYPE_DEFAULT, NCT6791D_GP66_DATA_DEFAULT, NCT6791D_GP66_INV_DEFAULT) \
		SUBTITLE(STRING_TOKEN(STR_GP67)) \
		NCT6791D_GP6X_ITEMS(7, NCT6791D_GP67_TYPE_DEFAULT, NCT6791D_GP67_DATA_DEFAULT, NCT6791D_GP67_INV_DEFAULT)

	#define NCT6791D_GP7X_ITEMS(PIN_NUM, PIN_TYPE_DEFAULT, PIN_DATA_DEFAULT, PIN_INV_DEFAULT) \
		ONEOF_NCT6791D_GP7X_TYPE(PIN_NUM, PIN_TYPE_DEFAULT) \
		ONEOF_NCT6791D_GP7X_DATA(PIN_NUM, PIN_DATA_DEFAULT) \
		ONEOF_NCT6791D_GP7X_INV(PIN_NUM, PIN_INV_DEFAULT)

	#define NCT6791D_GP7X_GROUP \
		SUBTITLE(STRING_TOKEN(STR_GP70)) \
		NCT6791D_GP7X_ITEMS(0, NCT6791D_GP70_TYPE_DEFAULT, NCT6791D_GP70_DATA_DEFAULT, NCT6791D_GP70_INV_DEFAULT) \
		SUBTITLE(STRING_TOKEN(STR_GP71)) \
		NCT6791D_GP7X_ITEMS(1, NCT6791D_GP71_TYPE_DEFAULT, NCT6791D_GP71_DATA_DEFAULT, NCT6791D_GP71_INV_DEFAULT) \
		SUBTITLE(STRING_TOKEN(STR_GP72)) \
		NCT6791D_GP7X_ITEMS(2, NCT6791D_GP72_TYPE_DEFAULT, NCT6791D_GP72_DATA_DEFAULT, NCT6791D_GP72_INV_DEFAULT) \
		SUBTITLE(STRING_TOKEN(STR_GP73)) \
		NCT6791D_GP7X_ITEMS(3, NCT6791D_GP73_TYPE_DEFAULT, NCT6791D_GP73_DATA_DEFAULT, NCT6791D_GP73_INV_DEFAULT) \
		SUBTITLE(STRING_TOKEN(STR_GP74)) \
		NCT6791D_GP7X_ITEMS(4, NCT6791D_GP74_TYPE_DEFAULT, NCT6791D_GP74_DATA_DEFAULT, NCT6791D_GP74_INV_DEFAULT) \
		SUBTITLE(STRING_TOKEN(STR_GP75)) \
		NCT6791D_GP7X_ITEMS(5, NCT6791D_GP75_TYPE_DEFAULT, NCT6791D_GP75_DATA_DEFAULT, NCT6791D_GP75_INV_DEFAULT) \
		SUBTITLE(STRING_TOKEN(STR_GP76)) \
		NCT6791D_GP7X_ITEMS(6, NCT6791D_GP76_TYPE_DEFAULT, NCT6791D_GP76_DATA_DEFAULT, NCT6791D_GP76_INV_DEFAULT) \

	#define NCT6791D_GP8X_ITEMS(PIN_NUM, PIN_TYPE_DEFAULT, PIN_DATA_DEFAULT, PIN_INV_DEFAULT) \
		ONEOF_NCT6791D_GP8X_TYPE(PIN_NUM, PIN_TYPE_DEFAULT) \
		ONEOF_NCT6791D_GP8X_DATA(PIN_NUM, PIN_DATA_DEFAULT) \
		ONEOF_NCT6791D_GP8X_INV(PIN_NUM, PIN_INV_DEFAULT)

	#define NCT6791D_GP8X_GROUP \
		SUBTITLE(STRING_TOKEN(STR_GP80)) \
		NCT6791D_GP8X_ITEMS(0, NCT6791D_GP80_TYPE_DEFAULT, NCT6791D_GP80_DATA_DEFAULT, NCT6791D_GP80_INV_DEFAULT) \
		SUBTITLE(STRING_TOKEN(STR_GP81)) \
		NCT6791D_GP8X_ITEMS(1, NCT6791D_GP81_TYPE_DEFAULT, NCT6791D_GP81_DATA_DEFAULT, NCT6791D_GP81_INV_DEFAULT) \
		SUBTITLE(STRING_TOKEN(STR_GP82)) \
		NCT6791D_GP8X_ITEMS(2, NCT6791D_GP82_TYPE_DEFAULT, NCT6791D_GP82_DATA_DEFAULT, NCT6791D_GP82_INV_DEFAULT) \
		SUBTITLE(STRING_TOKEN(STR_GP83)) \
		NCT6791D_GP8X_ITEMS(3, NCT6791D_GP83_TYPE_DEFAULT, NCT6791D_GP83_DATA_DEFAULT, NCT6791D_GP83_INV_DEFAULT) \
		SUBTITLE(STRING_TOKEN(STR_GP84)) \
		NCT6791D_GP8X_ITEMS(4, NCT6791D_GP84_TYPE_DEFAULT, NCT6791D_GP84_DATA_DEFAULT, NCT6791D_GP84_INV_DEFAULT) \
		SUBTITLE(STRING_TOKEN(STR_GP85)) \
		NCT6791D_GP8X_ITEMS(5, NCT6791D_GP85_TYPE_DEFAULT, NCT6791D_GP85_DATA_DEFAULT, NCT6791D_GP85_INV_DEFAULT) \
		SUBTITLE(STRING_TOKEN(STR_GP86)) \
		NCT6791D_GP8X_ITEMS(6, NCT6791D_GP86_TYPE_DEFAULT, NCT6791D_GP86_DATA_DEFAULT, NCT6791D_GP86_INV_DEFAULT) \
		SUBTITLE(STRING_TOKEN(STR_GP87)) \
		NCT6791D_GP8X_ITEMS(7, NCT6791D_GP87_TYPE_DEFAULT, NCT6791D_GP87_DATA_DEFAULT, NCT6791D_GP87_INV_DEFAULT)

//-------------------------------------------------------------------------
//Select Top level menu itmem (forset) for you pages
//-------------------------------------------------------------------------
#ifdef ADVANCED_FORM_SET

//-------------------------------------------------------------------------
//If you need any additional type definitions add them here
//-------------------------------------------------------------------------
#ifdef FORM_SET_TYPEDEF
    #include "Token.h"
#endif

//-------------------------------------------------------------------------
//If you need custom varstore's define them here
//-------------------------------------------------------------------------
#ifdef FORM_SET_VARSTORE
#endif

//-------------------------------------------------------------------------
//Define controls to be added to the top level page of the formset
//-------------------------------------------------------------------------
#ifdef FORM_SET_ITEM
#endif

//-------------------------------------------------------------------------
//Define goto commands for the forms defined in this file
//-------------------------------------------------------------------------
#ifdef FORM_SET_GOTO

        goto NCT6791D_MISC_FORM_ID,
        	prompt  = STRING_TOKEN(STR_NCT6791D_MISC_CONFIG),
        	help    = STRING_TOKEN(STR_NCT6791D_MISC_CONFIG);

#endif

//-------------------------------------------------------------------------
// Define forms
//-------------------------------------------------------------------------
#ifdef FORM_SET_FORM

	#ifndef NCT6791D_MISC_FORM_SETUP
	#define NCT6791D_MISC_FORM_SETUP
	  form formid = AUTO_ID(NCT6791D_MISC_FORM_ID),
	    title = STRING_TOKEN(STR_NCT6791D_MISC_CONFIG);
	    SUBTITLE(STRING_TOKEN(STR_NCT6791D_MISC_CONFIG))
	    SEPARATOR
	      SUBTITLE(STRING_TOKEN(NCT6791D_DEEP_S5))
	      ONEOF_NCT6791D_DEEP_S5
	      SEPARATOR

	    ONEOF_NCT6791D_AC_PWR_LOSS
	    SEPARATOR

	    #if NCT6791D_SERIAL_PORT1_PRESENT
	      NCT6791D_UARTA_RS485_MODE
	      SEPARATOR
	    #endif //  NCT6791D_SERIAL_PORT1_PRESENT
	    #if NCT6791D_SERIAL_PORT2_PRESENT
	      NCT6791D_UARTB_RS485_MODE
	      SEPARATOR
	    #endif //  NCT6791D_SERIAL_PORT2_PRESENT
	    
	    // NCT6791D GPIO Groups
	    NCT6791D_GP0X_GROUP
	    NCT6791D_GP1X_GROUP
	    NCT6791D_GP2X_GROUP
	    NCT6791D_GP3X_GROUP
	    NCT6791D_GP4X_GROUP
	    NCT6791D_GP5X_GROUP
	    NCT6791D_GP6X_GROUP
	    NCT6791D_GP7X_GROUP
	    NCT6791D_GP8X_GROUP
	    
	  endform; //NCT6791D_MISC_FORM_ID
	#endif //NCT6791D_MISC_FORM_SETUP

#endif //FORM_SET_FORM

#endif//ADVANCED_FORM_SET

//**********************************************************************
//**********************************************************************
//**                                                                  **
//**        (C)Copyright 1985-2013, American Megatrends, Inc.         **
//**                                                                  **
//**                       All Rights Reserved.                       **
//**                                                                  **
//**      5555 Oakbrook Parkway, Suite 200, Norcross, GA 30093        **
//**                                                                  **
//**                       Phone: (770)-246-8600                      **
//**                                                                  **
//**********************************************************************
//**********************************************************************




