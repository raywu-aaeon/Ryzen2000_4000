//---------------------------------------------------------------------------
// Format:
//---------------------------------------------------------------------------
//
//  NvramField (<Identifier>)
//      OptionBits = <Integer>
//      [Default = <Integer>]
//      [Managed = NO]
//      [CheckSum = NO]
//      [Location = <CMOS Address>, <Clobber Mask>]
//  EndNvramField
//
//---------------------------------------------------------------------------
// Notes:
//---------------------------------------------------------------------------
//
//  <Identifier> is the name of the constant value that will be generated.
//
//  <Integer>    is a byte-size value specified in valid assembler format.
//               (I.e., 0AFh, 8 and 255 are a valid byte values.) The value
//               may be specified using an AMI SDL token (with the 
//               MKF_ prefix) defined in Token.equ.
//
//  []           indicates optional fields. The minimal requirement is to
//               declare a name and number of bits.
//
//  OptionBits:  specifies the number of bits (1-8) within the location.
//               If a <Clobber Mask> value is specified, OptionBits must
//               agree with its value. (Up to eight CMOS tokens can be 
//               defined using a single CMOS location.)
//
//  Default:     specifies the default value that will be written to the bits
//               on the first boot and when CMOS corruption is detected.
//               The value will be zero if no Default is specified.
//
//  Managed:     is assumed to be YES. Managed = NO is essentially a 
//               "declare-only" directive. If Managed = NO, then the default
//               value is not written on the first boot, the location is not
//               included in the checksum and no recovery action is taken for
//               this location when CMOS incoherency is detected.
//
//  CheckSum:    is assumed to be YES. If Checksum = NO, the location will
//               not be included in the checksum. "NO" is recommended for
//               locations to be written in the SEC phase.
//
//  Location:    specifies bits within a specific location to be allocated.
//
//               The recommended approach is to let CMOS Manager auto-assign
//               the location.
//
//               <CMOS Address>
//                   This value is an <Integer> that defines a specific 
//                   location in the logical CMOS memory map.
//
//               <Clobber Mask>
//                   This value is an <Integer> bit mask that defines the 
//                   specific bits in the byte associated with the CMOS token
//                   identifier. The <Clobber Mask> must agree the OptionBits 
//                   value. (Up to eight CMOS tokens can be defined using a 
//                   single CMOS location.)


//----------------------------------------------------------------------------
// CMOS Checksum Location
//----------------------------------------------------------------------------
// The CMOS checksum location spans 2 bytes. 

NvramField (BIOS_ROBOT_FLAG_OFFSET)
        OptionBits  = 8
        Default     = 000h
        Checksum    = NO
        Location    = MKF_BIOS_ROBOT_FLAG_REG, 0FFh
EndNvramField

NvramField (OS_WATCH_DOG_TIME_FLAG_OFFSET)
        OptionBits  = 8
        Default     = 000h
        Checksum    = NO
        Location    = MKF_OS_WATCH_DOG_TIME_FLAG_REG, 0FFh
EndNvramField