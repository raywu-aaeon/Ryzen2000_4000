Scope(\_SB) {
  Device(BFPI) {
    Name(_HID, "PNP0C14")       // Note: The _HID should be defined to "*pnp0c14".
    Name(_UID, "BFPI")

    OperationRegion(WMDB,SystemMemory,0xFFFF000,ASL_WMI_DATA_BUFFER_LENGTH)  // Address will be updated in AaeonBfpiDxe.c
    Field(WMDB, AnyAcc, NoLock, Preserve)
    {
      // 0x0000~0x100 : Fixed variables
      WDBA, 32,
      BBID, 8,
      BPID, 8,
      , 0x7D0, // Reserved, 0xFA * 8 bits
      // 0x0100~0x1100 : Data Buffer
      WDBF, 0x8000  // 4K, 0x1000 * 8 bits
    }

    // Description of data, events and methods supported by this ASL device.
    Name(_WDG, Buffer() {
      // ATKMethod
      // guid("{97845ED0-4E6D-11DE-8A39-0800200C9A66}")
      0xD0, 0x5E, 0x84, 0x97, 0x6D, 0x4E, 0xDE, 0x11, 0x8A, 0x39, 0x08, 0x00, 0x20, 0x0C, 0x9A, 0x66,
      78, 66,        // Object Id (NB)
      1,             // Instance Count
      0x02,          // Flags (WMIACPI_REGFLAG_METHOD)
      // Notify Event
      // guid("{0B3CBB35-E3C2-45ED-91C2-4C5A6D195D1C}")
      0x35, 0xbb, 0x3c, 0x0b, 0xc2, 0xe3, 0xed, 0x45, 0x91, 0xc2, 0x4c, 0x5a, 0x6d, 0x19, 0x5d, 0x1c,
      0xff, 0,       // Notification Id
      1,             // Instance Count
      0x08,          // Flags (WMIACPI_REGFLAG_EVENT)

      //
      // For returning the MOF data
      0x21, 0x12, 0x90, 0x05, 0x66, 0xd5, 0xd1, 0x11, 0xb2, 0xf0, 0x00, 0xa0, 0xc9, 0x06, 0x29, 0x10,
      78, 65,        // Object ID (NA)
      1,             // Instance Count
      0x00,          // Flags
    }) // end of _WDG

    //---------------------------------------------------------------------------
    //
    // Name: WMNB
    //
    // Description: Main method for BFPI WMI
    //
    // Input:
    //        Arg0 has the instance being queried
    //        Arg1 has the method id (Uppercase)
    //        Arg2 has the data passed
    // Output:
    //
    // Notes:
    //
    //---------------------------------------------------------------------------
    Method(WMNB, 3) {
      //Input Definition
      CreateDWordField (Arg2, 0x00, IIA0) // Input: IntegerArgument
      CreateDWordField (Arg2, 0x04, IIA1) // Input: IntegerArgument
      ShiftRight (And(Arg1,0xFFFFFFFF), 16, Local0) // Input: Interger - Function number
      And (Arg1, 0xFFFF, Local1) // Input: Interger - Sub-function number

      If (LEqual(Local0, 0x0000)) {  // Global Capability
        If (LLessEqual(Local1, 1)) {   // Report global capability
          Return(WRGC(Local1, IIA0, IIA1))
        }
      }

#if ASL_WMI_DIO_SUPPORT
      If (LEqual(local0, ASL_BFPI_DIO_FN)) {
        Return(\_SB.ADIO.DIOO(Local1, IIA0, IIA1))
      }
#endif
#if ASL_WMI_WDT_SUPPORT
      If (LEqual(local0, ASL_BFPI_WDT_FN)) {
        Return(WDTO(Local1, IIA0, IIA1))
      }
#endif
#if ASL_WMI_HWM_SUPPORT
      If (LEqual(local0, ASL_BFPI_HWM_FN)) {
        Return(HWMO(Local1, IIA0, IIA1))
      }
#endif
#if ASL_WMI_BLC_SUPPORT
      If (LEqual(local0, ASL_BFPI_BLC_FN)) {
        Return(BLCO(Local1, IIA0, IIA1))
      }
#endif
#if ASL_WMI_SMF_SUPPORT
      If (LEqual(local0, ASL_BFPI_SMF_FN)) {
        Return(SMFO(Local1, IIA0, IIA1))
      }
#endif
#if ASL_WMI_LED_SUPPORT
      If (LEqual(local0, ASL_BFPI_LED_FN)) {
        Return(LEDO(Local1, IIA0, IIA1))
      }
#endif
#if ASL_WMI_I2C_SUPPORT
      If (LEqual(local0, ASL_BFPI_I2C_FN)) {
        Return(I2CO(Local1, IIA0, IIA1))
      }
#endif
#if ASL_WMI_PWM_SUPPORT
      If (LEqual(local0, ASL_BFPI_PWM_FN)) {
        Return(PWMO(Local1, IIA0, IIA1))
      }
#endif
#if ASL_WMI_PDA_SUPPORT
      If (LEqual(local0, ASL_BFPI_PDA_FN)) {
        Return(PDAO(Local1, IIA0, IIA1))
      }
#endif
#if ASL_WMI_SMB_SUPPORT
      If (LEqual(local0, ASL_BFPI_SMB_FN)) {
        Return(SMBO(Local1, IIA0, IIA1))
      }
#endif
#if ASL_WMI_BST_SUPPORT
      If (LEqual(local0, ASL_BFPI_BST_FN)) {
        Return(BSTO(Local1, IIA0, IIA1))
      }
#endif
	    Return(ASL_BFPI_NOT_SUPPORTED)
    } // End of WMNB method

    //---------------------------------------------------------------------------
    //
    // Name: _WED
    //
    // Description:
    //
    // Input:
    //
    // Output:
    //
    // Notes:
    //
    //---------------------------------------------------------------------------
    Method(_WED, 1) {
	    Return(ONES)
    }

    //---------------------------------------------------------------------------
    //
    // Name: WQNA
    //
    // Description: Return MOF data
    //
    // Input: NA
    //
    // Output: MOF binary data
    //
    // Notes:
    //
    //---------------------------------------------------------------------------
    Name(WQNA, Buffer(2445) {
    0x46, 0x4f, 0x4d, 0x42, 0x01, 0x00, 0x00, 0x00, 0x7d, 0x09, 0x00, 0x00, 0x7a, 0x57, 0x00, 0x00,
    0x44, 0x53, 0x00, 0x01, 0x1a, 0x7d, 0xda, 0x54, 0x98, 0x47, 0xaa, 0x00, 0x01, 0x06, 0x18, 0x42,
    0x10, 0x05, 0x10, 0x52, 0x2b, 0x94, 0x42, 0x04, 0x0a, 0x41, 0x24, 0x79, 0x0e, 0x60, 0x30, 0x1a,
    0x40, 0x24, 0x09, 0x42, 0x2e, 0x98, 0x98, 0x00, 0x21, 0x10, 0x92, 0x28, 0xc0, 0xbc, 0x00, 0xdd,
    0x02, 0x0c, 0x0b, 0xb0, 0x2d, 0xc0, 0xb4, 0x00, 0xc7, 0x40, 0xea, 0xdf, 0x1f, 0xa2, 0x34, 0x10,
    0x89, 0x80, 0xa4, 0x52, 0x20, 0xb4, 0x87, 0xca, 0x05, 0xf8, 0x16, 0xa0, 0x1d, 0x51, 0x92, 0x05,
    0x58, 0x86, 0x11, 0x81, 0xbd, 0x0a, 0xb0, 0x29, 0xc0, 0x24, 0x1a, 0x82, 0xa0, 0x9c, 0x61, 0xa0,
    0xe0, 0x0d, 0xc8, 0x06, 0xc1, 0x64, 0x0f, 0x02, 0x25, 0x66, 0x34, 0x64, 0x06, 0x9d, 0xcf, 0x45,
    0xf0, 0x27, 0x51, 0xb8, 0x00, 0xe9, 0x18, 0x1a, 0xc1, 0x11, 0x25, 0xa8, 0x10, 0x59, 0x3e, 0x05,
    0x38, 0x15, 0x20, 0x48, 0x80, 0x46, 0x24, 0x59, 0x87, 0xd2, 0x60, 0x4e, 0x2b, 0x20, 0xc7, 0x3a,
    0x17, 0xe6, 0x19, 0x43, 0x83, 0x33, 0x50, 0xdc, 0x58, 0xf1, 0x4e, 0xca, 0x9a, 0x91, 0x34, 0x88,
    0x28, 0xc7, 0x82, 0x95, 0x01, 0x21, 0x8f, 0x02, 0xac, 0x82, 0x6a, 0x32, 0x09, 0xec, 0x5e, 0x80,
    0x39, 0x01, 0xde, 0x04, 0x88, 0x1b, 0xa8, 0xac, 0x09, 0xb0, 0x08, 0x25, 0x61, 0x02, 0x6c, 0xc1,
    0x08, 0xa5, 0x36, 0x18, 0xa1, 0x34, 0x86, 0x20, 0x90, 0x38, 0x51, 0x22, 0x36, 0x28, 0xc0, 0x19,
    0xac, 0x50, 0x22, 0x86, 0x09, 0x11, 0xa1, 0x32, 0x0c, 0xe2, 0x10, 0x4a, 0x68, 0x71, 0x23, 0xb4,
    0x3f, 0x08, 0x32, 0x74, 0xdc, 0x19, 0xc0, 0xe3, 0x39, 0xaf, 0x33, 0x3a, 0xa5, 0x20, 0xa7, 0x64,
    0x82, 0x13, 0x3e, 0xc6, 0x72, 0xc1, 0x25, 0x1e, 0x55, 0x18, 0xe1, 0x13, 0x38, 0xda, 0x91, 0x40,
    0x12, 0x40, 0x14, 0x09, 0x1e, 0x35, 0xf2, 0x04, 0x0f, 0x00, 0x1e, 0xa4, 0x87, 0x7d, 0x92, 0x27,
    0x10, 0xe4, 0x1c, 0xad, 0x73, 0xa8, 0x64, 0x0c, 0x0c, 0x2b, 0xc1, 0x2f, 0x82, 0x8f, 0x02, 0xf8,
    0xff, 0xbf, 0x6b, 0x40, 0x5d, 0x10, 0x1e, 0x05, 0xd8, 0xa4, 0xc3, 0x61, 0xc6, 0xeb, 0x61, 0x87,
    0x3b, 0x81, 0x27, 0x80, 0x23, 0x61, 0x10, 0x47, 0x74, 0x70, 0xd8, 0x41, 0x9e, 0xcc, 0x91, 0x7d,
    0x3f, 0x34, 0x7b, 0x0d, 0xd0, 0x70, 0x13, 0x1c, 0x8f, 0x4f, 0x05, 0x9e, 0xcf, 0x93, 0x40, 0x02,
    0xcb, 0x1f, 0x04, 0x6a, 0x64, 0x86, 0xf6, 0x80, 0x4f, 0xeb, 0xa5, 0xc0, 0xa7, 0x85, 0xc3, 0x62,
    0x62, 0x4f, 0x13, 0x74, 0x3c, 0xe0, 0x3f, 0x2f, 0x1c, 0x7f, 0x84, 0xd3, 0xf7, 0x7c, 0x7d, 0x72,
    0x30, 0x30, 0x76, 0x40, 0xf6, 0x2b, 0x00, 0x21, 0x78, 0x99, 0x23, 0xd2, 0x31, 0x20, 0xc2, 0x31,
    0x19, 0x36, 0xf0, 0x73, 0x83, 0xf1, 0x5f, 0x18, 0x5e, 0x21, 0xce, 0xea, 0x24, 0x02, 0x9d, 0x57,
    0xd1, 0x50, 0x9a, 0x8e, 0x45, 0x1e, 0x27, 0xd0, 0x23, 0xe0, 0xc7, 0x80, 0xe8, 0x51, 0xcf, 0xe6,
    0x08, 0x8e, 0x27, 0xca, 0x49, 0x1c, 0x90, 0xaf, 0x11, 0x46, 0x08, 0xff, 0x70, 0xf0, 0xa4, 0xe1,
    0x43, 0x84, 0x0f, 0x14, 0xe7, 0xf4, 0x36, 0x60, 0x82, 0x2a, 0x68, 0x0b, 0xb0, 0x02, 0xa2, 0x84,
    0x0f, 0x02, 0xd9, 0x58, 0xaa, 0x09, 0x34, 0x48, 0xa7, 0x5a, 0xae, 0x94, 0xe2, 0x6a, 0x3a, 0xd1,
    0x0f, 0x20, 0xec, 0xb3, 0xc4, 0x0b, 0x83, 0x15, 0x5f, 0x18, 0xc8, 0x2c, 0x62, 0x04, 0x0b, 0x11,
    0xe7, 0xac, 0xe2, 0x84, 0x88, 0xf7, 0x66, 0x60, 0x82, 0xea, 0xa1, 0x75, 0x34, 0xe1, 0xba, 0x29,
    0xa4, 0x8b, 0x46, 0xc3, 0x32, 0x9c, 0x95, 0xc0, 0x08, 0xce, 0x20, 0x06, 0x74, 0x4c, 0x08, 0x0d,
    0xc7, 0x07, 0x02, 0xae, 0xe4, 0xe4, 0x40, 0xc7, 0xfd, 0xd6, 0x61, 0x88, 0x47, 0x8a, 0xc7, 0x88,
    0xff, 0x7f, 0x82, 0x99, 0x20, 0x74, 0x89, 0xf0, 0x44, 0x7d, 0x21, 0xe0, 0x57, 0x15, 0x1f, 0x11,
    0x0c, 0x6e, 0x7d, 0xf7, 0x11, 0xd0, 0x4c, 0xc3, 0x40, 0x67, 0x1b, 0xe9, 0x46, 0x4f, 0x84, 0x13,
    0x54, 0x73, 0x9c, 0xa0, 0xb3, 0xe0, 0x67, 0x10, 0x3e, 0x3d, 0x5d, 0x12, 0xa0, 0x4f, 0xe1, 0x84,
    0x3c, 0x83, 0x33, 0x63, 0x33, 0xc2, 0x1d, 0x12, 0xe0, 0x01, 0xf9, 0x52, 0xe0, 0x53, 0xc0, 0x83,
    0x01, 0x1b, 0x43, 0x88, 0x30, 0xd1, 0x8c, 0xce, 0xe5, 0xcd, 0x1d, 0x25, 0x68, 0xee, 0x14, 0xc4,
    0x73, 0x77, 0x58, 0x08, 0x39, 0x99, 0x3b, 0xea, 0x7a, 0xe3, 0x3b, 0xcc, 0x41, 0x7a, 0x8e, 0xfc,
    0x94, 0xf2, 0x88, 0x92, 0x60, 0xb0, 0xc1, 0xd3, 0x2b, 0x08, 0xfe, 0x32, 0xe3, 0xc3, 0x82, 0xe7,
    0x61, 0x81, 0xa3, 0x07, 0xcd, 0x7d, 0xc1, 0x38, 0xc1, 0x83, 0x3d, 0xd8, 0x78, 0xf6, 0x98, 0x71,
    0x78, 0xf6, 0x7c, 0x08, 0x9e, 0x3d, 0x1f, 0x9c, 0xaf, 0x1c, 0xf0, 0x87, 0xcf, 0xe7, 0xc6, 0xc6,
    0x84, 0x9d, 0x3e, 0x8c, 0xff, 0xff, 0xf4, 0xe1, 0xc3, 0x63, 0x24, 0xac, 0x47, 0x16, 0x40, 0x24,
    0x6b, 0x5c, 0xa8, 0x71, 0xfa, 0x6a, 0xf4, 0xbc, 0xe4, 0xeb, 0x07, 0x6e, 0x50, 0xef, 0x1f, 0x1e,
    0x9b, 0x61, 0x3d, 0x72, 0x0e, 0x6b, 0xb4, 0xb0, 0x07, 0xfc, 0x66, 0xe2, 0x63, 0x8d, 0xef, 0x43,
    0x0c, 0xd6, 0xf7, 0x19, 0x70, 0x00, 0xe2, 0xbd, 0xdf, 0x01, 0xc8, 0x04, 0x0c, 0xc8, 0x50, 0x7d,
    0x73, 0x02, 0xcb, 0xbd, 0xe9, 0x58, 0x4f, 0xe9, 0x20, 0x9e, 0x47, 0x70, 0x38, 0xef, 0x23, 0x38,
    0x9c, 0x07, 0x12, 0x58, 0xd9, 0x2e, 0x28, 0x28, 0x51, 0x10, 0x4a, 0xf4, 0x7c, 0xd0, 0x50, 0x4e,
    0xc3, 0x63, 0xc0, 0xc1, 0xc3, 0xba, 0x9e, 0x00, 0x56, 0xfe, 0xff, 0xd7, 0x13, 0x80, 0xe3, 0xeb,
    0xf1, 0xf5, 0x04, 0xde, 0xff, 0xff, 0x7a, 0x02, 0x87, 0xd8, 0xd7, 0x13, 0xe0, 0x2a, 0xf8, 0x7a,
    0x02, 0x42, 0xc4, 0x57, 0x45, 0x5f, 0x50, 0xf0, 0xa7, 0x2f, 0x78, 0x59, 0x6e, 0x27, 0xa8, 0x81,
    0x38, 0xc9, 0xed, 0x04, 0x71, 0x5a, 0x39, 0x5e, 0xdf, 0x01, 0x62, 0x3c, 0xd4, 0xf9, 0xbc, 0xe8,
    0x9b, 0x09, 0xe0, 0xfb, 0xff, 0x7f, 0x33, 0x01, 0x98, 0x18, 0x1c, 0x42, 0x07, 0x31, 0xb0, 0xdd,
    0x4c, 0x80, 0xc3, 0xff, 0xff, 0x66, 0x02, 0xa6, 0x57, 0xb3, 0x6f, 0x26, 0x60, 0xbd, 0x89, 0x30,
    0x90, 0x47, 0x11, 0xdc, 0xad, 0x04, 0xee, 0xb0, 0xdf, 0x4a, 0x00, 0xa6, 0xfd, 0xff, 0x6f, 0x25,
    0x00, 0x9f, 0x4e, 0x01, 0x6f, 0x25, 0x80, 0xa7, 0x9b, 0x08, 0xfb, 0xff, 0xdf, 0x4a, 0xf0, 0x99,
    0x6e, 0x25, 0x28, 0x0e, 0xa7, 0x39, 0x7b, 0xa1, 0x61, 0x3c, 0x32, 0xdf, 0xd0, 0xd9, 0x38, 0xd8,
    0xbd, 0x04, 0xe0, 0xee, 0xff, 0xff, 0x5e, 0x02, 0xd8, 0x0b, 0x7f, 0x2f, 0x01, 0x1d, 0xe4, 0x7b,
    0x09, 0xb0, 0x15, 0x7b, 0xfa, 0x02, 0x02, 0x87, 0x11, 0x38, 0x37, 0x13, 0xb8, 0xb7, 0x14, 0x76,
    0x33, 0x01, 0xd3, 0xff, 0xff, 0x66, 0x02, 0xf0, 0xff, 0xff, 0x7f, 0x33, 0x01, 0x9c, 0x8c, 0xfc,
    0xcd, 0x04, 0xf0, 0x74, 0x02, 0xe3, 0x37, 0x13, 0x58, 0x79, 0x6e, 0x26, 0xa8, 0x63, 0x81, 0xb3,
    0x9c, 0xc1, 0x20, 0x4c, 0xc4, 0xe7, 0xb1, 0xb7, 0x01, 0x7b, 0xbe, 0x98, 0x00, 0xed, 0xff, 0xff,
    0xc5, 0x04, 0xe0, 0xff, 0xff, 0x9f, 0x80, 0x45, 0xbf, 0x98, 0x80, 0x0e, 0xf6, 0xc5, 0x04, 0xd8,
    0x8e, 0xee, 0x11, 0x0c, 0x18, 0x9c, 0x45, 0xb0, 0xf7, 0x12, 0xb8, 0x27, 0x30, 0x7e, 0x2f, 0x01,
    0x1c, 0xff, 0xff, 0xef, 0x25, 0x00, 0xa7, 0xef, 0x0a, 0xef, 0x25, 0x60, 0xfa, 0xff, 0xdf, 0x4b,
    0x80, 0xfd, 0x01, 0x0c, 0x73, 0x2f, 0xc1, 0x67, 0xbb, 0x97, 0xa0, 0x44, 0x41, 0x28, 0xd1, 0xd3,
    0x41, 0x83, 0x3d, 0xaa, 0xb8, 0xaf, 0x07, 0x9e, 0xc5, 0x49, 0x44, 0x0e, 0xf3, 0x0a, 0x70, 0x68,
    0x61, 0x42, 0x54, 0x8c, 0xae, 0x71, 0x1e, 0x95, 0xcd, 0x5f, 0x4d, 0x00, 0xba, 0xfc, 0xff, 0xaf,
    0x26, 0x00, 0x9b, 0xd6, 0xe3, 0xab, 0x09, 0xb8, 0x6e, 0x01, 0xbe, 0x9a, 0x00, 0x57, 0xc1, 0xa7,
    0x01, 0x08, 0xff, 0xff, 0xab, 0x09, 0xfc, 0xe9, 0x85, 0x3c, 0xd5, 0x20, 0x6f, 0x23, 0x38, 0x9c,
    0xc7, 0x11, 0x58, 0xa7, 0x30, 0x58, 0xb7, 0x13, 0x76, 0x24, 0x63, 0x53, 0x08, 0x7b, 0x96, 0x3e,
    0x32, 0xf0, 0xab, 0x09, 0xc0, 0xc0, 0xff, 0xff, 0x29, 0x0c, 0xe0, 0xc9, 0xd8, 0x5e, 0x4d, 0x80,
    0xed, 0x29, 0x0c, 0x8c, 0x57, 0x13, 0x7e, 0xd9, 0xe4, 0x67, 0x11, 0xfc, 0xbd, 0x04, 0xd6, 0xff,
    0xff, 0x5e, 0xc2, 0x8e, 0x64, 0xec, 0x5e, 0x02, 0x70, 0xfe, 0xff, 0x7f, 0x2f, 0x01, 0x2c, 0x9e,
    0x02, 0xde, 0x4b, 0x00, 0x4f, 0x97, 0x4d, 0x7e, 0x2f, 0x81, 0x71, 0xd9, 0x84, 0x23, 0x72, 0x3a,
    0xc2, 0x7c, 0xd9, 0x04, 0x6e, 0xff, 0xff, 0xab, 0x09, 0xc0, 0xff, 0xff, 0xff, 0x65, 0x13, 0x18,
    0x63, 0xbe, 0x6c, 0x02, 0x76, 0x4e, 0x23, 0xc7, 0x77, 0x78, 0x2f, 0x9b, 0xe0, 0xbe, 0x9d, 0x60,
    0xa6, 0xe6, 0xcb, 0x8a, 0x27, 0x72, 0x34, 0xa7, 0xe0, 0xab, 0x09, 0x60, 0xe4, 0xff, 0x7f, 0x35,
    0x01, 0x6c, 0x4e, 0x8d, 0x5f, 0x4d, 0x00, 0x77, 0x43, 0x79, 0x0a, 0x03, 0xae, 0xff, 0xff, 0xcb,
    0x26, 0xdc, 0xab, 0x09, 0xb0, 0x3d, 0x85, 0x81, 0xf1, 0x6a, 0x82, 0x9b, 0x8a, 0xef, 0x61, 0xec,
    0x2c, 0x82, 0x39, 0x85, 0xc1, 0x82, 0x3c, 0xbe, 0x9a, 0x4f, 0x61, 0x00, 0x11, 0xfe, 0xff, 0xa7,
    0x30, 0x80, 0xc5, 0xb8, 0xaf, 0x26, 0xe0, 0xfd, 0xff, 0x9f, 0xc2, 0x80, 0xe5, 0x40, 0xcf, 0x2e,
    0xcc, 0x53, 0x18, 0xb8, 0x6f, 0x27, 0xec, 0x9c, 0xcd, 0xa6, 0x10, 0xfa, 0x40, 0x4e, 0xe2, 0x84,
    0x3d, 0x2a, 0x5f, 0x4d, 0x00, 0xee, 0xfc, 0xff, 0x8f, 0xd6, 0x00, 0xdb, 0xc6, 0xf6, 0x6a, 0x02,
    0x6c, 0x4f, 0x61, 0x60, 0xf8, 0xff, 0x5f, 0x4d, 0xe0, 0x5d, 0x45, 0x18, 0x48, 0x98, 0xf3, 0xad,
    0x13, 0x44, 0xe3, 0x7a, 0x17, 0xe1, 0xf7, 0x12, 0x98, 0xe7, 0x6c, 0x76, 0x2f, 0x01, 0xd8, 0xfa,
    0xff, 0xbf, 0x97, 0x00, 0x5c, 0x38, 0x05, 0xbc, 0x97, 0x00, 0x9e, 0xae, 0x22, 0xec, 0x5e, 0x02,
    0x27, 0xe5, 0xbd, 0x04, 0xc5, 0xe1, 0x34, 0xe7, 0x2f, 0xf4, 0x09, 0xe0, 0x34, 0x42, 0x1c, 0x86,
    0x91, 0x0e, 0xa4, 0x67, 0x01, 0xff, 0x7f, 0x02, 0x5f, 0x4c, 0x00, 0xee, 0xff, 0xff, 0x2f, 0x26,
    0xc0, 0x5e, 0xce, 0x55, 0x13, 0x74, 0x90, 0x2f, 0x26, 0xc0, 0x56, 0xfe, 0x01, 0x0c, 0x08, 0x9c,
    0x45, 0x18, 0x4a, 0xe4, 0x20, 0x47, 0x16, 0x28, 0x66, 0x90, 0x67, 0x00, 0x06, 0xc7, 0x8f, 0x24,
    0xec, 0x70, 0xe0, 0xab, 0x81, 0x27, 0xc1, 0xaf, 0x28, 0x70, 0xef, 0x2b, 0xec, 0x8a, 0x02, 0x2c,
    0xfe, 0xff, 0x57, 0x14, 0x80, 0xff, 0xff, 0xff, 0x2b, 0x0a, 0xf0, 0x1e, 0xf9, 0x2b, 0x0a, 0xe0,
    0xe9, 0x2c, 0xc6, 0xaf, 0x28, 0x60, 0xce, 0x76, 0x45, 0x41, 0x89, 0x82, 0x50, 0xa2, 0x47, 0x84,
    0xee, 0x01, 0xc7, 0xe9, 0x43, 0x37, 0xee, 0xce, 0x0d, 0xeb, 0x92, 0x02, 0xfc, 0xfe, 0xff, 0x97,
    0x14, 0x80, 0xff, 0xff, 0xff, 0x4b, 0x0a, 0xcc, 0xf5, 0xf8, 0x92, 0x02, 0xae, 0xc3, 0x82, 0x2f,
    0x29, 0xc0, 0x55, 0xf0, 0x25, 0x05, 0x84, 0x03, 0x3e, 0xd3, 0x98, 0x41, 0xde, 0x46, 0x70, 0xe7,
    0x13, 0x1f, 0x47, 0xe0, 0x10, 0x4c, 0x75, 0x3b, 0x41, 0x49, 0x3a, 0x6e, 0xfb, 0x76, 0x82, 0x38,
    0xa7, 0xb1, 0x61, 0x9c, 0x8a, 0x0f, 0x2b, 0x47, 0x1c, 0xe6, 0x50, 0x8e, 0xc7, 0x08, 0x4f, 0x64,
    0x80, 0xb1, 0xff, 0xff, 0xe5, 0x04, 0xe0, 0x72, 0xf8, 0xc3, 0x36, 0xe8, 0xc6, 0xf6, 0xb0, 0xf0,
    0xff, 0x7f, 0x39, 0x01, 0xae, 0x62, 0x2f, 0x27, 0x20, 0xbe, 0x83, 0xf2, 0xd3, 0x08, 0xac, 0xab,
    0x09, 0xcc, 0xf3, 0x19, 0xbb, 0x9a, 0x00, 0xdc, 0xf8, 0xff, 0x5f, 0x4d, 0x00, 0x96, 0x9e, 0x02,
    0x5e, 0x4d, 0x80, 0xd7, 0xff, 0xff, 0x6a, 0x02, 0x7c, 0xee, 0x9e, 0xfc, 0x34, 0x02, 0x4b, 0xd8,
    0x5b, 0xc1, 0x04, 0x8a, 0xf3, 0x1e, 0x90, 0x14, 0x18, 0xd4, 0x1d, 0xc3, 0xd7, 0x13, 0x8f, 0x8a,
    0x9f, 0x03, 0x3c, 0x87, 0x47, 0xb2, 0xe8, 0x67, 0x77, 0xd2, 0x9e, 0xce, 0x61, 0xb1, 0xfb, 0x85,
    0x87, 0xc5, 0x4f, 0x11, 0x1e, 0xcf, 0x3b, 0xa9, 0xb5, 0x23, 0x6a, 0x9c, 0x47, 0x12, 0x26, 0x81,
    0x4f, 0x00, 0x0f, 0x00, 0x27, 0x15, 0x8d, 0x9f, 0x23, 0x60, 0x00, 0xb2, 0x41, 0xb0, 0x00, 0x43,
    0x05, 0xcd, 0x38, 0x4f, 0xe1, 0x49, 0x80, 0x4d, 0x33, 0xd2, 0xa3, 0xea, 0x81, 0x7a, 0x04, 0x2f,
    0x19, 0xe7, 0x1a, 0xe5, 0x84, 0xdf, 0x2d, 0x0c, 0x77, 0x42, 0x6f, 0xab, 0x98, 0x7b, 0xab, 0x07,
    0xe4, 0x01, 0x3f, 0xb3, 0x7a, 0x82, 0x81, 0x5e, 0x52, 0x7c, 0x10, 0x30, 0x50, 0xfc, 0x48, 0x27,
    0xf2, 0x2a, 0x60, 0x82, 0xf7, 0x83, 0x03, 0xc2, 0x1c, 0x09, 0x7c, 0xd4, 0x69, 0xf5, 0x60, 0x81,
    0x70, 0x7f, 0xaf, 0xd0, 0x4c, 0x5e, 0x27, 0x9e, 0x23, 0x62, 0x04, 0xb1, 0x35, 0x01, 0xb6, 0x86,
    0x24, 0x20, 0x9f, 0x29, 0xa2, 0x9c, 0x72, 0xa0, 0x97, 0x01, 0xa3, 0x34, 0x27, 0xc0, 0x18, 0x14,
    0x02, 0x24, 0xd6, 0xdb, 0xc4, 0x9b, 0x4a, 0xb0, 0x50, 0xc1, 0xc2, 0x04, 0x31, 0x54, 0xfb, 0x83,
    0x20, 0xe3, 0xc7, 0x1d, 0x04, 0x3c, 0x9e, 0x03, 0x3b, 0xa4, 0xff, 0xff, 0x31, 0xbd, 0x40, 0x98,
    0xc0, 0xb3, 0x3e, 0xc7, 0x72, 0x47, 0x23, 0xf1, 0xa8, 0xc2, 0x88, 0x9f, 0xc0, 0xe2, 0xdf, 0x28,
    0x3a, 0x5a, 0x38, 0x12, 0x3c, 0xea, 0xb4, 0xe1, 0x53, 0x80, 0x27, 0xe9, 0xb1, 0x3f, 0x89, 0x18,
    0xe4, 0x20, 0xad, 0x73, 0xaa, 0x64, 0x0c, 0xec, 0x7c, 0xe2, 0x63, 0x86, 0xcf, 0x03, 0x78, 0xd7,
    0x80, 0xba, 0x07, 0xfa, 0x64, 0x01, 0x8e, 0x73, 0x09, 0xfc, 0xf1, 0xf8, 0x68, 0xe0, 0xf9, 0x3c,
    0xef, 0xb3, 0x8b, 0xb2, 0x07, 0xc1, 0x47, 0x66, 0x68, 0x8f, 0xf9, 0xb4, 0x9e, 0x0a, 0x7c, 0x3f,
    0x30, 0x81, 0x8f, 0x19, 0x3e, 0xd8, 0x78, 0x3c, 0xe0, 0x3f, 0x14, 0x1c, 0xff, 0x1b, 0xb3, 0xb1,
    0x7d, 0x70, 0x70, 0xc4, 0xc3, 0x0e, 0x7a, 0x14, 0x3e, 0x3d, 0x60, 0x0e, 0x00, 0x6c, 0xd0, 0xbe,
    0x2f, 0xfb, 0xb0, 0xc2, 0x0f, 0x18, 0x3e, 0xac, 0xb0, 0xb3, 0x0d, 0xbf, 0x95, 0xf1, 0x23, 0x85,
    0x8f, 0x15, 0x60, 0x9e, 0xd8, 0x4b, 0xc5, 0x83, 0x86, 0xcf, 0x39, 0x60, 0xf9, 0xff, 0x9f, 0x73,
    0x30, 0xa3, 0xc1, 0x9d, 0x73, 0xe0, 0x81, 0x9c, 0xd9, 0xc1, 0x1c, 0x8f, 0x87, 0x72, 0x2e, 0xa7,
    0x74, 0x02, 0x67, 0x8a, 0x23, 0x28, 0x72, 0x78, 0xe8, 0x11, 0xf0, 0x73, 0xc3, 0x33, 0x0f, 0x1b,
    0xc1, 0x6b, 0x8f, 0x27, 0x71, 0x40, 0x3e, 0x78, 0x18, 0x21, 0xf8, 0xd3, 0xc4, 0xf3, 0x89, 0x6f,
    0x1d, 0x9e, 0xd4, 0x4b, 0xc0, 0x21, 0xb0, 0x11, 0x70, 0x85, 0x36, 0x7d, 0x6a, 0x34, 0x6a, 0xd5,
    0xa0, 0x4c, 0x8d, 0x32, 0x0d, 0x6a, 0xf5, 0xa9, 0xd4, 0x98, 0xb1, 0xf1, 0x3d, 0xfd, 0xe8, 0x81,
    0xa0, 0x13, 0x80, 0x43, 0x81, 0x50, 0xc1, 0x47, 0x18, 0x19, 0xb9, 0xa3, 0x19, 0x44, 0x40, 0xce,
    0xf2, 0xb8, 0x10, 0x90, 0x93, 0x81, 0x08, 0xc8, 0x6a, 0xd6, 0x20, 0x20, 0x4b, 0x03, 0x11, 0x90,
    0x85, 0x9a, 0x00, 0x62, 0xb2, 0x41, 0x04, 0xe4, 0x80, 0x4f, 0x06, 0x01, 0x39, 0x2d, 0x88, 0x80,
    0x9c, 0xfd, 0x7d, 0x20, 0x20, 0x2b, 0xb1, 0x01, 0xc4, 0xb4, 0xfa, 0x00, 0x62, 0xc2, 0x41, 0x04,
    0xe4, 0x18, 0xeb, 0x16, 0x90, 0x43, 0x81, 0x08, 0xc8, 0xd1, 0xbf, 0x6c, 0x02, 0xb2, 0x8e, 0x07,
    0x83, 0x80, 0xac, 0xea, 0x99, 0x20, 0x20, 0x6b, 0x04, 0x11, 0x90, 0xd3, 0x68, 0x01, 0x62, 0xd1,
    0x40, 0x04, 0xe4, 0xa0, 0x5e, 0x80, 0x58, 0x6c, 0x10, 0x01, 0x59, 0xde, 0x2f, 0x4d, 0x40, 0xd6,
    0x0a, 0x22, 0x20, 0x2b, 0x77, 0x03, 0xc4, 0x72, 0x80, 0x08, 0xc8, 0x69, 0xed, 0x00, 0xb1, 0xe8,
    0x20, 0x02, 0xb2, 0x10, 0x3f, 0x40, 0x4c, 0x16, 0x88, 0x80, 0x1c, 0xc1, 0x10, 0x10, 0xcb, 0x03,
    0x22, 0x20, 0xa7, 0x53, 0x04, 0xc4, 0xb2, 0x82, 0x08, 0xc8, 0xba, 0x2c, 0x01, 0x31, 0x91, 0x20,
    0x02, 0xb2, 0x64, 0x4d, 0x40, 0x2c, 0x00, 0x88, 0x80, 0xfe, 0xff, 0xaf, 0x79, 0x7a, 0x55, 0x08,
    0xc8, 0x99, 0x41, 0x04, 0x64, 0x05, 0xaa, 0x80, 0x98, 0x1e, 0x10, 0x01, 0x59, 0xfb, 0x73, 0x4a,
    0x40, 0x0e, 0x02, 0x22, 0x20, 0xc7, 0x7a, 0xca, 0x04, 0x22, 0x21, 0x41, 0x04, 0x64, 0x41, 0x4f,
    0x09, 0x01, 0x59, 0x1d, 0x88, 0x06, 0x4f, 0x3e, 0x33, 0x81, 0x88, 0x72, 0x10, 0x01, 0x39, 0xe5,
    0x43, 0x22, 0x10, 0x89, 0x0c, 0xa2, 0xf3, 0x06, 0xf9, 0xd5, 0x04, 0x22, 0x72, 0x40, 0x04, 0x64,
    0xe9, 0xde, 0x06, 0x4b, 0x41, 0x04, 0xe4, 0x54, 0xe2, 0x80, 0x58, 0x46, 0x10, 0x01, 0x59, 0x89,
    0xbb, 0xc1, 0x52, 0x10, 0x01, 0x59, 0xa4, 0x3c, 0x20, 0x26, 0x19, 0x44, 0x40, 0x8e, 0xf6, 0xc7,
    0x13, 0x90, 0x73, 0x82, 0x08, 0xc8, 0xa9, 0xfd, 0x01, 0x31, 0x0d, 0x6f, 0x33, 0x01, 0x59, 0xff,
    0xd7, 0x22, 0x10, 0x09, 0x03, 0x22, 0x60, 0xf2, 0x9f, 0x08, 0x44, 0x82, 0x82, 0xe8, 0xd0, 0x40,
    0xfe, 0x1e, 0x81, 0x88, 0x6a, 0x10, 0x01, 0x39, 0xc3, 0x8b, 0x28, 0x10, 0x49, 0x04, 0xa2, 0x41,
    0x13, 0x95, 0x83, 0xa3, 0x20, 0x02, 0xb2, 0x38, 0x97, 0x40, 0x4c, 0x2a, 0x88, 0x06, 0x4d, 0x9e,
    0x19, 0x07, 0xc7, 0x40, 0x04, 0xe4, 0xc4, 0x6f, 0x8d, 0x40, 0x24, 0x3f, 0x88, 0x0e, 0x0c, 0xe4,
    0xbd, 0x16, 0x84, 0x68, 0x79, 0x80, 0xe8, 0x90, 0x40, 0x40, 0xe8, 0xff, 0x1f
    })

    //------------------------------------------------------------------------
    // Procedure:    WRGC
    // Description:  WMI Report Global Capability
    // Input:
    //   Arg0 : Sub-function number. Basically not used in WRGC.
    //   Arg1 : IIA0, Select capability data to return -
    //     0x00: Revision of AAEON ACPI WMI Specification
    //     0x01: Physical memory address of 4K byte data buffer
    //     0x02: Put capability in JSON format into data buffer
    //   Arg2 : IIA1, Basically not used in WRGC.
    // Output:
    //     Arg1 = 0x00, Return Value = Bit 15~0: Minor Version of spec
    //                              Bit 31~16: Major Version of spec
    //     Arg1 = 0x01, Return Value = (UINT32 *)address
    //     Arg1 = 0x02, Return Value = BFPI_STATUS_SUCCESS
    //-------------------------------------------------------------------------
    Method(WRGC, 3) {
      If (LEqual(Arg1, 0)) {  // Revision of AAEON ACPI WMI Spec.
        Return (ASL_BPIV)
      }
      If (LEqual(Arg1, 1)) {  // Physical memory address of 4K byte(?) data buffer
        Return (WDBA)
      }
      If (LEqual(Arg1, 2)) {  // Full capability in JSON format
        Store (BRGC, WDBF)
        Return (ASL_BFPI_SUCCESS)
      }
      If (LEqual(Arg1, 3)) {  // Return Board SKU ID
        Return (BBID)
      }
      If (LEqual(Arg1, 4)) {  // Return Panel ID
        Return (BPID)
      }
      If (LEqual(Arg1, 5)) {  // Extensions SPEC Supported
        Return (0x01)    // Currently support only Extension-1
      }
      Return(ASL_BFPI_INVALID_PARAMETER)
    }
  }  // Device(BFPI)
}  // Scope(\_SB)