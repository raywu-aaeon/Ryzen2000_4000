#***********************************************************************
#*                                                                     *
#*   Copyright (c) 1985-2021, American Megatrends International LLC.   *
#*                                                                     *
#*      All rights reserved. Subject to AMI licensing agreement.       *
#*                                                                     *
#***********************************************************************
## @file
#   This package files provides definitions for AMI specific interfaces and library classes.
##

[Defines]
  DEC_SPECIFICATION              = 0x00010005
  PACKAGE_NAME                   = AmiModulePkg
  PACKAGE_GUID                   = B379024F-9A3A-4e89-81C4-AC9BE251C6CE
  PACKAGE_VERSION                = 0.1

################################################################################
#
# Include Section - list of Include Paths that are provided by this package.
################################################################################
[Includes]
  Include
  ../Build

[Includes.Common.Private]
  PrivateInclude

[LibraryClasses]
  AmiAcpiCpuLib|Include/Library/AmiAcpiCpuLib.h
  AmiAmlLib|Include/Library/AmiAmlLib.h
  AmiBeepLib|Include/Library/AmiBeepLib.h
  AmiBufferValidationLib|Include/Library/AmiBufferValidationLib.h
  AmiCapsuleUpdateLib|Include/Library/AmiCapsuleUpdateLib.h
  AmiCriticalSectionLib|Include/Library/AmiCriticalSectionLib.h
  AmiFlashControlLib|Include/Library/AmiFlashControlLib.h
  AmiFlashLib|Include/Library/AmiFlashLib.h
  AmiFlashPlatformLib|Include/Library/AmiFlashPlatformLib.h
  AmiHiiLib|Include/Library/AmiHiiLib.h
  AmiHiiUpdateLib|Include/Library/AmiHiiUpdateLib.h
  AmiImageTypeLib|Include/Library/AmiImageTypeLib.h
  AmiItemListLib|Include/Library/AmiItemListLib.h
  AmiListLib|Include/Library/AmiListLib.h
  AmiPlatformDiscoveryLib|Include/Library/AmiPlatformDiscoveryLib.h
  AmiPerformanceProfilingLib|Include/Library/AmiPerformanceProfilingLib.h
  AmiPowerStateLib|Include/Library/AmiPowerStateLib.h
  AmiProgressReportLib|Include/Library/AmiProgressReportLib.h
  AmiRomLayoutLib|Include/Library/AmiRomLayoutLib.h
  AmiSecurePatchFvLib|Include/Library/AmiSecurePatchFvLib.h
  AmiSdlLib|Include/Library/AmiSdlLib.h
  AmiSmmCapsuleLib|Include/Library/AmiSmmCapsuleLib.h
  DriverNameLib|Include/Library/DriverNameLib.h
  PciAccessCspLib|Include/Library/PciAccessCspLib.h
  UefiAmiNvmeLib|Include/Library/UefiAmiNvmeLib.h
  AmiTopSwapLib|Include/Library/AmiTopSwapLib.h

[Protocols]
  ## Include/Protocol/AmiAtaPassThruInit.h
  gAmiAtaPassThruInitProtocolGuid = { 0xc6734411, 0x2dda, 0x4632, { 0xa5, 0x92, 0x92, 0x0f, 0x24, 0xd6, 0xed, 0x21 } }

  ## Include/Protocol/AmiAhciBusProtocol.h
  gAmiAhciBusProtocolGuid        = { 0xB2FA4764, 0x3B6E, 0x43D3, { 0x91, 0xDF, 0x87, 0xD1, 0x5A, 0x3E, 0x56, 0x68 } }
  gAmiAhciPlatformPolicyProtocolGuid = {0x17706d27, 0x83fe, 0x4770, {0x87, 0x5f, 0x4c, 0xef, 0x4c, 0xb8, 0xf6, 0x3d } }

  ## Include/Protocol/AmiAhciSmmProtocol.h
  gAmiAhciSmmProtocolGuid        = {0xB2FA5764, 0x3B6E, 0x43D3, { 0x91, 0xDF, 0x87, 0xD1, 0x5A, 0x3E, 0x56, 0x68 } }

  ## Include/Protocol/AmiBlockIoWriteProtection.h
  gAmiBlockIoWriteProtectionProtocolGuid = { 0x7f955a3e, 0xafb5, 0x4122, { 0xb9, 0x25, 0x4b, 0x11, 0x71, 0xf6, 0x93, 0xf5 } }

  ## Include/Protocol/AmiBoardInfo.h
  gAmiBoardInfoProtocolGuid      = { 0x0273146c, 0x96c4, 0x45a1, { 0xa7, 0xaf, 0x78, 0xe0, 0x52, 0x4a, 0x0a, 0xe2 } }
  gAmiBoardInfo2ProtocolGuid     = { 0x4FC0733F, 0x6FD2, 0x491b, { 0xA8, 0x90, 0x53, 0x74, 0x52, 0x1B, 0xF4, 0x8F } }
  gAmiBoardSioInitProtocolGuid   = { 0x9d36f7ef, 0x6078, 0x4419, { 0x8c, 0x46, 0x2b, 0xbd, 0xb0, 0xe0, 0xc7, 0xb3 } }
  gAmiBoardPciInitProtocolGuid   = { 0xEC63428D, 0x66CA, 0x4bf9, { 0x82, 0xAE, 0x84, 0x0F, 0x6D, 0x5C, 0x23, 0x05 } }
  gAmiExtPciBusProtocolGuid      = { 0xf42a009d, 0x977f, 0x4f08, { 0x94, 0x40, 0xbc, 0xa5, 0xa3, 0xbe, 0xd9, 0xaf } }

  ## Include/Protocol/AmiOutOfBandBootOrder.h
  gAmiOutOfBandBootOrderProtcolGuid = { 0x9aa85482, 0x6743, 0x4bfa, { 0xa7, 0x6c, 0xf3, 0x77, 0x88, 0x10, 0x40, 0x44 } }

  ## Include/Protocol/AmiCsmOpromPolicy.h
  gAmiCsmOpromPolicyProtocolGuid = { 0xdc14e697, 0x775a, 0x4c3b, { 0xa1, 0x1a, 0xed, 0xc3, 0x8e, 0x1b, 0xe3, 0xe6 } }

  ## Include/Protocol/AmiCsmVideoPolicy.h
  gAmiCsmVideoPolicyProtocolGuid = { 0x3a4e4376, 0x4871, 0x4b0e, { 0xa0, 0x2f, 0xed, 0x36, 0xf2, 0xae, 0xcd, 0x0 } }

  ## Include/Protocol/AmiFlash.h
  gAmiFlashProtocolGuid = { 0x755b6596, 0x6896, 0x4ba3, { 0xb3, 0xdd, 0x1c, 0x62, 0x9f, 0xd1, 0xea, 0x88 } }
  gAmiSmmFlashProtocolGuid = { 0xecb867ab, 0x8df4, 0x492d, { 0x81, 0x50, 0xa7, 0xfd, 0x1b, 0x9b, 0x5a, 0x75 } }

  ## Include/Protocol/AmiHddHpa.h
  gAmiHddHpaProtocolGuid = { 0x51aa65fc, 0x82b6, 0x49e6, { 0x95, 0xe2, 0xe6, 0x82, 0x7a, 0x8d, 0x7d, 0xb4 } }

  ## Include/Protocol/AmiHddOpalSecInit.h
  gAmiHddOpalSecInitProtocolGuid = { 0x59af16b0, 0x661d, 0x4865, { 0xa3, 0x81, 0x38, 0xde, 0x68, 0x38, 0x5d, 0x8d } }

  ## Include/Protocol/AmiHddPowerMgmt.h
  gAmiHddPowerMgmtProtocolGuid = { 0x67bc3883, 0x7e79, 0x4bc1, { 0xa3, 0x3e, 0x3a, 0xf7, 0xd1, 0x75, 0x89, 0xba } }

  ## Include/Protocol/AmiHddSecurityInit.h
  gAmiHddSecurityInitProtocolGuid = { 0xce6f86bb, 0xb800, 0x4c71, { 0xb2, 0xd1, 0x38, 0x97, 0xa3, 0xbc, 0x1d, 0xae } }
  gAmiTcgStorageSecurityInitProtocolGuid = { 0x734aa01d, 0x95ec, 0x45b7, { 0xa2, 0x3a, 0x2d, 0x86, 0xd8, 0xfd, 0xeb, 0xb6 } }

  ## Include/Protocol/AmiHddSecurity.h
  gAmiHddSecurityProtocolGuid = { 0xF4F63529, 0x281E, 0x4040, { 0xA3, 0x13, 0xC1, 0xD6, 0x76, 0x63, 0x84, 0xBE } }
  gAmiHddSecurityEndProtocolGuid = { 0xad77ae29, 0x4c20, 0x4fdd, { 0x85, 0x04, 0x81, 0x76, 0x61, 0x9b, 0x67, 0x6a } }
  gAmiOnboardRaidControllerGuid = { 0x5d206dd3, 0x516a, 0x47dc, { 0xa1, 0xbc, 0x6d, 0xa2, 0x04, 0xaa, 0xbe, 0x08 } }
  gAmiHddPasswordVerifiedGuid = { 0x1fd29be6, 0x70d0, 0x42a4, { 0xa6, 0xe7, 0xe5, 0xd1, 0x0e, 0x6a, 0xc3, 0x76 } }
  gAmiTcgStorageSecurityProtocolGuid = { 0xb396da3a, 0x52b2, 0x4cd6, { 0xa8, 0x9a, 0x13, 0xe7, 0xc4, 0xae, 0x97, 0x90 } }

  ## Include/Protocol/AmiHddSmartInit.h
  gAmiHddSmartInitProtocolGuid = { 0x9401bd4f, 0x1a00, 0x4990, { 0xab, 0x56, 0xda, 0xf0, 0xe4, 0xe3, 0x48, 0xde } }

  ## Include/Protocol/AmiHddSmart.h
  gAmiHddSmartProtocolGuid = { 0xFFBD9AD2, 0xF1DB, 0x4F92, { 0xA6, 0x49, 0xEB, 0x9E, 0xED, 0xEA, 0x86, 0xB5 } }

  ## Include/Protocol/AmiTemperatureProtocol.h
  gAmiHddTemperatureProtocolGuid = { 0xa993b66c, 0x22ea, 0x46ba,  { 0xa2, 0x7a, 0xa, 0x23, 0x35, 0x6d, 0x90, 0x1c } }

  ## Include/Protocol/AmiIdeBusProtocol.h
  gAmiPlatformIdeProtocolGuid =  { 0x6737f69b, 0xb8cc, 0x45bc, {0x93, 0x27, 0xcc, 0xf5, 0xee, 0xf7, 0xc, 0xde }}
  gAmiIdeBusInitProtocolGuid = { 0xe159a956, 0x3299, 0x4ee9, {0x91, 0x76, 0x65, 0x18, 0x1a, 0x4e, 0x5e, 0x9f }}

  ## Include/Protocol/AmiSataControllerProtocol.h
  gAmiSataControllerProtocolGuid = { 0x2acb6627, 0xdf02, 0x4e23, { 0xb4, 0xf9, 0x6a, 0x93, 0xfa, 0x6e, 0x9d, 0xa6 }}

  ## Include/Protocol/AmiRomLayout.h
  AmiRomLayoutProtocolGuid = { 0xaabe9a45, 0xb345, 0x49d2, { 0x88, 0xef, 0x6a, 0xd0, 0xb8, 0x5e, 0xd7, 0xe6 } }

  ## Include/Protocol/AmiScsiPassThruInit.h
  gAmiScsiPassThruInitProtocolGuid = { 0x0fc50878, 0x1633, 0x432a, { 0xbd, 0xe4, 0x84, 0x13, 0x57, 0xfc, 0x15, 0xe9 } }

  ## Include/Protocol/ErrorDisplayFrameworkProtocol.h
  gAmiErrorDisplayFrameworkProtocolGuid = { 0xec69a5fc, 0x83be, 0x43bb, { 0x87, 0xf7, 0x4b, 0x7, 0xe3, 0x14, 0xe7, 0xc0 } }

  ## Include/Protocol/TerminalAmiSerial.h
  gAmiSerialProtocolGuid     = { 0x50dc5c90,0x1d33,0x4fd6, { 0x87,0xe5,0x06,0x3b,0x1d,0xfa,0x21,0x70 } }

  ## Include/Protocol/LegacyBiosExt.h
  gEfiLegacyBiosExtProtocolGuid  = { 0x8e008510, 0x9bb1, 0x457d, { 0x9f, 0x70, 0x89, 0x7a, 0xba, 0x86, 0x5d, 0xb9 } }
  gAmiLegacyBootProtocolGuid     = { 0x120d28aa, 0x6630, 0x46f0, { 0x81, 0x57, 0xc0, 0xad, 0xc2, 0x38, 0x3b, 0xf5 } }
  gAmiOemCsm16BinaryGuid         = { 0xE998C6D8, 0x572B, 0x4e18, { 0x96, 0xCC, 0x03, 0x1E, 0xA3, 0xDD, 0x55, 0x8C } }
  gAmiPciIrqProgramGuid          = { 0x9400d59b, 0x0e9c, 0x4f6c, { 0xb5, 0x9a, 0xfc, 0x20, 0x00, 0x9d, 0xb9, 0xec } }
  gAmiCsmStartedProtocolGuid     = { 0x3EA824D1, 0x81E3, 0x4FF5, { 0xBD, 0x43, 0xBB, 0x9C, 0x65, 0xDF, 0x7C, 0x46 } }
  gOpromStartEndProtocolGuid     = { 0xf2a128ff, 0x257b, 0x456e, { 0x9d, 0xe8, 0x63, 0xe7, 0xc7, 0xdc, 0xdf, 0xac } }
  gAmiOpromPolicyProtocolGuid    = { 0x542d6248, 0x4198, 0x4960, { 0x9f, 0x59, 0x23, 0x84, 0x64, 0x6d, 0x63, 0xb4 } }
  gAmiPciOpromDataProtocolGuid   = { 0x30965142, 0xfc5a, 0x4e6e, { 0x94, 0xdb, 0xbb, 0xa4, 0x41, 0xb3, 0x68, 0x51 } }

  ## Include/Protocol/LegacyAhci.h
  gAint13ProtocolGuid            = { 0x67820532, 0x7613, 0x4dd3, { 0x9e, 0xd7, 0x3d, 0x9b, 0xe3, 0xa7, 0xda, 0x63 } }

  ## Include/Protocol/AmiSmiFlash.h
  gAmiSmiFlashProtocolGuid       = { 0x6f2c06a8, 0xd4b4, 0x4a93, { 0x9f, 0x78, 0x2b, 0x48, 0x0b, 0xe8, 0x0e, 0x0f } }
  ## Include/Protocol/SmiFlash.h
  ## This GUID is deprecated and should not be used. Use gAmiSmiFlashProtocolGuid instead.
  gEfiSmiFlashProtocolGuid       = { 0x6f2c06a8, 0xd4b4, 0x4a93, { 0x9f, 0x78, 0x2b, 0x48, 0x0b, 0xe8, 0x0e, 0x0f } }

  ## Include/Protocol/LegacySreDir.h
  gEfiLegacySredirProtocolGuid   = { 0xA062CF1F, 0x8473, 0x4aa3, { 0x87, 0x93, 0x60, 0x0B, 0xC4, 0xFF, 0xA9, 0xA9 } }

  ## Include/Protocol/SdioBus.h
  gSdioBusInitProtocolGuid       = { 0x94c69847, 0xa0cf, 0x4635, { 0xaa, 0x23, 0xd2, 0x66, 0x7b, 0xd7, 0xf7, 0x91 } }

  ## Include/Protocol/SdioInt13Protocol.h
  gEfiSdioProtocolGuid           = { 0x9708adb2, 0x28b1, 0x46f7, { 0x9a, 0x6c, 0xe7, 0x44, 0x97, 0xfa, 0x66, 0x79 } }

   ## Include/Protocol/TpmDevice.h
  gAmiTcgPlatformProtocolguid = { 0x8c939604, 0x700, 0x4415, { 0x9d, 0x62, 0x11, 0x61, 0xdb, 0x81, 0x64, 0xa6 } }
  gEfiTpmDeviceProtocolGuid = { 0xde161cfe, 0x1e60, 0x42a1, { 0x8c, 0xc3, 0xee, 0x7e, 0xf0, 0x73, 0x52, 0x12 } }

  ##Include/Protocol/TcgPlatformSetupPolicy.h
  gTcgPlatformSetupPolicyGuid =  {  0xbb6cbeff, 0xe072, 0x40d2, { 0xa6, 0xeb, 0xba, 0xb7, 0x5b, 0xde, 0x87, 0xe7 } }
  gAmiTpmSupportTypeProtocolguid = {0x320bdc39, 0x3fa0, 0x4ba9, {0xbf, 0x2d, 0xb3, 0x3f, 0x72, 0xba, 0x9c, 0xa1} }

  ## Include/Protocol/GenericElogProtocol.h
  gEfiGenericElogProtocolGuid           = { 0x59d02fcd, 0x9233, 0x4d34, { 0xbc, 0xfe, 0x87, 0xca, 0x81, 0xd3, 0xdd, 0xa7 } }
  gEfiGenericElogSmmProtocolInstallled  = { 0xa4223cf1, 0x6b27, 0x4994, { 0x8f, 0xcb, 0xa3, 0xa2, 0x79, 0xc0, 0x4e, 0x81 } }
  gEfiRedirElogProtocolGuid             = { 0x16d11030, 0x71ba, 0x4e5e, { 0xa9, 0xf9, 0xb4, 0x75, 0xa5, 0x49, 0x4, 0x8a } }

  ## Include/Protocol/SdioBus.h
  gSdioBusInitProtocolGuid = {0x94c69847, 0xa0cf, 0x4635, { 0xaa, 0x23, 0xd2, 0x66, 0x7b, 0xd7, 0xf7, 0x91 } }

  ## Include/Protocol/SdioInt13Protocol.h
  gEfiSdioProtocolGuid = { 0x9708adb2, 0x28b1, 0x46f7, { 0x9a, 0x6c, 0xe7, 0x44, 0x97, 0xfa, 0x66, 0x79 } }

  ## Include/Protocol/KeyMonPlatform.h
  gEfiKeyMonPlatformProtocolGuid  =  {0x13f40f6e, 0x50c1, 0x4b73, {0xb1, 0xe2, 0x6e, 0x72, 0xd2, 0x1c, 0xb0, 0x4a}}

  ## Include/Protocol/MonitorKeyFilter.h
  gEfiMonitorKeyFilterProtocolGuid = {0x9e43e128, 0xc74d, 0x42f4, {0x8c, 0xc, 0x48, 0x11, 0x67, 0x4a, 0x17, 0xb5}}

  ## Include/Protocol/AmiReflashProtocol.h
  gAmiReflashProtocolGuid        = { 0x8fe545e5, 0xdca9, 0x4d52, { 0xbf, 0xcd, 0x8f, 0x13, 0xe7, 0x17, 0x01, 0x5f } }

  ## Include/Protocol/AmiPlatformToDriverAgent.h
  gAmiPlatformToDriverAgentProtocolGuid = { 0x1dcfbaca, 0x6ada, 0x4c0d, { 0x86, 0xed, 0xaf, 0x65, 0x8b, 0xdf, 0xec, 0xc } }

  gAmiNvmeControllerProtocolGuid    = { 0xafa4cf3f, 0xaf71, 0x4c30, { 0xa4, 0xfb, 0x29, 0x10, 0xe7, 0x71, 0xf9, 0xb0 } }
  gAmiSmmNvmeControllerProtocolGuid = { 0xa9dd1597, 0xf2c5, 0x4cb6, { 0xaa, 0x7b, 0xee, 0x1, 0xae, 0x80, 0x61, 0x85 } }
  gAmiNvmePassThruProtocolGuid      = { 0x4b215191, 0x9a25, 0x43fd, { 0x86, 0xb5, 0x74, 0xe7, 0xaf, 0x72, 0x33, 0x15 } }
  gAmiSmmNvmePassThruProtocolGuid   = { 0xb91547f5, 0x4d24, 0x4eef, { 0x85, 0x7, 0x74, 0xdd, 0xab, 0xeb, 0x71, 0xad } }
  gAmiNvmeLegacyProtocolGuid        = { 0xd4e79dae, 0xaafc, 0x4382, { 0x95, 0x40, 0x3e, 0x3f, 0xa4, 0x2d, 0x42, 0x55 } }

  ## Include/Protocol/AmiTextOut.h
  gAmiTextOutProtocolGuid = { 0xe1e4a857, 0xc970, 0x4075, { 0xa4, 0xda, 0xe9, 0xc4, 0x1b, 0x69, 0xad, 0xfc } }

  ## Include/Protocol/AmiDebugService.h
  gAmiDebugServiceProtocolGuid = { 0x36232936, 0xe76, 0x31c8, { 0xa1, 0x3a, 0x3a, 0xf2, 0xfc, 0x1c, 0x39, 0x32 } }
  gAmiSmmDebugServiceProtocolGuid = { 0x441ffa18, 0x8714, 0x421e, { 0x8c, 0x95, 0x58, 0x70, 0x80, 0x79, 0x6f, 0xee } }

  ## Include/Protocol/AmiDebugPrintErrorLevelService.h
  gAmiDebugPrintErrorLevelServiceProtocolGuid = { 0x1103ce13, 0x8f69, 0x4cf2, { 0x8d, 0x41, 0xb8, 0x9, 0x28, 0x6c, 0xe5, 0x14 } }

  ## Include/Protocol/AmiUsbIad.h
  gAmiUsbIadProtocolGuid = { 0xa18976f, 0x6ca6, 0x405b, { 0xaf, 0x4b, 0x27, 0xb8, 0xf7, 0xf6, 0xdb, 0x98 } }

  ## Include/Protocol/AmiUsbVideo.h
  gAmiUsbVideoProtocolGuid = { 0x82820f9f, 0x4197, 0x46d0, { 0xa9, 0x6c, 0xb1, 0xd1, 0x5b, 0xad, 0x98, 0x8e } }

  ## Include/Protocol/AmiMultiPlatform.h
  gAmiMultiPlatformProtocolGuid = { 0x32d9116a, 0xaf15, 0x4976, { 0x90, 0x8c, 0x2c, 0x6e, 0x05, 0xcb, 0x78, 0x9a } }
  gAmiSmmMultiPlatformProtocolGuid = {0x19d92c2d, 0xf089, 0x4b7c, { 0xab, 0xe6, 0x33, 0x3a, 0x12, 0x5, 0xed, 0x89} }

  ## Include/Protocol/AmiNvramUpdate.h
  gAmiNvramUpdateProtocolGuid = { 0xdde31574, 0x3589, 0x4fa9, { 0xbc, 0x69, 0x17, 0x29, 0xaf, 0x6f, 0xda, 0x4e } }
  gAmiSmmNvramUpdateProtocolGuid = { 0xf3224a5e, 0x17a3, 0x47c2, { 0xa3, 0x8b, 0x48, 0x14, 0x56, 0x86, 0x3c, 0x74 } }

  ## Include/Protocol/AmiSioSmmHandoff.h
  gAmiSioSmmHandoffProtocolGuid = { 0x7576cc89, 0x8fa3, 0x4cad, { 0xba, 0x02, 0x61, 0x19, 0xb4, 0x6e, 0xd4, 0x4a } }

  ## Include/Protocol/AmiPciSmmHandoff.h
  gAmiPciSmmHandoffProtocolGuid = { 0x6fce3bb9, 0x9742, 0x4cfd, { 0x8e, 0x9e, 0x39, 0xf9, 0x8d, 0xca, 0x32, 0x71 } }

  ## Include/Protocol/AmiBdsConnectPolicy.h
  gAmiBdsConnectPolicyProtocolGuid = { 0x38d65ec3, 0x8f39, 0x4660, { 0xb8, 0xa6, 0xf3, 0x6a, 0xa3, 0x92, 0x54, 0x75 } }

  ## Include/Protocol/AmiOptionRomPolicy.h
  gAmiOptionRomPolicyProtocolGuid = { 0x934ce8da, 0x5e2a, 0x4184, { 0x8a, 0x15, 0x8e, 0x8, 0x47, 0x98, 0x84, 0x31 } }

  ## Include/Protocol/AmiFri.h
  gAmiFriProtocolGuid = { 0xbef4d2b1, 0xc53b, 0x4933, { 0xa3, 0xba, 0x2a, 0x42, 0x2c, 0x89, 0xa4, 0x39 } }

  ## Include/Protocol/AmiSmmBufferValidation.h
  gAmiSmmBufferValidationProtocolGuid = { 0xda473d7f, 0x4b31, 0x4d63, { 0x92, 0xb7, 0x3d, 0x90, 0x5e, 0xf8, 0x4b, 0x84 } }

  ## Include/Protocol/AmiBdsConnectDrivers.h
  gAmiBdsConnectDriversProtocolGuid = { 0x3aa83745, 0x9454, 0x4f7a, { 0xa7, 0xc0, 0x90, 0xdb, 0xd0, 0x2f, 0xab, 0x8e } }

  ## Include/Protocol/AmiPause.h
  gAmiPauseProtocolGuid = { 0xc7a047a8, 0x82b1, 0x48db, { 0x8e, 0x6a, 0x7b, 0x27, 0xcc, 0x7c, 0x56, 0x1f } }

  ## Include/Protocol/AmiBdsAllDriversConnected.h
  gAmiBdsAllDriversConnectedProtocolGuid = { 0xdbc9fd21, 0xfad8, 0x45b0, { 0x9e, 0x78, 0x27, 0x15, 0x88, 0x67, 0xcc, 0x93 } }

  ## Include/Protocol/AmiMouse.h
  gAmiMouseProtocolGuid = {0xc7a7030c, 0xc3d8, 0x45ee,{ 0xbe, 0xd9, 0x5d, 0x9e, 0x76, 0x76, 0x29, 0x53} }
  gAmiSoftKeyActivateProtocolGuid = {0x1172381f, 0x7ae6, 0x4652,{ 0x8d, 0x85, 0xb6, 0x51, 0x69, 0x7b, 0xe3, 0xcf} }
  gAmiSoftKeyDeactivateProtocolGuid = {0xd3431c06, 0x2b4c, 0x4337,{ 0x93, 0x34, 0xff, 0xd9, 0xc0, 0x55, 0x15, 0x21} }
  gAmiProcessEscKeyProtocolGuid = {0xd78ebe23, 0x7413, 0x43b9,{ 0x9d, 0x94, 0x44, 0x21, 0x6f, 0x4, 0xbb, 0x51} }
  gAmiProcessPostKeyProtocolGuid = {0x8a6e4fcf, 0x6e69, 0x4929,{ 0xa6,0x29, 0xa2, 0xca, 0xd6, 0xc5, 0xfc, 0x56} }

  ## Include/Protocol/AmiSerial.h
  gAmiSerialProtocolGuid = {0x50dc5c90, 0x1d33, 0x4fd6, { 0x87, 0xe5, 0x06, 0x3b, 0x1d, 0xfa, 0x21, 0x70 } }

  ## Include/Protocol/AmiResetRequest.h
  gAmiResetRequestProtocolGuid = { 0x83ca92cc, 0xe4c7, 0x4b2f, { 0xb6, 0x45, 0xf3, 0x70, 0xd7, 0xe5, 0x27, 0x41 } }

  ## Include/Protocol/AmiGraphicsSplitterModeChange.h
  gAmiGraphicsSplitterModeChangeProtocolGuid = { 0xc9a2603a, 0xd5d6, 0x4b64, { 0x83, 0x2b, 0x1a, 0xc, 0xb2, 0x41, 0x96, 0x69 } }

  ## Include/Protocol/AmiConInStarted.h
  gAmiConInStartedProtocolGuid   = { 0x2df1e051, 0x906d, 0x4eff, { 0x86, 0x9d, 0x24, 0xe6, 0x53, 0x78, 0xfb, 0x9e } }

  ## Include/Protocol/AmiConOutStarted.h
  gAmiConOutStartedProtocolGuid   = { 0xef9a3971, 0xc1a0, 0x4a93, { 0xbd, 0x40, 0x5a, 0xa1, 0x65, 0xf2, 0xdc, 0x3a } }

  ## Include/Protocol/AmiSmmDrivesShutdown.h
  gAmiSmmDrivesShutdownProtocolGuid = { 0xbfcda60a, 0xe8c7, 0x4160, { 0x80, 0x41, 0xf2, 0xce, 0x3d, 0x38, 0xad, 0x7d } }

  ## Include/Protocol/AmiKeepDeviceLocked.h
  gAmiKeepDeviceLockedProtocolGuid = { 0x73b1d339, 0xe4e8, 0x44e6, { 0x81, 0x51, 0xc2, 0xae, 0xcc, 0x9a, 0x15, 0x3b } }

  ## Include/Protocol/AmiTcps.h
  gAmiTcpsServiceBindingProtocolGuid   = { 0x04b37074, 0x6db5, 0x49cc, {0xbc, 0x00, 0x60, 0x12, 0xe0, 0x7d, 0x67, 0x26 }}
  gAmiTcpsProtocolGuid                 = { 0xe9e86c3a, 0x8e1b, 0x42a5, {0x8a, 0xd4, 0xbe, 0x64, 0xb9, 0x49, 0x7a, 0xfd }}

  ## PrivateInclude/Protocol/AmiPlatformProcessCapsule.h
  gAmiPlatformProcessCapsuleProtocolGuid = { 0xefe61723, 0xf2ee, 0x4b99, { 0x8e, 0xe7, 0x57, 0x2e, 0x34, 0xa3, 0xe4, 0x29 } }

  ## Include/Protocol/AmiBarcodeBase.h
  gAmiBarcodeBaseProtocolGuid = { 0x593ed818, 0x1ad7, 0x4f04, { 0x94, 0x5e, 0x4d, 0x6d, 0xe, 0x79, 0x42, 0xaf } }

  ## Include/Protocol/AmiBarcodeTypeRegistration.h
  gAmiBarcodeTypeRegistrationProtocolGuid = { 0xdcdae0b8, 0xc136, 0x4a2a, { 0x97, 0x8e, 0x84, 0x2, 0x4a, 0xa6, 0xd5, 0x55 } }

  ## Include/Protocol/AmiSmmCommunication.h
  gAmiSmmCommunicationProtocolGuid = { 0xca4148b9, 0x47f9, 0x4f50, { 0x93, 0xc0, 0xdb, 0x13, 0x6b, 0xfd, 0x9d, 0x9 } }

  ## Include/Protocol/AmiQrCode.h
  gAmiQrCodeProtocolGuid = { 0x86c98398, 0x959f, 0x4b57, { 0x8e, 0x0, 0xb3, 0xd7, 0x91, 0x30, 0x42, 0xa7 } }

[Ppis]
  ## Include/Ppi/AmiReadyToLoadDxeCore.h
  gAmiReadyToLoadDxeCorePpiGuid   = { 0x12025686, 0x3984, 0x466c, { 0x98, 0xb, 0x8b, 0x5e, 0x89, 0xda, 0x3, 0x19 } }

  ## Include/Ppi/PeiRecoverySerialModePpi.h
  gSerialRecoveryDevicePpiGuid   = { 0x5e7063d3, 0x0c12, 0x475b, { 0x98, 0x35, 0x14, 0xab, 0xb1, 0xcb, 0x0e, 0xe9 } }

  ## Include/Ppi/TcgService.h
  gPeiTcgPpiGuid  = { 0x177d39d2, 0x43b8, 0x40c8, { 0x9a, 0xe1, 0x3c, 0x51, 0x98, 0xd6, 0x94, 0x1e } }

  ## Include/Ppi/TpmDevice.h
  gPeiTpmPpiGuid   = { 0xca4853f4, 0xe94b, 0x42b4, { 0x86, 0x42, 0xcd,  0xe2, 0x8a, 0x7f, 0xac, 0x2d } }

  ## Include/Ppi/AmiTcgPlatform.h
  gAmiPlatformSecurityChipGuid  = { 0x5687f4a, 0x3ca7, 0x4d19, {0x9b, 0xc5, 0xe1, 0x80, 0xce, 0xa3, 0x56, 0x9f } }

  ## Include/Ppi/AmiTcgPlatform.h
  gAmiTcgPlatformPpiBeforeMem  = {0xc1e6791d, 0xf35b, 0x43ef, { 0x92, 0xa, 0xbe, 0x6, 0xba, 0x7f, 0x86, 0xa1 } }

  ## Include/Ppi/AmiTcgPlatform.h
  gAmiTcgPlatformPpiAfterMem  = {0x890c2cef, 0x43c8, 0x4209, { 0xa7, 0x8d, 0xae, 0x14, 0xaa, 0x17, 0x98, 0xb4 } }

  ## Include/Ppi/TcgPlatformSetupPeiPolicy.h
  gTcgPeiPolicyGuid  = {0xa76b4e22, 0xb50a, 0x401d,  { 0x8b, 0x35, 0x51, 0x24, 0xb0, 0xba, 0x41, 0x4  } }

  ## Include/Ppi/AmiDebugService.h
  gAmiDebugServicePpiGuid = {0x36232936, 0xe76, 0x31c8, { 0xa1, 0x3a, 0x3a, 0xf2, 0xfc, 0x1c, 0x39, 0x32} }

  ## Include/Ppi/AmiDebugPrintErrorLevelService.h
  gAmiDebugPrintErrorLevelServicePpiGuid = { 0x7cb7131b, 0x9b51, 0x45c8, { 0xb1, 0x5, 0x48, 0x1e, 0x98, 0x31, 0x48, 0x32 } }

  ## Include/Ppi/AmiTreePpi.h
  gAmiTreePpiGuid = {0x86f5680a, 0x155c, 0x4bc8,  { 0xac, 0x77, 0x57, 0x38, 0x48, 0xe2, 0xad, 0x3d } }

  ## Include/Ppi/AmiMultiPlatform.h
  gAmiMultiPlatformPpiGuid = {0xf04c91fd, 0x5aeb, 0x45bd, { 0xbe, 0x71, 0x65, 0x43, 0x59, 0x4, 0xc5, 0x68} }

  ## Include/Ppi/AmiPeiPciEnumeration.h
  gAmiPeiPciEnumerationPpiGuid =  {0xe7b5b715,0x1183, 0x4533, { 0xbe, 0x76, 0x56, 0xa6, 0xd7, 0xce, 0xb0, 0x2e } }

  ## Include/Ppi/AmiPeiPciResetResources.h
  gAmiPeiPciResetResourcesPpiGuid = {0xfb232edf, 0x6164, 0x483a, {0x94, 0xf4, 0x19, 0xb7, 0xac, 0xf9, 0x21, 0xd2 } }

  ## Include/Ppi/AmiPublishBlockIo.h
  gAmiPublishBlockIoPpiGuid = {0x6512cec3, 0x76e5, 0x4092, {0xb4, 0x42, 0x14, 0xa, 0xb6, 0xad, 0x95, 0xad} }
  
  
   gAcpisupguid = { 0xdbff9d55, 0x89b7, 0x46da, {0xbd, 0xdf, 0x67, 0x7d, 0x3d, 0xc0, 0x24, 0x1d }} 


[Guids]
  ## MdeModule package token space GUID
  # Include/Guid/AmiModulePkgTokenSpace.h
  gAmiModulePkgTokenSpaceGuid    = { 0xd34d3234, 0x38ba, 0x428b, { 0x9a, 0xcd, 0x84, 0xe8, 0x30, 0xa8, 0x07, 0x85 } }

  ## Include/Guid/RecoveryDevice.h
  gSerialCapsuleGuid             = { 0x699add70, 0x8554, 0x4993, { 0x83, 0xf6, 0xd2, 0xcd, 0xc0, 0x81, 0xdd, 0x85 } }
  gBlockDeviceCapsuleGuid        = { 0x0ba8263c, 0xa8bd, 0x4aad, { 0xb4, 0x02, 0x6a, 0x6a, 0xf2, 0xf7, 0xe7, 0x7d } }
  gOemCapsuleGuid                = { 0x595a6edc, 0x6d2c, 0x474a, { 0x90, 0x82, 0x3b, 0x99, 0x28, 0x51, 0xdf, 0xfe } }

  gWinCeGuid                     = { 0xC184562C, 0x6864, 0x40a3, { 0xA0, 0x81, 0xC8, 0xD3, 0x5E, 0x82, 0xB9, 0x20 } }
  gAmiCsmThunkDriverGuid         = { 0x2362ea9c, 0x84e5, 0x4dff, { 0x83, 0xbc, 0xb5, 0xac, 0xec, 0xb5, 0x7c, 0xbb } }

  ## Include/Guid/AmiDevicePath.h
  gAmiIso9660MediaGuid           = { 0xba7c46d1, 0x9c5e, 0x4fc8, { 0x94, 0x3d, 0x1a, 0x49, 0x1f, 0x23, 0xfe, 0x01 } }
  gAmiUdfMediaGuid               = { 0x7465ba75, 0x88a7, 0x4b61, { 0x9a, 0x7e, 0x6d, 0x4e, 0xdf, 0x68, 0x04, 0xdc } }

  ## Include/Guid/AmiGlobalVariable.h
  gAmiGlobalVariableGuid         = { 0x1368881, 0xc4ad, 0x4b1d, { 0xb6, 0x31, 0xd5, 0x7a, 0x8e, 0xc8, 0xdb, 0x6b } }

  ## Include/Guid/AmiRomLayout.h
  gAmiRomLayoutFfsFileGuid       = { 0xc91c3c17, 0xfc74, 0x46e5, { 0xbd, 0xbe, 0x6f, 0x48, 0x6a, 0x5a, 0x9f, 0x3c } }
  gAmiRomLayoutGuid              = { 0x00781ca1, 0x5de3, 0x405f, { 0xab, 0xb8, 0x37, 0x9c, 0x3c, 0x7, 0x69, 0x84 } }

  gAmiSmiVariableDxeDriverStartedGuid =  { 0xc35f9520, 0x5791, 0x4667, { 0xad, 0xe4, 0x1c, 0xfd, 0xa8, 0x37, 0x72, 0x2d } }

  ## Include/Guid/AmiPerformanceProfiling.h
  gAmiPerformanceProfilingGuid = { 0x28d4dd89, 0x169e, 0x49dd, { 0x84, 0x86, 0xa2, 0x0, 0xa2, 0xfd, 0x3c, 0x21 } }
  gAmiPerformanceProfilingExGuid = { 0x5bea16c0, 0xfce5, 0x403a, { 0x91, 0x8, 0x2, 0xc0, 0xfd, 0xa, 0x95, 0xd } }

  ## Include/Guid/AmiNvram.h
  gAmiNvramMainRomAreaGuid = { 0xfa4974fc, 0xaf1d, 0x4e5d, { 0xbd, 0xc5, 0xda, 0xcd, 0x6d, 0x27, 0xba, 0xec } }
  gAmiNvramBackupRomAreaGuid = { 0xa7edebd8, 0xa8d7, 0x48f8, { 0x81, 0xfb, 0x83, 0x76, 0x56, 0xb8, 0x20, 0x77 } }
  gAmiNvramSmmCommunicationGuid = { 0x45ac8863, 0xe3fa, 0x4a38, { 0xa2, 0x3c, 0x0, 0xbc, 0xd1, 0xc, 0xbd, 0x50 } }

  # GUIDs used to store and extract AMI Board Info Meta data.
  gAmiBoardInfoFileGuid          = { 0x7b9a0a12, 0x42f8, 0x4d4c, { 0x82, 0xb6, 0x32, 0xf0, 0xca, 0x19, 0x53, 0xf4 } }
  gAmiBoardInfoSectionGuid       = { 0x9bec7109, 0x6d7a, 0x413a, { 0x8e, 0x4b, 0x1,  0x9c, 0xed, 0x5,  0x3,  0xe1 } }
  gAmiAslDsdtFileGuid            = { 0xc118f50d, 0x391d, 0x45f4, { 0xb3, 0xd3, 0x11, 0xbc, 0x93, 0x1a, 0xa5, 0x6d } }

  ## GUID used by NVME module
  gAmiSmmNvmeCommunicationGuid   = { 0xec2bd1fd, 0xe3b0, 0x429b, { 0xad, 0xdf, 0x96, 0x57, 0x93, 0x5a, 0x36, 0x84 } }

  ## Include/Guid/AmiPlatformInfo.h
  gAmiPlatformInfoHobGuid = { 0x874e9954, 0x24d4, 0x43e6, { 0x90, 0xa1, 0xc5, 0x77, 0x53, 0x40, 0xcf, 0x45 } }
  gAmiPlatformInfoUncompressedFfsSectionGuid = { 0x0eecb4a5, 0x7b9f, 0x4707, { 0x81, 0xd7, 0x9c, 0x04, 0x5e, 0x98, 0xca, 0x95 } }
  gAmiPlatformInfoCompressedFfsSectionGuid = { 0xee257f8f, 0xe710, 0x4181, { 0x9b, 0x01, 0xc0, 0x66, 0x98, 0x45, 0x4a, 0x16 } }
  gAmiPlatformInfoFfsFileGuid = { 0x0fc38c56, 0x500a, 0x4654, { 0x89, 0xa7, 0xf4, 0x3c, 0x1a, 0x38, 0x43, 0xf5 } }

  ## Include/Guid/AmiResetSystemEvent.h
  gAmiResetSystemEventGuid = { 0x62da6a56, 0x13fb, 0x485a, { 0xa8, 0xda, 0xa3, 0xdd, 0x79, 0x12, 0xcb, 0x6b } }

  ## Include/Guid/AmiFri.h
  gAmiFriVariableGuid = { 0x280bcc15, 0x2cd7, 0x467c, { 0x96, 0x47, 0x1b, 0x30, 0x30, 0x7d, 0x7e, 0xd5 } }

  ## Include/Protocol/AmiBdsConnectPolicy.h
  gAmiBdsConnectPolicyExternalOptionRomGuid = { 0x2f7ca0da, 0x9ce, 0x44a8, { 0x84, 0xc9, 0xbb, 0x2, 0x29, 0x8b, 0x55, 0xb8 } }

  ## Include/Guid/AmiSetupVariable.h
  gAmiSetupVariableGuid  = { 0xec87d643, 0xeba4, 0x4bb5, { 0xa1, 0xe5, 0x3f, 0x3e, 0x36, 0xb2, 0x0d, 0xa9 } }

  ## Include/Guid/AmiBeforeExitBootServicesEvent.h
  gAmiBeforeExitBootServicesEventGuid  = { 0x8be0e274, 0x3970, 0x4b44, { 0x80, 0xc5, 0x1a, 0xb9, 0x50, 0x2f, 0x3b, 0xfc } }

  ## Include/Guid/AmiBeforeLegacyBootEvent.h
  gAmiBeforeLegacyBootEventGuid  = { 0xacbd2563, 0x725d, 0x4bd8, { 0xb4, 0xb6, 0x4e, 0x55, 0x71, 0xa3, 0x6b, 0x50 } }

  ## Include/Guid/AmiKmsAuthentication.h
  gAmiKmsClientCertificateGuid  = { 0x38ec7076, 0xf2c0, 0x44ea, {0x93, 0xe7, 0x58, 0x13, 0xbc, 0x4d, 0xf8, 0x58 }}
  gAmiKmsClientPrivateKeyGuid   = { 0x030f0296, 0x355a, 0x43bf, {0xb7, 0xbb, 0xc1, 0x74, 0x7d, 0xce, 0xf4, 0x70 }}
  gAmiKmsCaCertificateGuid      = { 0x67f012ec, 0x2ed4, 0x43f4, {0x8b, 0x7a, 0x82, 0xed, 0x73, 0xdc, 0x99, 0xcf }}

  ## Include/Guid/AmiAcpiSmmCommunucationTable.h
  gAmiAcpiSmmCommunucationTableGuid = { 0xbaedb05d, 0xf2ce, 0x485b, { 0xb4, 0x54, 0xc2, 0x51, 0x87, 0xc, 0xde, 0xfc } }

[PcdsFixedAtBuild, PcdsPatchableInModule, PcdsDynamic, PcdsDynamicEx]
  gAmiModulePkgTokenSpaceGuid.PcdCdRecoverySupport|TRUE|BOOLEAN|0x00000000
  gAmiModulePkgTokenSpaceGuid.PcdFatRecoverySupport|TRUE|BOOLEAN|0x00000001
  gAmiModulePkgTokenSpaceGuid.PcdRecoveryImageSize|0|UINT32|0x00000002
  gAmiModulePkgTokenSpaceGuid.PcdIso9660Support|FALSE|BOOLEAN|0x00000003
  gAmiModulePkgTokenSpaceGuid.PcdUseNewImageOnFlashUpdate|TRUE|BOOLEAN|0x00000004
  gAmiModulePkgTokenSpaceGuid.PcdUdfSupport|FALSE|BOOLEAN|0x00000005
  gAmiModulePkgTokenSpaceGuid.PcdRecoveryImageName|"AMI.ROM"|VOID*|0x00000006
  gAmiModulePkgTokenSpaceGuid.PcdDefaultCursorState|TRUE|BOOLEAN|0x00000007
  ## Forces system to setup on failed recovery.
  # NOTE: This PCD has no effect when AmiPcdForceShutdownOnFailedRecovery is set to TRUE.
  gAmiModulePkgTokenSpaceGuid.PcdForceSetupOnFailedRecovery|TRUE|BOOLEAN|0x00000008
  gAmiModulePkgTokenSpaceGuid.AmiPcdCheckDriverHealthStatus|FALSE|BOOLEAN|0x0000000A
  gAmiModulePkgTokenSpaceGuid.AmiPcdShowDriverHealthStatusMessagesOnQuietBoot|FALSE|BOOLEAN|0x0000000B
  gAmiModulePkgTokenSpaceGuid.AmiPcdNumberOfRetriesOnNoMedia|1|UINT32|0x0000000C
  gAmiModulePkgTokenSpaceGuid.AmiPcdLoadUnsignedEmbeddedApplications|TRUE|BOOLEAN|0x0000000D
  gAmiModulePkgTokenSpaceGuid.AmiPcdInstallEsrtTable|FALSE|BOOLEAN|0x0000000E
  ## Bit mask that defines NVRAM reset behavior.
  # BIT0 - Preserve variables that have no default value during NVRAM reset.
  # BIT1 - Preserve persistent variables during NVRAM reset.
  gAmiModulePkgTokenSpaceGuid.AmiPcdNvramResetPropertyMask|0|UINT32|0x0000000F
  ## Bit mask that defines properties of the flash device.
  # BIT0 - flash device is not memory mapped when flash writes are enabled
  # BIT1 - flash device is not memory mapped when flash writes are disabled
  # (if flash device is not memory map under any circumstances both BIT0 and BIT1 have to be set)
  # BIT2 - flash device has a zero flash erase polarity (if BIT3 is not set, device has erase polarity 1)
  gAmiModulePkgTokenSpaceGuid.AmiPcdFlashPropertyMask|0|UINT32|0x00000010
  ## This PCD is used  in PCI Express Multiple Segment support
  gAmiModulePkgTokenSpaceGuid.AmiPcdMaxSegmentSupported|1|UINT32|0x000000015
  ## Defines handling of recovery failure.
  # When recovery fails and this PCD token is FALSE, systems continues the boot process with existing BIOS image.
  # When recovery fails and this PCD token is TRUE, systems shuts down at the end of DXE IPL.
  gAmiModulePkgTokenSpaceGuid.AmiPcdForceShutdownOnFailedRecovery|FALSE|BOOLEAN|0x00000020
  ## Bit mask that defines BDS execution policy
  # Default value of zero sets the most relaxed policy when all processing steps are executed.
  # Setting individual bits disables certain processing steps either unconditionally or when particular boot path is taken.
  # BIT0, BIT1 - DriverXXX and SysPrepXXX processing policy
  #   00 - Always perform DriverXXX and SysPrepXXX processing
  #   01 - Do not process DriverXXX and SysPrepXXX variables when secure boot is disabled
  #   11 - Never process DriverXXX and SysPrepXXX variables
  # BIT2, BIT3 - Third party (those that are not embedded into a system firmware) option ROM processing policy
  #   00 - Always launch third party option ROM
  #   01 - Do not launch third party option ROM when secure boot is disabled
  #   11 - Never launch third party option ROM
  gAmiModulePkgTokenSpaceGuid.AmiPcdBdsPolicyMask|0|UINT32|0x00000021
  ## Bit mask that defines BDS execution policy in Recovery and Flash Update boot modes.
  # The format of this PCD token is the same as format of the AmiPcdBdsPolicyMask PCD token.
  # NOTE: AmiPcdBdsPolicyMaskOnRecoveryAndFlashUpdate must never set a policy that is more relaxed
  # than policy set forth by AmiPcdBdsPolicyMask.
  gAmiModulePkgTokenSpaceGuid.AmiPcdBdsPolicyMaskOnRecoveryAndFlashUpdate|0|UINT32|0x00000022
  gAmiModulePkgTokenSpaceGuid.gAmiBdsPlatformDriverOverrideSupport|FALSE|BOOLEAN|0x00000029
  ## Force specific boot mode
  # 0 - Normal boot
  # 1 - Boot in recovery mode
  # 2 - Boot on flash update
  gAmiModulePkgTokenSpaceGuid.AmiPcdForceBootMode|0|UINT8|0x00000032

[PcdsFeatureFlag]
  gAmiModulePkgTokenSpaceGuid.AmiPcdPerformanceProfilingSupport|FALSE|BOOLEAN|0x00000009
  gAmiModulePkgTokenSpaceGuid.AmiPcdNvramSmmSupport|FALSE|BOOLEAN|0x00000011

[PcdsFixedAtBuild]
  ## Bit mask that defines protections supported by AmiBufferValidationLib.
  # Default value of zero sets the strongest level of protection.
  # Setting individual bits disables certain types of buffer validation.
  # BIT0 - allow access to memory regions that after ExitBootServices are owned by OS.
  #   If BIT0 is set, system is not compliant with Microsoft Device Guard requirements.
  #   If BIT0 is not set, OS applications that allocate SMM Communication
  #   memory using OS services and Firmware drivers that use boot time memory
  #   for SMM Communication buffers will not work.
  # BIT1 - allow MMIO in the regions marked as reserved in GCD memory map.
  # BIT2 - allow MMIO in the regions marked as non-existent in GCD memory map.
  #   BIT2 must be set if PCI bus enumeration happens after EndOfDxe,
  #   which is the case when BDS SDL token BDS_START_PCI_BEFORE_END_OF_DXE is to Off.
  #   Enabling MMIO in non-existent regions is required because depending on implementation
  #   of the PCI root bridge driver, PCI resources may get added to GCD only during PCI enumeration.
  #   Since AmiBufferValidationLib saves GCD map in the EndOfDxe callback, all non-existent memory
  #   ranges have to be treated by the library as a potential PCI MMIO space.
  gAmiModulePkgTokenSpaceGuid.AmiPcdSmmMemLibProperties|0|UINT32|0x000000016
  ## Size of the EfiRuntimeServicesData buffer allocated by firmware and used by OS applications for SMM communication.
  gAmiModulePkgTokenSpaceGuid.AmiPcdSmmCommunicationBufferSize|0x20000|UINT32|0x000000017
  ## SW SMI that is used to manage buffer allocated by firmware and used by OS applications for SMM communication.
  gAmiModulePkgTokenSpaceGuid.AmiPcdSmmCommunicationBufferSwSmi|0xD9|UINT8|0x000000018
  ## Default memory quotas for different memory types in 4K pages.
  # Set to 0 to disable memory usage tracking for a type.
  gAmiModulePkgTokenSpaceGuid.AmiPcdRuntimeServicesCodePages|0x30|UINT32|0x00000023
  gAmiModulePkgTokenSpaceGuid.AmiPcdRuntimeServicesDataPages|0x20|UINT32|0x00000024
  gAmiModulePkgTokenSpaceGuid.AmiPcdAcpiMemoryNvsPages|0x60|UINT32|0x00000025
  gAmiModulePkgTokenSpaceGuid.AmiPcdAcpiReclaimMemoryPages|0x10|UINT32|0x00000026
  gAmiModulePkgTokenSpaceGuid.AmiPcdReservedMemoryTypePages|0x30|UINT32|0x00000027
  gAmiModulePkgTokenSpaceGuid.AmiPcdBootServicesCodePages|0x60|UINT32|0x00000030
  gAmiModulePkgTokenSpaceGuid.AmiPcdBootServicesDataPages|0x100|UINT32|0x00000031

  ## Enables/disables PCI-E initialization performed by Aptio PciBus driver
  ## Set to FALSE if PCI-E initialization is performed by chipset code
  gAmiModulePkgTokenSpaceGuid.AmiPcdPcieProgrammingSupport|FALSE|BOOLEAN|0x00000028

  ## Bit mask that defines properties of the
  # SMM Communication Interface
  # BIT0 - New style (revision 2) interface support
  #   0 - Support legacy (revision 1) interface
  #   1 - Support new style (revision 2) interface
  # BIT1 - x86 Register Buffer Interface Support; this bit is ignored when BIT0 is 0
  #   0 - Not supported
  #   1 - Supported
  gAmiModulePkgTokenSpaceGuid.AmiPcdSmmCommInterfaceProperties|0|UINT32|0x0000001A

  ## The AmiPcdQrXxx PCDs below define default QR code characteristics
  # that are used by the AmiQrCode driver to construct QR codes.

  ## QR code version.
  # Should be between AMI_QR_CODE_MIN_VERSION and AMI_QR_CODE_MAX_VERSION
  # values defined in Include/Protocol/AmiQrCode.h
  gAmiModulePkgTokenSpaceGuid.AmiPcdQrCodeVersion|0x8|UINT32|0x000000033
  ## QR code error correction level.
  # Refer to AMI_QR_ERROR_CORRECTION_LEVEL enum in Include/Protocol/AmiQrCode.h
  # for a list of acceptable values.
  gAmiModulePkgTokenSpaceGuid.AmiPcdQrCodeErrorLevel|0|UINT8|0x000000034
  ## QR code encoding mode.
  # Refer to AMI_QR_ENCODE_MODE enum in Include/Protocol/AmiQrCode.h
  # for a list of acceptable values.
  gAmiModulePkgTokenSpaceGuid.AmiPcdQrCodeEncodeMode|0x2|UINT8|0x000000035
  ## QR code color in EFI_GRAPHICS_OUTPUT_BLT_PIXEL format.
  gAmiModulePkgTokenSpaceGuid.AmiPcdQrCodeColor|{0,0,0,0}|VOID*|0x00000036
  ## Indicates whether QR code should preserve original string case(upper/lower)
  # TRUE - preserve the original case; FASEL - convert to uppercase
  gAmiModulePkgTokenSpaceGuid.AmiPcdQrCodeCaseSensitive|TRUE|BOOLEAN|0x00000037
  ## QR code has enlargement factor.
  # Should be between AMI_QR_CODE_MIN_SCALE_FACTOR and AMI_QR_CODE_MAX_SCALE_FACTOR
  # values defined in Include/Protocol/AmiQrCode.h
  gAmiModulePkgTokenSpaceGuid.AmiPcdQrCodeScaleFactor|0x3|UINT8|0x000000038

[PcdsDynamic, PcdsDynamicEx]
  ## This PCD is used  in PEI phase during PCI enumeration. It defines the last assigned PCI bus number.
  gAmiModulePkgTokenSpaceGuid.AmiPcdPeiPciEnumerationLastBusNumber|0x0|UINT8|0x00000012
  ## This PCD is used in PEI phase during PCI enumeration. It defines end of the address range
  ## that can be assigned to PCI devices. PCI resources are allocated top to bottom.
  gAmiModulePkgTokenSpaceGuid.AmiPcdPeiPciMmioTopAddress|0x0|UINT64|0x00000013
  ## This PCD is used in PCI Express Multiple Segment support.
  ## This is an array of UINT64 addresses with AmiPcdMaxSegmentSupported elements.
  gAmiModulePkgTokenSpaceGuid.AmiPcdPcieBaseAddressBuffer|{0,0,0,0,0,0,0,0}|VOID*|0x00000014
  ## This PCD is used by PCI bus driver to indicate out-of-resources condition
  gAmiModulePkgTokenSpaceGuid.AmiPcdPciOutOfResourcesStatus|FALSE|BOOLEAN|0x00000019
