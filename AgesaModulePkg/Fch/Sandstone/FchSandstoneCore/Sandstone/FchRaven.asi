Name (TSOS, 0x75)

If(CondRefOf(\_OSI)) {
  If(\_OSI("Windows 2009")) {
    Store(0x50, TSOS)
  }
  If(\_OSI("Windows 2015")) {
    Store(0x70, TSOS)
  }
// Remove _OSI String of “Linux”
//  If(\_OSI("Linux")) {
//    Store(0x80, TSOS)
//  }
} // End of \_OSI

Scope(\_SB) {
  OperationRegion( SMIC, SystemMemory, 0xFED80000, 0x800000)
  Field( SMIC, ByteAcc, NoLock, Preserve) {
    offset (0x036A),
    SMIB, 8,
  }

  OperationRegion(SSMI, SystemIo, SMIB, 0x02)
  Field(SSMI, AnyAcc, NoLock, Preserve) {
    SMIW, 16,
  }

  OperationRegion(ECMC, SystemIo, 0x72, 0x02)
  Field(ECMC, AnyAcc, NoLock, Preserve) {
    ECMI, 8,
    ECMD, 8,
  }
  IndexField(ECMI, ECMD, ByteAcc, NoLock, Preserve) {
    Offset (0x08),
    FRTB, 32,
  }

  OperationRegion(FRTP, SystemMemory, FRTB, 0x100)
  Field(FRTP, AnyAcc, NoLock, Preserve) {
    PEBA, 32,
    Offset (0x04),
    SPIE, 1,      // SPI Enable, 0
    P80E, 1,      // Port80 Enable, 0
    SPID, 1,      // SPI controller for driver _HID as AMDI0061
    , 1,
    NI2C, 1,      // NI2C, 4, Normal I2CA & I2CB
    IC0E, 1,      // I2C0, 5
    IC1E, 1,      // I2C1, 6
    IC2E, 1,      // I2C2, 7
    IC3E, 1,      // I2C3, 8
    IC4E, 1,      // I2C3, 9
    IC5E, 1,      // I2C3, 10
    UT0E, 1,      // UART0, 11
    UT1E, 1,      // UART1, 12
    , 1,
    , 1,
    ST_E, 1,      // SATA, 15
    UT2E, 1,      // UART2, 16
    , 1,
    EMMD, 2,      // 18-19, EMMC Driver type, 0:AMD eMMC Driver (AMDI0040) 1:MS SD Driver (PNP0D40) 2:0:MS eMMC Driver (AMDI0041)
    SDMC, 1,      //
    , 2,
    XHCE, 1,      // XCHI, 23
    , 1,
    , 1,
    UT3E, 1,      // UART3, 26
    ESPI, 1,      // ESPI  27
    EMME, 1,      // EMMC  28
    UTDT, 1,      //UART Driver Type, 29
    Offset (0x08),
    PCEF, 1,      // Post Code Enable Flag
    , 4,
    IC0D, 1,      // I2C0, 5
    IC1D, 1,
    IC2D, 1,
    IC3D, 1,      // I2C3, 8
    IC4D, 1,      // I2C3, 9
    IC5D, 1,      // I2C3, 10
    UT0D, 1,      // UART0, 11
    UT1D, 1,      // UART1, 12
    , 1,
    , 1,
    ST_D, 1,      // SATA, 15
    UT2D, 1,      // UART2, 16
    , 1,
    EHCD, 1,      // EHCI, 18
    , 4,
    XHCD, 1,      // XCHI, 23
    SD_D, 1,      // SD,   24
    , 1,
    UT3D, 1,      // UART1, 26
    , 1,
    EMD3, 1,      // EMMC D3  28
    , 2,
    S03D, 1,      // S0I3 flag, 31
    Offset (0x0C),
    FW00, 16,
    FW01, 32,
    FW02, 16,
    FW03, 32,
    SDS0, 8,      // SataDevSlpPort0S5Pin
    SDS1, 8,      // SataDevSlpPort1S5Pin
    CZFG, 1,      // Carrizo Serials
    Offset (0x20),
    SD10, 32,
    EH10, 32,
    XH10, 32,
    STBA, 32,
  }

  OperationRegion(FCFG, SystemMemory, PEBA, 0x01000000)
  Field(FCFG, DwordAcc, NoLock, Preserve) {
    Offset(0x000A3044),
    IPDE,  32,    // IO Port Decode Enable
    Offset(0x000A3048),
    IMPE,  32,    // IO Memory Port decode Enable
    Offset(0x000A306C),
    RAR2,  32,    //D14F3x6C ROM Address Range 2
    Offset(0x000A3078),
    , 2,
    LDQ0,  1,

    Offset(0x000A30CB),
    ,  7,
    AUSS,  1,     // AutoSizeStart

    Offset(0x000A30D0),
    ,  13,
    LCLK,  2,     // LPC clock0/1
  }

  OperationRegion(IOMX, SystemMemory, 0xFED80D00, 0x100)
  Field(IOMX, AnyAcc, NoLock, Preserve) {
    Offset (0x15),
    IM15, 8,      //
    Offset (0x16),
    IM16, 8,      //
    Offset (0x1F),
    IM1F, 8,      //
    Offset (0x20),
    IM20, 8,      //
    Offset (0x44),
    IM44, 8,      //
    Offset (0x46),
    IM46, 8,      //
    Offset (0x4A),
    IM4A, 8,      //
    Offset (0x4B),
    IM4B, 8,      //
    Offset (0x57),
    IM57, 8,      //
    Offset (0x58),
    IM58, 8,      //
    Offset (0x68),
    IM68, 8,      //
    Offset (0x69),
    IM69, 8,      //
    Offset (0x6A),
    IM6A, 8,      //
    Offset (0x6B),
    IM6B, 8,      //
    Offset (0x6D),
    IM6D, 8,      //
  }

  OperationRegion(FMIS, SystemMemory, 0xFED80E00, 0x100)  // Fch Miscellaneous registers
  Field(FMIS, AnyAcc, NoLock, Preserve) {
    // MISCx00040 [MiscClkCntl1] (MiscClkCntl1)
    // Bit13 ISP_24M_EnB
    // Reset: 0. 0=Enable. 1= Disable. ISP 24M Clock Enable/Disable.
    Offset (0x40),
    , 13,
    I24M,1,
  }

  OperationRegion(FGIO, SystemMemory, 0xFED81500, 0x300)  // Fch GPIO
  Field(FGIO, AnyAcc, NoLock, Preserve) {
    // DEVICE_ID_FCAM
    //#define FCAM_POWER_EN               42    // EGPIO42 S5 Power Domain
    Offset (0xA8),
    , 22,         //
    O042,1,

    // DEVICE_ID_RCAM
    //#define RCAM_POWER_EN               89    // AGPIO89 S0 Power Domain
    Offset (0x164),
    , 22,         //
    O089,1,
  }

  OperationRegion(FACR, SystemMemory, 0xFED81E00, 0x100)  // Fch AoaC Register
  Field(FACR, AnyAcc, NoLock, Preserve) {
    Offset (0x80),
    , 28,
    RD28, 1,      // Request of Device 28, MAP
    , 1,
    RQTY, 1,      // ReQuestTYpe
    Offset (0x84),
    , 28,
    SD28, 1,      // Status of Device 28, MAP
    , 1,
    Offset (0xA0),// AOACx0000A0 [PwrGood Control] (PwrGoodCtl)
    PG1A, 1,
  }

  OperationRegion(EMMX, SystemMemory, 0xFEDD5800, 0x130)
  Field(EMMX, AnyAcc, NoLock, Preserve) {
    Offset (0xD0),
    , 17,
    FC18, 1,      // Force1.8v
    FC33, 1,      // Force3.3v
    , 7,          //
    CD_T, 1,      // CD_TIE, 26
    WP_T, 1,      // WP_TIE, 27
  }

  OperationRegion(EMMB, SystemMemory, 0xFEDD5800, 0x130)
  Field(EMMB, AnyAcc, NoLock, Preserve) {
    Offset (0xA4),
    E0A4,  32,
    Offset (0xA8),
    E0A8,  32,
    Offset (0xB0),
    E0B0,  32,
    Offset (0xD0),
    E0D0,  32,
    Offset (0x116),
    E116,  32,
  }

  OperationRegion(SPIM, SystemMemory, 0xFEC10000, 0x100)  // SPI Mmio Register
  Field(SPIM, AnyAcc, NoLock, Preserve) {
    Offset (0x1D),
    ASCE,2,  // AltSpiCsEn
    Offset (0x22),
    SSSC, 16,  // SPIx22 SPI100 Speed Config
    Offset (0xFC),
    STRN,1,  // Spi TuRN
    , 2,
    BOWS,1,  //Bios OWnerShip
    DOWS,1,  //Driver OWnerShip
  }
  Mutex (ASSM, 0) //Amd Spi Semaphore Mutex
  Name (SVBF, Buffer (0x100) {0})
  CreateDWordField(SVBF, 0x000, S0A4)
  CreateDWordField(SVBF, 0x004, S0A8)
  CreateDWordField(SVBF, 0x008, S0B0)
  CreateDWordField(SVBF, 0x00C, S0D0)
  CreateDWordField(SVBF, 0x010, S116)
  CreateWordField(SVBF, 0x014, RG22)
  CreateDWordField(SVBF, 0x018, SAR2)

  // Save Emmc Configure Register
  Method(SECR,0, Serialized) {
    // store (E0A4, S0A4)
    // store (E0A8, S0A8)
    // store (E0B0, S0B0)
    // store (E0D0, S0D0)
    store (E116, S116)
    // Do hareware save first
    store (zero, RQTY)
    store (one, RD28)

    store (SD28, Local0)
    while (Local0) {
      store (SD28, Local0)
    }
  }

  // Restore Emmc Configure Register
  Method(RECR,0, Serialized) {
    // store (S0A4, E0A4)
    // store (S0A8, E0A8)
    // store (S0B0, E0B0)
    // store (S0D0, E0D0)
    store (S116, E116)
  }

  OperationRegion(LUIE, SystemMemory, 0xFEDC0020, 0x4) //Legacy Uart Io Enable
  Field(LUIE, AnyAcc, NoLock, Preserve) {
    IER0, 1,      // 2E8
    IER1, 1,      // 2F8
    IER2, 1,      // 3E8
    IER3, 1,      // 3F8
    UOL0, 1,      // UART0 on legacy
    UOL1, 1,      // UART1 on legacy
    UOL2, 1,      // UART2 on legacy
    UOL3, 1,      // UART3 on legacy
    WUR0, 2,      //
    WUR1, 2,      //
    WUR2, 2,      //
    WUR3, 2,      //
  }

  // Fch Return Uart Interrupt
  Method(FRUI,1, Serialized) {
    if (LEqual(Arg0, 0)) {
      return (IUA0)
    }
    if (LEqual(Arg0, 1)) {
      return (IUA1)
    }
    if (LEqual(Arg0, 2)) {
      return (IUA2)
    }
    if (LEqual(Arg0, 3)) {
      return (IUA3)
    }
  } // End of Method(FRUI

  // SoftResetAoacDevice, Arg0:Device ID, Arg1:reset period in micro seconds
  Method(SRAD, 2, Serialized) {
    ShiftLeft(Arg0, 1, Local0)
    Add (Local0, 0xfed81e40, Local0)

    // AoacD3ControlRegister
    OperationRegion(ADCR, SystemMemory, Local0, 0x02)
    Field(ADCR, ByteAcc, NoLock, Preserve) {
      ADTD, 2,
      ADPS, 1,
      ADPD, 1,
      ADSO, 1,
      ADSC, 1,
      ADSR, 1,
      ADIS, 1,
      ADDS, 3,
    }
    store (one, ADIS)       // IsSwControl = 1
    store (zero, ADSR)      // SwRstB = 0
    stall (Arg1)
    store (one, ADSR)       // SwRstB = 1
    store (zero, ADIS)      // IsSwControl = 0
    stall (Arg1)
  } // End of Method(SRAD

  // DxSequenceAoacDevice, Arg0:Device ID, Arg1:3=D3, 0=D0
  Method(DSAD, 2, Serialized) {
    ShiftLeft(Arg0, 1, Local0)
    Add (Local0, 0xfed81e40, Local0)

    // AoacD3ControlRegister
    OperationRegion(ADCR, SystemMemory, Local0, 0x02)
    Field(ADCR, ByteAcc, NoLock, Preserve) {
      ADTD, 2,
      ADPS, 1,
      ADPD, 1,
      ADSO, 1,
      ADSC, 1,
      ADSR, 1,
      ADIS, 1,
      ADDS, 3,
    }
    if (LNotEqual(Arg1, ADTD)) {
      if (LEqual(Arg1, 0)) {
        //D0
        store(0x00, ADTD)
        store(one, ADPD)
        store(ADDS, Local0)
        while (LNotEqual(Local0,0x7)) {
          store(ADDS, Local0)
        }
      }
      if (LEqual(Arg1, 3)) {
        //D3
        store(zero, ADPD)
        store(ADDS, Local0)
        while (LNotEqual(Local0,0x0)) {
          store(ADDS, Local0)
        }
        store(0x03, ADTD)
      }
    }
  } // End of Method(DSAD

  // Hardware dx Sequence Aoac Device, Arg0:Device ID, Arg1:3=D3, 0=D0
  Method(HSAD, 2, Serialized) {
    ShiftLeft(1, Arg0, Local3)  // caculate bit map location
    ShiftLeft(Arg0, 1, Local0)  // Caculate device register location
    Add (Local0, 0xfed81e40, Local0)

    // AoacD3ControlRegister
    OperationRegion(ADCR, SystemMemory, Local0, 0x02)
    Field(ADCR, ByteAcc, NoLock, Preserve) {
      ADTD, 2,
      ADPS, 1,
      ADPD, 1,
      ADSO, 1,
      ADSC, 1,
      ADSR, 1,
      ADIS, 1,
      ADDS, 3,
    }

    if (LNotEqual(Arg1, ADTD)) {
      if (LEqual(Arg1, 0)) {
        // D0
        store(0x00, ADTD)
        store(one, ADPD)
        store(ADDS, Local0)
        while (LNotEqual(Local0,0x7)) {
          store(ADDS, Local0)
        }
        // Do hareware restore now
        // Set RequestType to restore
        store (one, RQTY)
        store (one, RD28)

        // Wait for restore complete
        store (SD28, Local0)
        while (LNot(Local0)) {
          store (SD28, Local0)
        }
      }
      if (LEqual(Arg1, 3)) {
        // Do hareware save first
        store (zero, RQTY)
        store (one, RD28)

        store (SD28, Local0)
        while (Local0) {
          store (SD28, Local0)
        }

        // D3
        store(zero, ADPD)
        store(ADDS, Local0)
        while (LNotEqual(Local0,0x0)) {
          store(ADDS, Local0)
        }
        store(0x03, ADTD)
      }
    }
  } // End of Method(HSAD

  // Fch Pci Interrupt Connector
  OperationRegion(FPIC, SystemIo, 0xc00, 0x02)
  Field(FPIC, AnyAcc, NoLock, Preserve) {
    FPII, 8,
    FPID, 8,
  }
  IndexField(FPII, FPID, ByteAcc, NoLock, Preserve) {
    Offset (0xF4),    // Interrupt for UArt0
    IUA0, 8,
    Offset (0xF5),
    IUA1, 8,
    Offset (0xF8),
    IUA2, 8,
    Offset (0xF9),
    IUA3, 8,
  }
  Device(SPI2) {  // SPI controller
    Name(_HID, "AMDI0061")
//    Name(_CID, "AMDI0060")    
    Name(_UID, 0)  
    
    Method (_STA, 0, NotSerialized) {
      if (SPID) {
        Return (0x0f) 
      } else {
        Return (0x00)
      }
    } // end of Method _STA
      
    Method (_CRS, 0x0, NotSerialized) {
      Name (RBUF, ResourceTemplate () {
        Memory32Fixed(ReadWrite, 0xFEC10000, 0x100)
      }) // End of Name (RBUF
      Return (RBUF)
    } // End of Method _CRS   

    Method(ASSC, 2, Serialized) //Amd Spi Semaphore Control Arg0:Request ID  Arg1:Timeout in Micro Second
    { 
      Acquire (ASSM, 0xFFFF)
      Store (Arg1, Local0) //save timeout
      Switch (ToInteger(Arg0))
      {
        Case (3) //Driver Acquire Spi Bus
          { 
            store (one, DOWS)
            store (one, STRN)
            while (LAnd(BOWS,STRN)) {
              if (Arg1) {
                stall (1)
                Subtract (Local0, one, Local0)
                if (LEqual(Local0, zero)) { Break }
              }
            }
            store (RAR2, SAR2) 
            store (zero,RAR2) 
            store (2, ASCE)
            store (SSSC, RG22)
          }
        Case (4) //Driver Release Spi Bus
          { 
            store (RG22, SSSC)
            store (zero, ASCE)
            store (SAR2, RAR2)
            store (one, Local0)
            store (zero, DOWS) 
          }
      }
      Release (ASSM)
      Return (Local0)
    }     
    
  } // End Device SPI1  

  Device(GPIO) {
    Name (_HID, "AMDI0030")
    Name (_CID, "AMDI0030")
    Name(_UID, 0)

    Method (_CRS, 0x0, NotSerialized) {
      Name (RBUF, ResourceTemplate () {
        //
        // Interrupt resource. In this example, banks 0 & 1 share the same
        // interrupt to the parent controller and similarly banks 2 & 3.
        //
        // N.B. The definition below is chosen for an arbitrary
        //      test platform. It needs to be changed to reflect the hardware
        //      configuration of the actual platform
        //
        Interrupt(ResourceConsumer, Level, ActiveLow, Shared, , , ) {7}

        //
        // Memory resource. The definition below is chosen for an arbitrary
        // test platform. It needs to be changed to reflect the hardware
        // configuration of the actual platform.
        //
        Memory32Fixed(ReadWrite, 0xFED81500, 0x400)
      }) // End of Name (RBUF
      Return (RBUF)
    } // End of Method (_CRS

    Method(_STA, 0, NotSerialized) {
      If (LGreaterEqual(TSOS, 0x70)) {
        Return (0x0F)
      } Else {
        Return (0x00)
      }
    } // End of Method(_STA
  } // End Device GPIO

  Device(FUR0) {
    Method (_HID,0, Serialized) { // Hardware Device ID
      If (LEqual(UTDT, Zero)) {
        Return ("AMDI0020")
      } Else {
        Return ("AMDI0021")
      }
    }
    Name(_UID,0x0)
    Name(_CRS, ResourceTemplate() {
      IRQ(Edge, ActiveHigh, Exclusive) {3}
      Memory32Fixed(ReadWrite, 0xFEDC9000, 0x1000)
      Memory32Fixed(ReadWrite, 0xFEDC7000, 0x1000)
    }) // End of Name(_CRS

    Method(_STA, 0, NotSerialized) {
      If (LGreaterEqual(TSOS, 0x70)) {
        if (LEqual(UT0E, one)) {
          if (UOL0) {
            Return (0)
          }
          Return (0x0F)
        }
        Return (0x00)
      } Else {
        Return (0x00)
      }
    } // End of Method(_STA

    Method(_S0W, 0) {
      if (LAnd(UT0D, UT0E)) {
        Return(4)
      } else {
        Return(0)
      }
    } // End of Method(_S0W

    Method(_PS0, 0) {
      if (LAnd(UT0D, UT0E)) {
        DSAD (11, 0)
      }
    } // End of Method(_PS0

    Method(_PS3, 0) {
      if (LAnd(UT0D, UT0E)) {
        DSAD (11, 3)
      }
    } // End of Method(_PS3
  } // End Device FUR0

  Device(FUR1) {
    Method (_HID,0, Serialized) { // Hardware Device ID
      If (LEqual(UTDT, Zero)) {
        Return ("AMDI0020")
      } Else {
        Return ("AMDI0021")
      }
    }
    Name(_UID,0x1)
    Name(_CRS, ResourceTemplate() {
      IRQ(Edge, ActiveHigh, Exclusive) {4}
      Memory32Fixed(ReadWrite, 0xFEDCA000, 0x1000)
      Memory32Fixed(ReadWrite, 0xFEDC8000, 0x1000)
    }) // End of Name(_CRS

    Method(_STA, 0, NotSerialized) {
      If (LGreaterEqual(TSOS, 0x70)) {
        if (LEqual(UT1E, one)) {
          if (UOL1) {
            Return (0)
          }
          Return (0x0F)
        }
        Return (0x00)
      } Else {
        Return (0x00)
      }
    } // End of Method(_STA

    Method(_S0W, 0) {
      if (LAnd(UT1D, UT1E)) {
        Return(4)
      } else {
        Return(0)
      }
    } // End of Method(_S0W

    Method(_PS0, 0) {
      if (LAnd(UT1D, UT1E)) {
        DSAD (12, 0)
      }
    } // End of Method(_PS0

    Method(_PS3, 0) {
      if (LAnd(UT1D, UT1E)) {
        DSAD (12, 3)
      }
    } // End of Method(_PS3
  } // End Device FUR1

  Device(FUR2) {
    Method (_HID,0, Serialized) { // Hardware Device ID
      If (LEqual(UTDT, Zero)) {
        Return ("AMDI0020")
      } Else {
        Return ("AMDI0021")
      }
    }
    Name(_UID,0x2)
    Name(_CRS, ResourceTemplate() {
      IRQ(Edge, ActiveHigh, Exclusive) {15}
      Memory32Fixed(ReadWrite, 0xFEDCE000, 0x1000)
      Memory32Fixed(ReadWrite, 0xFEDCC000, 0x1000)
    }) // End of Name(_CRS

    Method(_STA, 0, NotSerialized) {
      If (LGreaterEqual(TSOS, 0x70)) {
        if (LEqual(UT2E, one)) {
          if (UOL2) {
            Return (0)
          }
          Return (0x0F)
        }
        Return (0x00)
      } Else {
        Return (0x00)
      }
    } // End of Method(_STA

    Method(_S0W, 0) {
      if (LAnd(UT2D, UT2E)) {
        Return(4)
      } else {
        Return(0)
      }
    } // End of Method(_S0W

    Method(_PS0, 0) {
      if (LAnd(UT2D, UT2E)) {
        DSAD (16, 0)
      }
    } // End of Method(_PS0

    Method(_PS3, 0) {
      if (LAnd(UT2D, UT2E)) {
        DSAD (16, 3)
      }
    } // End of Method(_PS3
  } // End Device FUR2

  Device(FUR3) {
    Method (_HID,0, Serialized) { // Hardware Device ID
      If (LEqual(UTDT, Zero)) {
        Return ("AMDI0020")
      } Else {
        Return ("AMDI0021")
      }
    }
    Name(_UID,0x3)
    Name(_CRS, ResourceTemplate() {
      IRQ(Edge, ActiveHigh, Exclusive) {5}
      Memory32Fixed(ReadWrite, 0xFEDCF000, 0x1000)
      Memory32Fixed(ReadWrite, 0xFEDCD000, 0x1000)
    }) // End of Name(_CRS

    Method(_STA, 0, NotSerialized) {
      If (LGreaterEqual(TSOS, 0x70)) {
        if (LEqual(UT3E, one)) {
          if (UOL3) {
            Return (0)
          }
          Return (0x0F)
        }
        Return (0x00)
      } Else {
        Return (0x00)
      }
    } // End of Method(_STA

    Method(_S0W, 0) {
      if (LAnd(UT3D, UT3E)) {
        Return(4)
      } else {
        Return(0)
      }
    } // End of Method(_S0W

    Method(_PS0, 0) {
      if (LAnd(UT3D, UT3E)) {
        DSAD (26, 0)
      }
    } // End of Method(_PS0

    Method(_PS3, 0) {
      if (LAnd(UT3D, UT3E)) {
        DSAD (26, 3)
      }
    } // End of Method(_PS3
  } // End Device FUR3

  Device(I2CA) {
    Name(_HID,"AMDI0011")           // Hardware Device ID
    Name(_UID,0x0)
    Name (_ADR, 0x0) // The identifier for this device
    Name(_CRS, ResourceTemplate() {
      IRQ(Edge, ActiveHigh, Exclusive) {10}
      Memory32Fixed(ReadWrite, 0xFEDC2000, 0x1000)
    })

    Name(_DEP, Package(0x1) {
      \_SB.PCI0.GP17.MP2C
    })

    Method(_STA, 0, NotSerialized) {
      If (LGreaterEqual(TSOS, 0x70)) {
        if (LEqual(IC0E, one)) {
          if (LEqual(NI2C, Zero)) {
            Return (0x0F)
          }
        }
        Return (0x00)
      } Else {
        Return (0x00)
      }
    }

    Method(RSET, 0) {
      SRAD (5, 200)
    }
  } // End Device I2CA

  Device(I2CB) {
    Name(_HID,"AMDI0011")           // Hardware Device ID
    Name(_UID,0x1)
    Name (_ADR, 0x1) // The identifier for this device
    Name(_CRS, ResourceTemplate() {
      IRQ(Edge, ActiveHigh, Exclusive) {11}
      Memory32Fixed(ReadWrite, 0xFEDC3000, 0x1000)
    })

    Name(_DEP, Package(0x1) {
      \_SB.PCI0.GP17.MP2C
    })

    Method(_STA, 0, NotSerialized) {
      If (LGreaterEqual(TSOS, 0x70)) {
        if (LEqual(IC1E, one)) {
          if (LEqual(NI2C, Zero)) {
            Return (0x0F)
          }
        }
        Return (0x00)
      } Else {
        Return (0x00)
      }
    }

    Method(RSET, 0) {
      SRAD (6, 200)
    }
  } // End Device I2CB

  Device(I2CC) {
    Name(_HID,"AMDI0010")           // Hardware Device ID
    Name(_UID,0x2)
    Name(_CRS, ResourceTemplate() {
      IRQ(Edge, ActiveHigh, Exclusive) {14}
      Memory32Fixed(ReadWrite, 0xFEDC4000, 0x1000)
    })

    Method(_STA, 0, NotSerialized) {
      If (LGreaterEqual(TSOS, 0x70)) {
        if (LEqual(IC2E, one)) {
          Return (0x0F)
        }
        Return (0x00)
      } Else {
        Return (0x00)
      }
    }

    Method(RSET, 0) {
      SRAD (7, 200)
    }

    Method(_S0W, 0) {
      if (LAnd(IC2D, IC2E)) {
        Return(4)
      } else {
        Return(0)
      }
    }

    Method(_PS0, 0) {
      if (LAnd(IC2D, IC2E)) {
        DSAD (7, 0)
      }
    }

    Method(_PS3, 0) {
      if (LAnd(IC2D, IC2E)) {
        DSAD (7, 3)
      }
    }
  } // End Device I2CC

  Device(I2CD) {
    Name(_HID,"AMDI0010")           // Hardware Device ID
    Name(_UID,0x3)
    Name(_CRS, ResourceTemplate() {
      IRQ(Edge, ActiveHigh, Exclusive) {6}
      Memory32Fixed(ReadWrite, 0xFEDC5000, 0x1000)
    })

    Method(_STA, 0, NotSerialized) {
      If (LGreaterEqual(TSOS, 0x70)) {
        if (LEqual(IC3E, one)) {
          Return (0x0F)
        }
        Return (0x00)
      } Else {
        Return (0x00)
      }
    }

    Method(RSET, 0) {
      SRAD (8, 200)
    }

    Method(_S0W, 0) {
      if (LAnd(IC3D, IC3E)) {
        Return(4)
      } else {
        Return(0)
      }
    }

    Method(_PS0, 0) {
      if (LAnd(IC3D, IC3E)) {
        DSAD (8, 0)
      }
    }

    Method(_PS3, 0) {
      if (LAnd(IC3D, IC3E)) {
        DSAD (8, 3)
      }
    }
  } // End Device I2CD

  // eMMC Pin Configure
  Method(EPIN, 0, NotSerialized) {
    // clear all LPC claim
    // store (zero, LCLK)
    store (zero, IPDE)
    store (0xFF00, IMPE)
    // switch all pins to EMMC from LPC
    store (one, IM15)
    store (one, IM16)
    store (one, IM20)
    store (one, IM44)
    store (one, IM46)
    store (one, IM68)
    store (one, IM69)
    store (one, IM6A)
    store (one, IM6B)
    store (one, IM4A)
    store (one, IM58)
    store (one, IM4B)
    store (one, IM57)
    store (one, IM6D)
    //0xFED80D1F IOMUX is already programmed to FUNCTION_2 which is to use it as GPIO31, this is not needed by eMMC/SD
    //store (one, IM1F)
    SECR () // Save Emmc Configure Register
  }

  Name(NCRS, ResourceTemplate() {
    Interrupt(ResourceConsumer, Level, ActiveLow, Shared, , , ) {7}
    Memory32Fixed(ReadWrite, 0xFEDD5000, 0x1000)
  })

  Name(DCRS, ResourceTemplate() {
    Interrupt(ResourceConsumer, Level, ActiveLow, Shared, , , ) {7}
    Memory32Fixed(ReadWrite, 0xFEDD5000, 0x1000)
//    GpioInt (Level, ActiveBoth, ExclusiveAndWake, PullNone, 0x0000, "\\_SB.GPIO", 0x00, ResourceConsumer, , ) {68}    // AGPIO68 for SD_CD
    GpioInt(Edge, ActiveBoth, SharedAndWake, PullUp, 3000, "\\_SB.GPIO", ,) {68}
    Gpioio(Shared, PullUp, 0, 0, , "\\_SB.GPIO", ,) {68}
  })

  Name(ECRS, ResourceTemplate() {
    Interrupt(ResourceConsumer, Level, ActiveLow, Shared, , , ) {7}
    Memory32Fixed(ReadWrite, 0xFEDD5000, 0x1000)
//    GpioInt (Level, ActiveBoth, ExclusiveAndWake, PullNone, 0x0000, "\\_SB.GPIO", 0x00, ResourceConsumer, , ) {68}    // AGPIO68 for SD_CD
    GpioInt(Edge, ActiveLow, SharedAndWake, PullUp, 3000, "\\_SB.GPIO", ,) {68}
//    Gpioio(Shared, PullUp, 0, 0, , "\\_SB.GPIO", ,) {68}
  })
  Name(AHID,"AMDI0040")             // AMD eMMC Driver ID
  Name(ACID,"AMDI0040")
  Name(MHID,"AMDI0041")             // MS eMMC Driver ID
  Name(MCID,"AMDI0041")
  Name(SHID, EISAID ("PNP0D40"))    // MS SD Driver
  Name(SCID, "PCI\CC_080501")

  Device(EMM0) {
    Method(_HID, 0, Serialized) {
      if (Lequal(EMMD, 0)) {
        Return (AHID)
      }
      if (Lequal(EMMD, 1)) {
        Return (SHID)
      }
      if (Lequal(EMMD, 2)) {
        Return (MHID)
      }
    }

    Method(_CID, 0, Serialized) {
      if (Lequal(EMMD, 0)) {
        Return (ACID)
      }
      if (Lequal(EMMD, 1)) {
        Return (SCID)
      }
      if (Lequal(EMMD, 2)) {
        Return (MCID)
      }
    }

    Name(_UID, 0x0)

    Method(_CRS, 0, Serialized) {
      if (EMD3) {
        if (Lequal(EMMD, 1)) {
        Return (DCRS)
        }
        Return (ECRS)
      } else {
        Return (NCRS)
      }
    } // End of Method(_CRS

    Method(_STA, 0, NotSerialized) {
        If (LGreaterEqual(TSOS, 0x70)) {
          if (EMME) {
            Return (0x0F)
          }
          Return (0x00)
        } Else {
          Return (0x00)
        }
    }

    Method(_INI, 0, NotSerialized) {
      if (EMME) {
        EPIN ()
      }
    }

    Method(_S0W,0) {
      if (LAnd(EMD3, EMME)) {
        Return(4)
      } else {
        Return(0)
      }
    }

    Method(_PS0,0) {
      if (LAnd(EMD3, EMME)) {
        HSAD (28, 0)
        RECR () // Restore Emmc Configure Register
      }
    }

    Method(_PS3,0) {
      if (LAnd(EMD3, EMME)) {
        HSAD (28, 3)
      }
    }
      Device(CARD) {
      Name(_ADR,Zero)
      Method(_RMV,0,NotSerialized)
      { 
        if (Lequal(EMMD, 1)) {
	  if (Lequal(SDMC, 1)) {
		Return (Zero)
	  }
	  Return (One)
        } 
        Return(Zero)
      }
    }
  } // End Device EMMC

  Name(D0ST, 1)
  Name(D3ST, 1)

  PowerResource(P0ST, 0, 0) {
    Method(_STA) {
      Return(D0ST)
    }
    Method(_ON) {
      Store(0x01, D0ST)
    }
    Method(_OFF) {
      Store(0x00, D0ST)
    }
  } // End of PowerResource(P0ST

  PowerResource(P3ST, 0, 0) {
    Method(_STA) {
      Return(D3ST)
    }
    Method(_ON) {
      Store(0x01, D3ST)
    }
    Method(_OFF) {
      Store(0x00, D3ST)
    }
  } // End of PowerResource(P3ST
} // End of Scope(\_SB)


Scope(\_SB.PCI0) {
  Device(UAR1) {  // COM Port
    Name(_HID, EISAID("PNP0501"))
    Name(_DDN, "COM4")
    Name(_UID, 0x04)

    //*****************************************************
    // Method _STA:  Return Status
    //*****************************************************
    Method (_STA, 0, NotSerialized) { // Return Status of the UART
      if (\_SB.IER0) {
        Return (0x0f)
      }
      Return (0x00)
    } // end of Method _STA

    //*****************************************************
    //  Method _CRS:  Return Current Resource Settings
    //*****************************************************
    Method (_CRS, 0, NotSerialized) {
      Name (BUF0, ResourceTemplate() {
        IO (Decode16, 0x2E8, 0x2E8, 0x01, 0x08)
        IRQNoFlags() {3}
      })
      //
      // Create some ByteFields in the Buffer in order to
      // permit saving values into the data portions of
      // each of the descriptors above.
      //
      CreateByteField (BUF0, 0x02, IOLO) // IO Port Low
      CreateByteField (BUF0, 0x03, IOHI) // IO Port Hi
      CreateByteField (BUF0, 0x04, IORL) // IO Port Low
      CreateByteField (BUF0, 0x05, IORH) // IO Port High
      CreateWordField (BUF0, 0x09, IRQL) // IRQ
      // Enter Configuration Mode
      //
      // Get the IO setting from the chip, and copy it
      // to both the min & max for the IO descriptor.
      //
      // Low Bytes:
      // Store (CR61, IOLO)    // min.
      // Store (CR61, IORL)    // max.
      // High Bytes:
      // Store (CR60, IOHI)   // min.
      // Store (CR60, IORH)   // max.
      //
      // Get the IRQ setting from the chip, and shift
      // it into the Descriptor byte.
      //
      // ShiftLeft (Local0, CR70, IRQL)
      ShiftLeft (One,\_SB.FRUI (\_SB.WUR0), IRQL) //get Uart interrupt number
      Return(BUF0) // return the result
    } // end _CRS Method
  } // end of Device UART1

  Device(UAR2) {  // COM Port
    Name(_HID, EISAID("PNP0501"))
    Name(_DDN, "COM2")
    Name(_UID, 0x02)

    //*****************************************************
    // Method _STA:  Return Status
    //*****************************************************
    Method (_STA, 0, NotSerialized) { // Return Status of the UART
      if (\_SB.IER1) {
        Return (0x0f)
      }
      Return (0x00)
    } // end of Method _STA

    //*****************************************************
    //  Method _CRS:  Return Current Resource Settings
    //*****************************************************
    Method (_CRS, 0, NotSerialized) {
      Name (BUF0, ResourceTemplate() {
        IO (Decode16, 0x2F8, 0x2F8, 0x01, 0x08)
        IRQNoFlags() {4}
      })
      //
      // Create some ByteFields in the Buffer in order to
      // permit saving values into the data portions of
      // each of the descriptors above.
      //
      CreateByteField (BUF0, 0x02, IOLO) // IO Port Low
      CreateByteField (BUF0, 0x03, IOHI) // IO Port Hi
      CreateByteField (BUF0, 0x04, IORL) // IO Port Low
      CreateByteField (BUF0, 0x05, IORH) // IO Port High
      CreateWordField (BUF0, 0x09, IRQL) // IRQ
      // Enter Configuration Mode
      //
      // Get the IO setting from the chip, and copy it
      // to both the min & max for the IO descriptor.
      //
      // Low Bytes:
      //Store (CR61, IOLO)    // min.
      //Store (CR61, IORL)    // max.
      // High Bytes:
      //Store (CR60, IOHI)   // min.
      //Store (CR60, IORH)   // max.
      //
      // Get the IRQ setting from the chip, and shift
      // it into the Descriptor byte.
      //
      //ShiftLeft (Local0, CR70, IRQL)
      ShiftLeft (One,\_SB.FRUI (\_SB.WUR1), IRQL) //get Uart interrupt number
      Return(BUF0) // return the result
    } // end _CRS Method
  } // end of Device UART2

  Device(UAR3) {  // COM Port
    Name(_HID, EISAID("PNP0501"))
    Name(_DDN, "COM3")
    Name(_UID, 0x03)

    //*****************************************************
    // Method _STA:  Return Status
    //*****************************************************
    Method (_STA, 0, NotSerialized) { // Return Status of the UART
      if (\_SB.IER2) {
        Return (0x0f)
      }
      Return (0x00)
    } // end of Method _STA

    //*****************************************************
    //  Method _CRS:  Return Current Resource Settings
    //*****************************************************
    Method (_CRS, 0, NotSerialized) {
      Name (BUF0, ResourceTemplate() {
        IO (Decode16, 0x3E8, 0x3E8, 0x01, 0x08)
        IRQNoFlags() {3}
      })
      //
      // Create some ByteFields in the Buffer in order to
      // permit saving values into the data portions of
      // each of the descriptors above.
      //
      CreateByteField (BUF0, 0x02, IOLO) // IO Port Low
      CreateByteField (BUF0, 0x03, IOHI) // IO Port Hi
      CreateByteField (BUF0, 0x04, IORL) // IO Port Low
      CreateByteField (BUF0, 0x05, IORH) // IO Port High
      CreateWordField (BUF0, 0x09, IRQL) // IRQ
      // Enter Configuration Mode
      //
      // Get the IO setting from the chip, and copy it
      // to both the min & max for the IO descriptor.
      //
      // Low Bytes:
      //Store (CR61, IOLO)    // min.
      //Store (CR61, IORL)    // max.
      // High Bytes:
      //Store (CR60, IOHI)   // min.
      //Store (CR60, IORH)   // max.
      //
      // Get the IRQ setting from the chip, and shift
      // it into the Descriptor byte.
      //
      //ShiftLeft (Local0, CR70, IRQL)
      ShiftLeft (One,\_SB.FRUI (\_SB.WUR2), IRQL) //get Uart interrupt number
      Return(BUF0) // return the result
    } // end _CRS Method
  } // end of Device UART3

  Device(UAR4) {  // COM Port
    Name(_HID, EISAID("PNP0501"))
    Name(_DDN, "COM1")
    Name(_UID, 0x01)

    //*****************************************************
    // Method _STA:  Return Status
    //*****************************************************
    Method (_STA, 0, NotSerialized) { // Return Status of the UART
      if (\_SB.IER3) {
        Return (0x0f)
      }
      Return (0x00)
    } // end of Method _STA

    //*****************************************************
    //  Method _CRS:  Return Current Resource Settings
    //*****************************************************
    Method (_CRS, 0, NotSerialized) {
      Name (BUF0, ResourceTemplate() {
        IO (Decode16, 0x3F8, 0x3F8, 0x01, 0x08)
        IRQNoFlags() {4}
      })
      //
      // Create some ByteFields in the Buffer in order to
      // permit saving values into the data portions of
      // each of the descriptors above.
      //
      CreateByteField (BUF0, 0x02, IOLO) // IO Port Low
      CreateByteField (BUF0, 0x03, IOHI) // IO Port Hi
      CreateByteField (BUF0, 0x04, IORL) // IO Port Low
      CreateByteField (BUF0, 0x05, IORH) // IO Port High
      CreateWordField (BUF0, 0x09, IRQL) // IRQ
      // Enter Configuration Mode
      //
      // Get the IO setting from the chip, and copy it
      // to both the min & max for the IO descriptor.
      //
      // Low Bytes:
      //Store (CR61, IOLO)    // min.
      //Store (CR61, IORL)    // max.
      // High Bytes:
      //Store (CR60, IOHI)   // min.
      //Store (CR60, IORH)   // max.
      //
      // Get the IRQ setting from the chip, and shift
      // it into the Descriptor byte.
      //
      //ShiftLeft (Local0, CR70, IRQL)
      ShiftLeft (One,\_SB.FRUI (\_SB.WUR3), IRQL) //get Uart interrupt number
      Return(BUF0) // return the result
    } // end _CRS Method
  } // end of Device UART4
} // end of Scope(\_SB.PCI0)


Scope(\_SB.PCI0.GP17.VGA) {
    Device (CAMF) {
      Name (_ADR, 0x1000) // The identifier for this device
      Method(_STA, 0, NotSerialized) {
        Return (0x0) //existing without power
      }

      Method(_PS0, 0) {
        store (one, \_SB.O042)
      }

      Method(_PS3, 0) {
        store (zero, \_SB.O042)
      }
    } // End of Device (CAMF)

    Device (CAMR) {
      Name (_ADR, 0x2000) // The identifier for this device
      Method(_STA, 0, NotSerialized) {
        Return (0x0) //existing without power
      }

      Method(_PS0, 0) {
        store (one, \_SB.O089)
      }

      Method(_PS3, 0) {
        store (zero, \_SB.O089)
      }
    } // End of Device (CAMR)

    // Turn on Device (CAMR)
    Method(RCPU, 0) {
      store (one, \_SB.O089)
    }

    // Turn off Device (CAMR)
    Method(RCPD, 0) {
      store (zero, \_SB.O089)
    }

    // Turn on Device (CAMF)
    Method(FCPU, 0) {
      store (one, \_SB.O042)
    }

    // Turn off Device (CAMF)
    Method(FCPD, 0) {
      store (zero, \_SB.O042)
    }

    // Turn on ISP_24M Clock
    Method(ICLE, 0) {
      store (zero, \_SB.I24M)
    }

    // Turn off ISP_24M Clock
    Method(ICLD, 0) {
      store (one, \_SB.I24M)
    }
} // End of Scope(\_SB.PCI0.GP17.VGA)


Scope(\_SB.PCI0.GP18.SATA) {
  // Indicate support for D0.
  Name(_PR0, Package() {P0ST})          // Power resources required for D0

  // Indicate support for D3Cold.
  Name(_PR3, Package() {P3ST})          // Power resource for D3; These will be turned off ONLY if drivers
  Method(_S0W, 0) {
    if (LEqual(ST_D, one)) {
      Return(4)
    } else {
      Return(0)
    }
  }

  Method(_PS0, 0) {
    if (LEqual(ST_D, one)) {
//      Store(0x88, IO80)
      store(0xD6, SMIW)
    }
  }

  Method(_PS3, 0) {
    if (LEqual(ST_D, one)) {
//      Store(0x77, IO80)
      store(0xD5, SMIW)
    }
  }
} // End of Scope(\_SB.PCI0.GP18.SATA)

